import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */
// keywords
terminal PROC, CALL, LET, DEF, IF, THEN, ELSE, CASE, READ, READINT, PRINT, PRINTLN;

// special symbols
terminal LPAREN, RPAREN, SEMI, COLON, AT, ELIST, DQUOTE;
terminal LBRACE, RBRACE, COMMA, LBRACKET, RBRACKET;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POW, ASSIGN;

// logical operators
terminal AND, OR, NOT;

// bitwise operators
terminal AMP, BAR, TILDE;

// comments
terminal LCOM, BCOMS , BCOME;

// terminals with values
terminal Integer INT;
terminal String VAR;
terminal Cmp COMPARISON;
terminal Cmp EQUAL;
terminal Double FLOAT;
terminal Character CHAR;
terminal String STRING;
terminal Boolean BOOLLIT;

/* Non terminals */
non terminal ArithProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtDefinition definition;
//non terminal Statement mulDef;

/* ** Fix these declarations ** */
non terminal StmtFunDefn funDefn;
non terminal ExpFunCall funCall;
non terminal Exp ifThen;
non terminal Exp ifTheno;		//open
non terminal Exp ifThenc;		//closed
non terminal ExpCompare logExp;
non terminal ArrayList<String> paramList;
non terminal ArrayList<String> paramListE;
non terminal ArrayList<Exp> argList;
non terminal ArrayList<Exp> argListE;
non terminal ExpBind bind;
non terminal ArrayList<ExpBind> bindList;
non terminal ExpCClause pred;
non terminal ArrayList<ExpCClause> predList;
non terminal list;
non terminal vector;
non terminal vectorCall;
non terminal Exp proc;
non terminal call;
non terminal Exp let;
non terminal StmtExpDefn def;
non terminal Exp case;
non terminal Exp expSeq;
non terminal Exp mulExp;
non terminal Exp read;
non terminal comment;
/* **** */

non terminal Exp expression;    //non if expression
non terminal Exp exptop;		//top level exp
non terminal Exp expo;      	//open
non terminal Exp expc;			//closed
non terminal ArrayList<Exp> explist;
non terminal Exp term;
non terminal Exp factor;
non terminal empty;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new ArithProgram(s); :}|
	 exptop:e {: Statement s = new Statement(e);
	 			StmtSequence ss = new StmtSequence(s);
	 			RESULT = new ArithProgram(ss); :}|
	 	stmtList:lst exptop:e{: 
			Statement s = new Statement(e);
			lst.add(s);
			RESULT = new ArithProgram(lst); :};

stmtList ::= stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

stmt ::= definition:d SEMI{: RESULT = d; :}|
	  exptop:e SEMI {: RESULT = new Statement(e); :} |
	 def:d SEMI{:RESULT = d; :}; ////expression:e {: RESULT = new Statement(e); :}SEMI;//

exptop ::= expo:e {: RESULT = e; :}| 
			expc:e {: RESULT = e; :}|
	   proc:p {: RESULT = p; :};//this replaced expression

expo ::= ifTheno:i {: RESULT = i; :};

expc ::= expression:e {: RESULT = e; :}|
		ifThenc:i {: RESULT = i; :};

explist ::= explist:lst exptop:e{:
			lst.add(e);
			RESULT = lst; :}|
			exptop:e {: ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result; :};

/*This function definintion no longer valid*/
/*funDefn ::= VAR:v LPAREN paramList:pe RPAREN EQUAL LBRACE stmtList:s RBRACE {:
			RESULT = new StmtFunDefn(v,pe,s); :} |
		 VAR:v LPAREN paramList:pe RPAREN EQUAL expression:e SEMI {:
			RESULT = new StmtFunDefn(v,pe,e); :}; */


paramList ::= paramList:plst COMMA VAR:v {:
		plst.add(v);
			RESULT = plst; :} |
		VAR:v {:
				ArrayList<String> result = new ArrayList<>();
				result.add(v);
				RESULT = result;
			:} | {: ArrayList<String> result = new ArrayList<>();
				RESULT = result; :};  /* complete this */

paramListE ::= paramList:pl {:RESULT=pl;:} | empty;

//used in let definition
bind ::= VAR:v EQUAL exptop:e {: RESULT = new ExpBind(v,e); :};

bindList ::= bindList:blst COMMA bind:b {: blst.add(b);
			RESULT = blst; :} |
		bind:b {:
				ArrayList<ExpBind> result = new ArrayList<>();
				result.add(b); //changed from arraylist <string> to arraylist<expbind>
				RESULT = result;
			:} | {: ArrayList<ExpBind> result = new ArrayList<>();
				RESULT = result; :};

// used in case definintion
pred ::= logExp:l COLON exptop:e SEMI{: RESULT = new ExpCClause(l,e); :} |
		ELSE COLON exptop:e SEMI{: RESULT = new ExpCClause(e); :};

predList ::= predList:plst pred:p {: plst.add(p);
			RESULT = plst; :} |
			pred:p {:
				ArrayList<ExpCClause> result = new ArrayList<>();
				result.add(p);
				RESULT = result; :};

list ::= LBRACKET argListE:alst RBRACKET {: RESULT = alst; :}; // add other list form //fix rewsult

vector ::= LBRACKET COLON argListE:alst COLON RBRACKET {: RESULT = null; :};

vectorCall ::= vector:v LBRACKET exptop:e RBRACKET	{: RESULT = null; :};			

/* New keyword functions */
proc ::= PROC VAR:v stmtList:body {: RESULT = null; :} |
		PROC LPAREN paramList:plst RPAREN exptop:e {: RESULT = new ExpProcedure(plst,e); :}|
		PROC LPAREN paramList:plst RPAREN LBRACKET stmtList:body RBRACKET{: RESULT = null; :};// | 
		//PROC LPAREN paramList:plst COMMA list:lst RPAREN stmtList:body SEMI{: RESULT = null; :};

//proco ::= PROC LPAREN paramList:plst RPAREN expo:e {: RESULT = null; :};

//procc ::= PROC LPAREN paramList:plst RPAREN expc:e {: RESULT = null; :};

//call ::= CALL LPAREN proc:p COMMA list:l RPAREN {: RESULT = new ExpCall(p,l); :} |
call::=  CALL LPAREN VAR:v COMMA list:l RPAREN	{:RESULT=new ExpCall(new ExpVar(v),l);:}|
		  CALL LPAREN VAR:v COMMA VAR:l RPAREN{:RESULT=new ExpCall(new ExpVar(v),new ExpVar(l));:}; //change to getting a list and not an arg
     

let ::= LET LPAREN bindList:blst RPAREN stmtList:body {: RESULT = new ExpLet(blst,body); :};

logExp ::= exptop:e COMPARISON:c exptop:e2{:
				RESULT = new ExpCompare(e,e2,c);:} |
			exptop:e EQUAL:c exptop:e2{:
				RESULT = new ExpCompare(e,e2,c);:};

/*ifThen ::= IF logExp:l THEN expression:e ELSE expression:e2 END {:
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);:}|
			IF logExp:l THEN expression:e END{:
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = new ExpIfThen(result,l);:};*/

ifTheno ::= IF logExp:l THEN exptop:e {:
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = new ExpIfThen(result,l);:}|
			IF logExp:l THEN expc:e ELSE expo:e2 {:
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);:}; //open

ifThenc ::= IF logExp:l THEN expc:e ELSE expc:e2 {:
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);:}; //closed

case ::= CASE LBRACE predList:plst RBRACE {: RESULT = new ExpCase(plst); :};

expSeq ::= LBRACE argList:alst RBRACE {: RESULT = new ExpSequence(alst); :};

mulExp ::= LPAREN argList:alst RPAREN {: RESULT = new MultiValExp(alst); :};

def ::= DEF VAR:v exptop:e {: RESULT = new StmtExpDefn(v,e); :};
				
definition ::= VAR:v ASSIGN exptop:e {:
		   RESULT = new StmtDefinition(v, e); :};/*|
			paramList:plst ASSIGN argList:alst {: RESULT = null; :}*/

//mulDef ::= paramList:plst ASSIGN argList:alst {: RESULT = null; :};


read ::= READ LPAREN RPAREN {: RESULT = new ExpRead("string"); :}|
		READINT LPAREN RPAREN {:RESULT = new ExpRead("int"); :};

comment ::= LCOM {:RESULT = null; :}|
			BCOMS BCOME {:RESULT = null; :};

/* End of new keyword functions*/

argList ::= argList:alst COMMA exptop:e {:
		alst.add(e);
			RESULT = alst; :}|
		exptop:e {:
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result;
			:} | 
			{: ArrayList<Exp> result = new ArrayList<>();
				RESULT = result; :};


argListE ::= argList:al {:RESULT=al;:} | empty:em{:RESULT=new ArrayList<>();:};

funCall ::= VAR:v LPAREN argList:ae RPAREN {:
			RESULT = new ExpFunCall(v,ae); :};//|
			//LPAREN proc:p RPAREN LPAREN argList:ae RPAREN {: RESULT = null; :}|
			//LPAREN funCall:fc RPAREN LPAREN argList:ae RPAREN {: RESULT = null; :};


expression ::= 	expression:e PLUS term:t {:
			RESULT = new ExpAdd(e, t); :} |
		expression:e MINUS term:t {:
			RESULT = new ExpSub(e, t); :} |
		term:t {: RESULT = t; :};

term ::= term:t MUL factor:f {:
		RESULT = new ExpMul(t, f); :} |
	 term:t DIV factor:f {:
		RESULT = new ExpDiv(t, f); :} |
	 term:t MOD factor:f {:
		RESULT = new ExpMod(t, f); :} |
	 factor:f {: RESULT = f; :}; 

factor ::= INT:ilit {: RESULT = new ExpLitInt(ilit); :} |
          FLOAT:ilit {:RESULT = new ExpLitDouble(ilit);:}|
	   LPAREN exptop:e RPAREN {: RESULT = e; :}|
	   funCall:fc {: RESULT = fc; :}|
	   case:c {: RESULT = c; :}|
	   let:l {: RESULT = l; :};
empty ::= ;
