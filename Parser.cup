import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */
// keywords
terminal PROC, CALL, LET, DEF, IF, THEN, ELSE, CASE, READ, READINT, PRINT, PRINTLN, DO, FOR, WHILE, REPEAT, UNTIL, BREAK, CONTINUE;

// special symbols
terminal LPAREN, RPAREN, SEMI, COLON, AT, ELIST, DQUOTE;
terminal LBRACE, RBRACE, COMMA, LBRACKET, RBRACKET, DOT;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POW, ASSIGN;

// logical operators
terminal AND, OR, NOT, IN;

// bitwise operators
terminal AMP, BAR, TILDE;

// comments
terminal LCOM, BCOMS , BCOME, NL;

// builtins
terminal ISPAIR, PAIR, ISEQV, ISEQ,CAR, CDR, SIZE, LIST, SUBSTR;

// terminals with values
terminal Integer INT;
terminal String VAR;
terminal Cmp COMPARISON;
terminal Cmp EQUAL;
terminal Double FLOAT;
terminal Character CHAR;
terminal String STRING;
terminal Boolean BOOLLIT;

/* Non terminals */
non terminal ArithProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtDefinition definition;
//non terminal Statement mulDef;

/* ** Fix these declarations ** */
non terminal StmtFunDefn funDefn;
non terminal ExpFunCall funCall;
non terminal Exp ifThen;
non terminal Exp ifTheno;		//open
non terminal Exp ifThenc;		//closed
non terminal Exp logExp;
non terminal Exp logExpO;
non terminal Exp logExpA;
non terminal Exp logExpN;
non terminal Exp logFactor;
non terminal ArrayList<String> paramList;
non terminal ArrayList<String> paramListE;
non terminal ArrayList<Exp> argList;
non terminal ArrayList<Exp> argListE;
non terminal ArrayList<Exp> multiArgList;
non terminal ExpBind bind;
non terminal ArrayList<ExpBind> bindList;
non terminal ExpCClause pred;
non terminal ArrayList<ExpCClause> predList;
non terminal ExpList list;
non terminal ExpVector vector;
non terminal ExpVecCall vectorCall;
non terminal Exp proc;
non terminal ExpCall call;
non terminal Exp size;
non terminal ArrayList<Exp> sizeList;
non terminal Exp let;
non terminal StmtExpDefn def;
non terminal Exp case;
non terminal Exp expSeq;
non terminal Exp mulExp;
non terminal Exp print;
non terminal Exp read;
non terminal Exp comment;
/* **** */

non terminal Exp bitexp;        // non if expression with & and |
non terminal Exp expression;    //non if expression
non terminal Exp exptop;		//top level exp
non terminal Exp expo;      	//open
non terminal Exp expc;			//closed
non terminal ArrayList<Exp> explist;
non terminal Exp term;
non terminal Exp factor;
non terminal Exp atom; //lowest level expression
non terminal empty;
non terminal Exp builtin;
non terminal Exp expOrLog;

non terminal Exp foro;
non terminal Exp whileo;
non terminal Exp repeato;
non terminal Exp forc;
non terminal Exp whilec;
non terminal Exp repeatc;


/* Grammar rules */

program ::= stmtList:s {: RESULT = new ArithProgram(s); :}|
			expOrLog:e {: 
				Statement s = new Statement(e);
				StmtSequence ss = new StmtSequence(s);
				RESULT = new ArithProgram(ss); :}|
			stmtList:lst exptop:e{: 
				Statement s = new Statement(e);
				lst.add(s);
				RESULT = new ArithProgram(lst); :};

stmtList ::= stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

stmt ::= definition:d SEMI{: RESULT = d; :}|
	  expOrLog:e SEMI {: RESULT = new Statement(e); :} |
	 def:d SEMI{:RESULT = d; :}| ////expression:e {: RESULT = new Statement(e); :}SEMI|
	 print:p SEMI {: RESULT = new Statement(p); :};

expOrLog ::= exptop:e {: RESULT = e; :}|
				logExpO:e {: RESULT = e; :};

exptop ::= expo:e {: RESULT = e; :}| 
			expc:e {: RESULT = e; :}|
	   proc:p {: RESULT = p; :}|
	   comment:c{: RESULT = c; :};//this replaced expression

expo ::= ifTheno:i {: RESULT = i; :} |
		foro:e {: RESULT = e; :} |
		whileo:e {: RESULT = e; :} |
		repeato:e {: RESULT = e; :};

expc ::= bitexp:e {: RESULT = e; :}|
		ifThenc:i {: RESULT = i; :};

explist ::= explist:lst exptop:e{:
			lst.add(e);
			RESULT = lst; :}|
			exptop:e {: ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result; :};

foro ::= FOR VAR:v IN exptop:iter DO exptop:body {:
			RESULT = new ExpForIn(v, iter, body);
			:} |
		FOR VAR:v ASSIGN exptop:init SEMI logExpO:cond SEMI def:inc DO exptop:body {:
			RESULT = new ExpFor(new StmtDefinition(v, init), cond, inc, body);
		:} |
		FOR VAR:v ASSIGN exptop:init SEMI logExpO:cond SEMI definition:inc DO exptop:body {:
			RESULT = new ExpFor(new StmtDefinition(v, init), cond, inc, body);
		:};

whileo ::= WHILE logExpO:cond DO exptop:body {:
				RESULT = new ExpWhile(cond,body);
			:} |
			WHILE VAR:v DO exptop:body {:
				RESULT = new ExpWhile(new ExpVar(v),body);
			:};

repeato ::= REPEAT expOrLog:body UNTIL LPAREN logExpO:cond RPAREN {:
				RESULT = new ExpRepeat(cond, body);
			:} | 
			REPEAT expOrLog:body UNTIL LPAREN VAR:v RPAREN {:
				RESULT = new ExpRepeat(new ExpVar(v), body);
			:};



builtin ::= list:l {: RESULT = l; :} |
			PAIR LPAREN exptop:e1 COMMA exptop:e2 RPAREN {: RESULT = new ExpPair(e1, e2); :} |
			CAR LPAREN exptop:e1 RPAREN {: RESULT = new ExpCar(e1); :} |
			CDR LPAREN exptop:e1 RPAREN {: RESULT = new ExpCdr(e1); :} |
			SIZE LPAREN exptop:e1 RPAREN{: RESULT = new ExpGetSize(e1); :} |
			vector:v {: RESULT = v; :} |
			vectorCall:vc {: RESULT = vc; :} |
			SUBSTR LPAREN exptop:e1 COMMA exptop:e2 COMMA exptop:e3 RPAREN {: RESULT = new ExpSubstr(e1, e2, e3); :};

paramList ::= paramList:plst COMMA VAR:v {:
		plst.add(v);
			RESULT = plst; :} |
		VAR:v {:
				ArrayList<String> result = new ArrayList<>();
				result.add(v);
				RESULT = result;
			:};

paramListE ::= paramList:pl {:RESULT=pl; :} | 
				empty {: 
					ArrayList<String> result = new ArrayList<>();
					RESULT = result; 
				:};

//used in let definition
bind ::= VAR:v EQUAL exptop:e {: RESULT = new ExpBind(v,e); :};

bindList ::= bindList:blst COMMA bind:b {: blst.add(b);
			RESULT = blst; :} |
		bind:b {:
				ArrayList<ExpBind> result = new ArrayList<>();
				result.add(b); //changed from arraylist <string> to arraylist<expbind>
				RESULT = result;
			:} | {: ArrayList<ExpBind> result = new ArrayList<>();
				RESULT = result; :};

// used in case definintion
pred ::= logExpO:l COLON exptop:e SEMI{: RESULT = new ExpCClause(l,e); :} | 
		VAR:l COLON exptop:e SEMI{: RESULT = new ExpCClause(new ExpVar(l),e); :} | 
		ELSE COLON exptop:e SEMI{: RESULT = new ExpCClause(e); :};

predList ::= predList:plst pred:p {: plst.add(p);
			RESULT = plst; :} |
			pred:p {:
				ArrayList<ExpCClause> result = new ArrayList<>();
				result.add(p);
				RESULT = result; :};

list ::= LBRACKET argListE:alst RBRACKET {: RESULT = new ExpList(alst); :} |
		LIST LPAREN argListE:alst RPAREN {: RESULT = new ExpList(alst); :} |
		ELIST {: RESULT = new ExpList(); :}; // add other list form //fix rewsult
//make new class and change into other smpl list when evaluating?

vector ::= LBRACKET COLON argListE:alst COLON RBRACKET {: RESULT = new ExpVector(alst); :}|
			LBRACKET sizeList:slst RBRACKET{: RESULT = null; :};

size ::= exptop:e1 COLON exptop:e2 {: RESULT = new ExpSize(e1,e2); :};

sizeList ::= sizeList:slst COMMA size:s {: slst.add(s);
			RESULT = slst; :} |
			size:s {:
				ArrayList<Exp> result = new ArrayList<>();
				result.add(s);
				RESULT = result; :};

vectorCall ::= vector:v LBRACKET exptop:e RBRACKET	
						{: RESULT = new ExpVecCall(v,e); :} | 
				VAR:v LBRACKET exptop:e RBRACKET {: 
					RESULT = new ExpVecCall(new ExpVar(v),e); 
				:};		

/* New keyword functions */
proc ::= PROC VAR:v exptop:body {: 
			ArrayList<String> arr = new ArrayList<>();
			arr.add(v);
			RESULT = new ExpProcedure(arr,body, ProcForm.VARARG); 
		:} |
		PROC LPAREN paramListE:plst RPAREN exptop:e {: 
			RESULT = new ExpProcedure(plst,e, ProcForm.FORMAL); 
		:} |
		PROC LPAREN paramList:plst DOT VAR:v RPAREN exptop:body {: 
			plst.add(v);
			RESULT = new ExpProcedure(plst,body, ProcForm.MIXED); 
		:};
		

//proco ::= PROC LPAREN paramList:plst RPAREN expo:e {: RESULT = null; :};

//procc ::= PROC LPAREN paramList:plst RPAREN expc:e {: RESULT = null; :};

//call ::= CALL LPAREN proc:p COMMA list:l RPAREN {: RESULT = new ExpCall(p,l); :} |
call::=  CALL LPAREN VAR:v COMMA list:lst RPAREN	{:RESULT=new ExpCall(new ExpVar(v),lst);:}|
		  CALL LPAREN VAR:v COMMA VAR:lst RPAREN{:RESULT=new ExpCall(new ExpVar(v),new ExpVar(lst));:}; //change to getting a list and not an arg
     

let ::= LET LPAREN bindList:blst RPAREN stmtList:body {: RESULT = new ExpLet(blst,body); :};

logExp ::= exptop:e COMPARISON:c exptop:e2{:
				RESULT = new ExpCompare(e,e2,c);:} |
			exptop:e EQUAL:c exptop:e2{:
				RESULT = new ExpCompare(e,e2,c);:};

logExpO ::= logExpO:e1 OR logExpA:e2 {: RESULT = new ExpComp(e1,e2,"OR"); :} |
			logExpO:e1 OR VAR:e2 {: RESULT = new ExpComp(e1, new ExpVar(e2),"OR"); :} |
			VAR:e1 OR logExpA:e2 {: RESULT = new ExpComp(new ExpVar(e1),e2,"OR"); :} |
			VAR:e1 OR VAR:e2 {: RESULT = new ExpComp(new ExpVar(e1), new ExpVar(e2), "OR"); :} |
			logExpA:e {: RESULT = e; :};

logExpA ::= logExpA:e1 AND logExpN:e2 {: RESULT = new ExpComp(e1,e2,"AND"); :}|
			logExpA:e1 AND VAR:e2 {: RESULT = new ExpComp(e1,new ExpVar(e2),"AND"); :}|
			VAR:e1 AND logExpN:e2 {: RESULT = new ExpComp(new ExpVar(e1), e2, "AND"); :}|
			VAR:e1 AND VAR:e2 {: RESULT = new ExpComp(new ExpVar(e1), new ExpVar(e2), "AND"); :} |
			logExpN:e {: RESULT = e; :};

logExpN ::= NOT logExp:e {: RESULT = new ExpComp(e,e,"NOT"); :}|
			NOT VAR:v {: RESULT = new ExpComp(new ExpVar(v), new ExpVar(v), "NOT"); :}|
			logFactor:e {: RESULT = e; :};

logFactor ::= logExp:e {: RESULT = e; :} |
			LPAREN logExpO:e RPAREN {: RESULT = e; :} |
			BOOLLIT:b {: RESULT = new ExpLitBool(b);:} | 
			ISPAIR LPAREN exptop:e1 RPAREN {: RESULT = new ExpIsPair(e1); :} |
			ISEQ LPAREN exptop:e1 COMMA exptop:e2 RPAREN {: RESULT = new ExpIsEq(e1, e2);  :} |
			ISEQV LPAREN exptop:e1 COMMA exptop:e2 RPAREN {: RESULT = new ExpIsEqv(e1, e2); :};

/*ifThen ::= IF logExp:l THEN expression:e ELSE expression:e2 END {:
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);:}|
			IF logExp:l THEN expression:e END{:
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = new ExpIfThen(result,l);:};*/

ifTheno ::= IF logExpO:l THEN exptop:e {:				//changed logExp to logExpO
			ArrayList<Exp> result = new ArrayList<>(); 
				result.add(e);
				RESULT = new ExpIfThen(result,l);:} |
			IF logExpO:l THEN expc:e ELSE expo:e2 {:
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);:} |
			IF VAR:l THEN exptop:e {:				//changed logExp to logExpO
			ArrayList<Exp> result = new ArrayList<>(); 
				result.add(e);
				RESULT = new ExpIfThen(result,new ExpVar(l));:} |
			IF VAR:l THEN expc:e ELSE expo:e2 {:
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,new ExpVar(l));:}; //open

ifThenc ::= IF logExpO:l THEN expc:e ELSE expc:e2 {: 	//changed logExp to logExpO
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);:} |
			IF VAR:l THEN expc:e ELSE expc:e2 {: 	//changed logExp to logExpO
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result, new ExpVar(l));:}; //closed

case ::= CASE LBRACE predList:plst RBRACE {: RESULT = new ExpCase(plst); :};

expSeq ::= LBRACE stmtList:alst RBRACE {: RESULT = alst; :};

mulExp ::= LPAREN multiArgList:alst RPAREN {: RESULT = new MultiValExp(alst); :};

def ::= DEF VAR:v expOrLog:e {: RESULT = new StmtExpDefn(v,e); :};
				
definition ::= VAR:v ASSIGN expOrLog:e {:
		   RESULT = new StmtDefinition(v, e); :} |
		   vectorCall:v ASSIGN expOrLog:e {:
		   RESULT = new StmtDefinition(v, e); :};/*|
			paramList:plst ASSIGN argList:alst {: RESULT = null; :}*/

//mulDef ::= paramList:plst ASSIGN argList:alst {: RESULT = null; :};

print ::= PRINT LPAREN exptop:e RPAREN {: RESULT = new ExpPrint(e,"block"); :}|
		PRINTLN LPAREN exptop:e RPAREN {: RESULT = new ExpPrint(e,"ln"); :};


read ::= READ LPAREN RPAREN {: RESULT = new ExpRead("string"); :}|
		READINT LPAREN RPAREN {:RESULT = new ExpRead("int"); :};

comment ::= LCOM STRING NL{:RESULT = null; :}|
			BCOMS STRING BCOME {:RESULT = null; :};//need to be changed from null

/* End of new keyword functions*/
multiArgList ::= argList:lst COMMA exptop:e {: 
			lst.add(e);
			RESULT = lst;
	:};

argList ::= argList:alst COMMA exptop:e {:
		alst.add(e);
			RESULT = alst; :}|
		exptop:e {:
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result;
			:};


argListE ::= argList:al {:RESULT=al;:} | 
			empty {: 
				ArrayList<Exp> result = new ArrayList<>();
				RESULT = result; 
			:};

funCall ::= VAR:v LPAREN argListE:ae RPAREN {:
			RESULT = new ExpFunCall(v,ae); :};//|
			//LPAREN proc:p RPAREN LPAREN argList:ae RPAREN {: RESULT = null; :}|
			//LPAREN funCall:fc RPAREN LPAREN argList:ae RPAREN {: RESULT = null; :};

bitexp ::= bitexp:b AMP expression:e {:
			RESULT = new ExpBit(b,e,BitwiseOp.AND); :} |
		bitexp:b BAR expression:e {:
			RESULT = new ExpBit(b,e,BitwiseOp.OR); :} |
		expression:e {: RESULT = e; :};

expression ::= 	expression:e PLUS term:t {:
			RESULT = new ExpAdd(e, t); :} |
		expression:e MINUS term:t {:
			RESULT = new ExpSub(e, t); :} |
		term:t {: RESULT = t; :};

term ::= term:t MUL factor:f {:
		RESULT = new ExpMul(t, f); :} |
	 term:t DIV factor:f {:
		RESULT = new ExpDiv(t, f); :} |
	 term:t MOD factor:f {:
		RESULT = new ExpMod(t, f); :} |
	 factor:f {: RESULT = f; :};

factor ::= TILDE atom:a {:
			RESULT = new ExpBit(a,a,BitwiseOp.NOT); :} |
			LPAREN MINUS exptop:e RPAREN {: RESULT =new ExpNegate(e); :} |
		atom:a AT factor:f {: RESULT = new ExpConcat(a,f); :} |
		atom:a POW factor:f {:
			RESULT = new ExpPow(a,f); :}|
		atom:a {: RESULT = a; :};

atom ::= INT:ilit {: RESULT = new ExpLitInt(ilit); :} |
          FLOAT:ilit {:RESULT = new ExpLitDouble(ilit);:}|
          VAR:var {: RESULT = new ExpVar(var); :} |
		  STRING:s {: RESULT = new ExpLitString(s); :} |
		  CHAR:c {: RESULT = new ExpLitChar(c); :}|
	   LPAREN exptop:e RPAREN {: RESULT = e; :}|
	   funCall:fc {: RESULT = fc; :}|
	   case:c {: RESULT = c; :}|
	   let:l {: RESULT = l; :}|
	   read:r {: RESULT = r; :} |
	   builtin:b {: RESULT = b; :} |
	   expSeq:seq {: RESULT =seq; :} |
	   mulExp:mul {: RESULT = mul; :};

empty ::= ;
