
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ArithParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ArithParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ArithParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArithParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\063\003\000\002\063\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\054\003\000\002\054\003\000" +
    "\002\055\004\000\002\055\003\000\002\064\010\000\002" +
    "\064\014\000\002\064\014\000\002\065\006\000\002\065" +
    "\006\000\002\066\010\000\002\066\010\000\002\062\003" +
    "\000\002\062\010\000\002\062\006\000\002\062\006\000" +
    "\002\062\006\000\002\062\003\000\002\062\003\000\002" +
    "\062\012\000\002\020\005\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\025\005\000\002\026\005" +
    "\000\002\026\003\000\002\026\002\000\002\027\006\000" +
    "\002\027\006\000\002\027\006\000\002\030\004\000\002" +
    "\030\003\000\002\031\005\000\002\031\006\000\002\031" +
    "\003\000\002\032\007\000\002\032\005\000\002\036\005" +
    "\000\002\037\005\000\002\037\003\000\002\033\006\000" +
    "\002\033\006\000\002\034\005\000\002\034\007\000\002" +
    "\034\011\000\002\035\010\000\002\035\010\000\002\040" +
    "\007\000\002\013\005\000\002\013\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\016" +
    "\004\000\002\016\004\000\002\016\003\000\002\017\003" +
    "\000\002\017\005\000\002\017\003\000\002\017\006\000" +
    "\002\017\010\000\002\017\010\000\002\011\006\000\002" +
    "\011\010\000\002\011\006\000\002\011\010\000\002\012" +
    "\010\000\002\012\010\000\002\042\006\000\002\043\005" +
    "\000\002\044\005\000\002\041\005\000\002\005\005\000" +
    "\002\005\005\000\002\045\006\000\002\045\006\000\002" +
    "\046\005\000\002\046\005\000\002\047\005\000\002\047" +
    "\005\000\002\024\005\000\002\022\005\000\002\022\003" +
    "\000\002\023\003\000\002\023\003\000\002\007\006\000" +
    "\002\050\005\000\002\050\005\000\002\050\003\000\002" +
    "\051\005\000\002\051\005\000\002\051\003\000\002\056" +
    "\005\000\002\056\005\000\002\056\005\000\002\056\003" +
    "\000\002\057\004\000\002\057\006\000\002\057\005\000" +
    "\002\057\005\000\002\057\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\005\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\061\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\110\004\033\006\113\007\024\010\074\013" +
    "\100\014\010\015\031\016\063\017\037\021\051\022\046" +
    "\023\065\027\020\034\072\036\016\041\111\055\022\061" +
    "\023\062\062\063\101\066\042\067\071\070\061\071\064" +
    "\072\104\073\040\074\103\075\073\076\110\077\056\100" +
    "\030\103\032\104\047\105\102\106\112\001\002\000\014" +
    "\002\ufff6\020\ufff6\024\ufff6\031\ufff6\054\247\001\002\000" +
    "\024\002\uffb2\011\uffb2\020\uffb2\024\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\053\uffb2\054\uffb2\001\002\000\024\002\uffaf\011" +
    "\uffaf\020\uffaf\024\uffaf\030\uffaf\031\uffaf\032\uffaf\053\uffaf" +
    "\054\uffaf\001\002\000\170\002\ufffc\004\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\066" +
    "\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\103" +
    "\ufffc\104\ufffc\105\ufffc\106\ufffc\001\002\000\004\027\u013b" +
    "\001\002\000\034\002\ufff0\011\ufff0\020\ufff0\024\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\040\ufff0\042\ufff0\053\ufff0\054\ufff0" +
    "\101\ufff0\102\ufff0\001\002\000\024\002\uffb7\011\uffb7\020" +
    "\uffb7\024\uffb7\030\uffb7\031\uffb7\032\uffb7\053\234\054\uffb7" +
    "\001\002\000\004\031\u013a\001\002\000\034\002\ufff5\011" +
    "\ufff5\020\ufff5\024\ufff5\030\ufff5\031\ufff5\032\ufff5\040\ufff5" +
    "\042\ufff5\053\ufff5\054\ufff5\101\ufff5\102\ufff5\001\002\000" +
    "\034\002\ufff4\011\ufff4\020\ufff4\024\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\040\ufff4\042\ufff4\053\ufff4\054\ufff4\101\ufff4\102" +
    "\ufff4\001\002\000\110\004\033\006\113\007\024\010\074" +
    "\013\100\014\010\015\031\016\063\017\037\021\051\022" +
    "\046\023\065\027\020\034\072\036\016\041\111\055\022" +
    "\061\023\062\062\063\101\066\042\067\071\070\061\071" +
    "\064\072\104\073\040\074\103\075\073\076\110\077\056" +
    "\100\030\103\032\104\047\105\102\106\112\001\002\000" +
    "\060\002\uffe2\011\uffe2\012\uffe2\020\uffe2\024\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\040\uffe2\042\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2" +
    "\057\uffe2\060\uffe2\101\uffe2\102\uffe2\001\002\000\104\004" +
    "\033\006\113\010\074\013\100\014\010\015\031\021\051" +
    "\022\046\023\065\027\020\034\072\036\016\041\111\045" +
    "\150\055\022\061\023\062\062\063\101\066\042\067\071" +
    "\070\061\071\064\072\104\073\040\074\103\075\073\076" +
    "\110\077\056\100\327\103\032\104\047\105\102\106\112" +
    "\001\002\000\042\002\uffed\011\uffed\012\uffed\020\uffed\024" +
    "\uffed\030\uffed\031\uffed\032\uffed\040\uffed\042\uffed\053\uffed" +
    "\054\uffed\057\u0131\060\u0132\101\uffed\102\uffed\001\002\000" +
    "\070\004\033\006\113\010\074\013\100\014\010\015\031" +
    "\021\051\022\046\023\065\027\130\034\072\036\016\041" +
    "\111\061\023\062\062\063\101\067\071\072\104\073\040" +
    "\074\103\075\073\076\110\077\056\100\u0130\103\032\104" +
    "\047\105\102\001\002\000\050\006\113\013\100\014\010" +
    "\015\031\027\u012e\034\072\036\016\041\111\067\071\072" +
    "\104\073\040\074\103\075\073\076\110\077\056\100\133" +
    "\103\032\104\047\105\102\001\002\000\004\100\u012b\001" +
    "\002\000\006\002\uffff\031\124\001\002\000\060\002\uff82" +
    "\011\uff82\012\uff82\020\uff82\024\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\u0127\040\uff82\042\uff82\044\uff82\045\uff82\046\uff82" +
    "\047\uff82\050\uff82\051\u0128\053\uff82\054\uff82\057\uff82\060" +
    "\uff82\101\uff82\102\uff82\001\002\000\034\002\ufff2\011\ufff2" +
    "\020\ufff2\024\ufff2\030\ufff2\031\ufff2\032\ufff2\040\ufff2\042" +
    "\ufff2\053\ufff2\054\ufff2\101\ufff2\102\ufff2\001\002\000\046" +
    "\002\uff7f\027\134\031\uff7f\033\uff7f\041\135\044\uff7f\045" +
    "\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\u0102\053\227" +
    "\054\231\057\uff7f\060\uff7f\101\uff7f\102\uff7f\001\002\000" +
    "\004\027\u0125\001\002\000\060\002\uff80\011\uff80\012\uff80" +
    "\020\uff80\024\uff80\030\uff80\031\uff80\032\uff80\033\uff80\040" +
    "\uff80\042\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80" +
    "\051\uff80\053\uff80\054\uff80\057\uff80\060\uff80\101\uff80\102" +
    "\uff80\001\002\000\006\027\u0117\100\u0116\001\002\000\060" +
    "\002\uff7a\011\uff7a\012\uff7a\020\uff7a\024\uff7a\030\uff7a\031" +
    "\uff7a\032\uff7a\033\uff7a\040\uff7a\042\uff7a\044\uff7a\045\uff7a" +
    "\046\uff7a\047\uff7a\050\uff7a\051\uff7a\053\uff7a\054\uff7a\057" +
    "\uff7a\060\uff7a\101\uff7a\102\uff7a\001\002\000\034\002\uffef" +
    "\011\uffef\020\uffef\024\uffef\030\uffef\031\uffef\032\uffef\040" +
    "\uffef\042\uffef\053\uffef\054\uffef\101\uffef\102\uffef\001\002" +
    "\000\024\002\uffae\011\uffae\020\uffae\024\uffae\030\uffae\031" +
    "\uffae\032\uffae\053\uffae\054\uffae\001\002\000\004\027\u0113" +
    "\001\002\000\004\027\u0110\001\002\000\060\002\uff76\011" +
    "\uff76\012\uff76\020\uff76\024\uff76\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\040\uff76\042\uff76\044\uff76\045\uff76\046\uff76\047" +
    "\uff76\050\uff76\051\uff76\053\uff76\054\uff76\057\uff76\060\uff76" +
    "\101\uff76\102\uff76\001\002\000\004\027\u010d\001\002\000" +
    "\060\002\uff77\011\uff77\012\uff77\020\uff77\024\uff77\030\uff77" +
    "\031\uff77\032\uff77\033\uff77\040\uff77\042\uff77\044\uff77\045" +
    "\uff77\046\uff77\047\uff77\050\uff77\051\uff77\053\uff77\054\uff77" +
    "\057\uff77\060\uff77\101\uff77\102\uff77\001\002\000\034\002" +
    "\uffee\011\uffee\020\uffee\024\uffee\030\uffee\031\uffee\032\uffee" +
    "\040\uffee\042\uffee\053\uffee\054\uffee\101\uffee\102\uffee\001" +
    "\002\000\034\002\ufff1\011\ufff1\020\ufff1\024\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\040\ufff1\042\ufff1\053\ufff1\054\ufff1\101" +
    "\ufff1\102\ufff1\001\002\000\102\004\033\006\113\010\074" +
    "\013\100\014\010\015\031\021\051\022\046\023\065\027" +
    "\020\034\072\036\016\041\111\055\022\061\023\062\062" +
    "\063\101\066\042\067\071\070\061\071\064\072\104\073" +
    "\040\074\103\075\073\076\110\077\056\100\u0108\103\032" +
    "\104\047\105\102\106\112\001\002\000\060\002\uff7d\011" +
    "\uff7d\012\uff7d\020\uff7d\024\uff7d\030\uff7d\031\uff7d\032\uff7d" +
    "\033\uff7d\040\uff7d\042\uff7d\044\uff7d\045\uff7d\046\uff7d\047" +
    "\uff7d\050\uff7d\051\uff7d\053\uff7d\054\uff7d\057\uff7d\060\uff7d" +
    "\101\uff7d\102\uff7d\001\002\000\060\002\uff78\011\uff78\012" +
    "\uff78\020\uff78\024\uff78\030\uff78\031\uff78\032\uff78\033\uff78" +
    "\040\uff78\042\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050" +
    "\uff78\051\uff78\053\uff78\054\uff78\057\uff78\060\uff78\101\uff78" +
    "\102\uff78\001\002\000\004\100\361\001\002\000\060\002" +
    "\uff75\011\uff75\012\uff75\020\uff75\024\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\040\uff75\042\uff75\044\uff75\045\uff75\046" +
    "\uff75\047\uff75\050\uff75\051\uff75\053\uff75\054\uff75\057\uff75" +
    "\060\uff75\101\uff75\102\uff75\001\002\000\036\002\uffec\011" +
    "\uffec\012\uffec\020\uffec\024\uffec\030\uffec\031\uffec\032\uffec" +
    "\040\uffec\042\uffec\053\uffec\054\uffec\101\uffec\102\uffec\001" +
    "\002\000\112\002\001\004\033\006\113\007\024\010\074" +
    "\013\100\014\010\015\031\016\063\017\037\021\051\022" +
    "\046\023\065\027\020\034\072\036\016\041\111\055\022" +
    "\061\023\062\062\063\101\066\042\067\071\070\061\071" +
    "\064\072\104\073\040\074\103\075\073\076\110\077\056" +
    "\100\030\103\032\104\047\105\102\106\112\001\002\000" +
    "\060\002\uff79\011\uff79\012\uff79\020\uff79\024\uff79\030\uff79" +
    "\031\uff79\032\uff79\033\uff79\040\uff79\042\uff79\044\uff79\045" +
    "\uff79\046\uff79\047\uff79\050\uff79\051\uff79\053\uff79\054\uff79" +
    "\057\uff79\060\uff79\101\uff79\102\uff79\001\002\000\060\002" +
    "\uff81\011\uff81\012\uff81\020\uff81\024\uff81\030\uff81\031\uff81" +
    "\032\uff81\033\uff81\040\uff81\042\uff81\044\uff81\045\uff81\046" +
    "\uff81\047\uff81\050\uff81\051\uff81\053\uff81\054\uff81\057\uff81" +
    "\060\uff81\101\uff81\102\uff81\001\002\000\004\031\357\001" +
    "\002\000\036\002\uffdc\031\uffdc\033\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\355\057\uffdc\060" +
    "\uffdc\101\uffdc\102\uffdc\001\002\000\004\027\350\001\002" +
    "\000\004\105\346\001\002\000\004\027\343\001\002\000" +
    "\004\027\336\001\002\000\102\004\033\006\113\010\074" +
    "\013\100\014\010\015\031\021\051\022\046\023\065\027" +
    "\020\034\072\036\016\041\111\055\022\061\023\062\062" +
    "\063\101\066\042\067\071\070\061\071\064\072\104\073" +
    "\040\074\103\075\073\076\110\077\056\100\327\103\032" +
    "\104\047\105\102\106\112\001\002\000\004\002\325\001" +
    "\002\000\062\002\uffdd\011\uffdd\012\uffdd\020\uffdd\024\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\040\uffdd\041\322\042" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\053\uffdd\054\uffdd\057\uffdd\060\uffdd\101\uffdd\102\uffdd\001" +
    "\002\000\046\002\uff8e\011\uff8e\012\uff8e\020\uff8e\024\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\040\uff8e\042\uff8e\044\316\045" +
    "\317\053\uff8e\054\uff8e\057\uff8e\060\uff8e\101\uff8e\102\uff8e" +
    "\001\002\000\004\027\311\001\002\000\060\002\uffcb\011" +
    "\uffcb\012\uffcb\020\uffcb\024\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\040\uffcb\042\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb\057\uffcb\060\uffcb" +
    "\101\uffcb\102\uffcb\001\002\000\004\027\306\001\002\000" +
    "\102\004\033\006\113\010\074\013\100\014\010\015\031" +
    "\021\051\022\046\023\065\027\020\034\072\036\016\041" +
    "\111\055\022\061\023\062\062\063\101\066\042\067\071" +
    "\070\061\071\064\072\104\073\040\074\103\075\073\076" +
    "\110\077\056\100\271\103\032\104\047\105\102\106\112" +
    "\001\002\000\054\002\uff8b\011\uff8b\012\uff8b\020\uff8b\024" +
    "\uff8b\030\uff8b\031\uff8b\032\uff8b\040\uff8b\042\uff8b\044\uff8b" +
    "\045\uff8b\046\263\047\264\050\262\053\uff8b\054\uff8b\057" +
    "\uff8b\060\uff8b\101\uff8b\102\uff8b\001\002\000\034\002\ufff3" +
    "\011\ufff3\020\ufff3\024\ufff3\030\ufff3\031\ufff3\032\ufff3\040" +
    "\ufff3\042\ufff3\053\ufff3\054\ufff3\101\ufff3\102\ufff3\001\002" +
    "\000\016\002\ufff7\020\ufff7\024\ufff7\031\ufff7\101\255\102" +
    "\254\001\002\000\004\036\220\001\002\000\004\105\216" +
    "\001\002\000\060\002\uff7e\011\uff7e\012\uff7e\020\uff7e\024" +
    "\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\040\uff7e\042\uff7e" +
    "\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\053" +
    "\uff7e\054\uff7e\057\uff7e\060\uff7e\101\uff7e\102\uff7e\001\002" +
    "\000\004\027\213\001\002\000\004\027\210\001\002\000" +
    "\004\031\207\001\002\000\060\002\uff7b\011\uff7b\012\uff7b" +
    "\020\uff7b\024\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\040" +
    "\uff7b\042\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b" +
    "\051\uff7b\053\uff7b\054\uff7b\057\uff7b\060\uff7b\101\uff7b\102" +
    "\uff7b\001\002\000\054\002\uff87\011\uff87\012\uff87\020\uff87" +
    "\024\uff87\030\uff87\031\uff87\032\uff87\040\uff87\042\uff87\044" +
    "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\053\uff87\054\uff87" +
    "\057\uff87\060\uff87\101\uff87\102\uff87\001\002\000\004\027" +
    "\200\001\002\000\074\004\033\006\113\010\074\013\100" +
    "\014\010\015\031\021\051\022\046\023\065\027\130\032" +
    "\164\034\072\036\016\041\111\042\uff74\061\023\062\062" +
    "\063\101\067\071\072\104\073\040\074\103\075\073\076" +
    "\110\077\056\100\133\103\032\104\047\105\102\001\002" +
    "\000\024\002\uffac\011\uffac\020\uffac\024\uffac\030\uffac\031" +
    "\uffac\032\uffac\053\uffac\054\uffac\001\002\000\004\027\114" +
    "\001\002\000\010\030\uffd3\040\uffd3\100\115\001\002\000" +
    "\004\102\127\001\002\000\006\030\121\040\120\001\002" +
    "\000\006\030\uffd4\040\uffd4\001\002\000\004\100\115\001" +
    "\002\000\110\004\033\006\113\007\024\010\074\013\100" +
    "\014\010\015\031\016\063\017\037\021\051\022\046\023" +
    "\065\027\020\034\072\036\016\041\111\055\022\061\023" +
    "\062\062\063\101\066\042\067\071\070\061\071\064\072" +
    "\104\073\040\074\103\075\073\076\110\077\056\100\030" +
    "\103\032\104\047\105\102\106\112\001\002\000\166\002" +
    "\uffbe\004\033\006\113\007\024\010\074\011\uffbe\012\uffbe" +
    "\013\100\014\010\015\031\016\063\017\037\020\uffbe\021" +
    "\051\022\046\023\065\024\uffbe\027\020\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\072\036\016\040\uffbe\041\111\042" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\053\uffbe\054\uffbe\055\022\057\uffbe\060\uffbe\061\023\062" +
    "\062\063\101\066\042\067\071\070\061\071\064\072\104" +
    "\073\040\074\103\075\073\076\110\077\056\100\030\101" +
    "\uffbe\102\uffbe\103\032\104\047\105\102\106\112\001\002" +
    "\000\004\031\124\001\002\000\170\002\ufffa\004\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\044" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\053\ufffa" +
    "\054\ufffa\055\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa" +
    "\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102" +
    "\ufffa\103\ufffa\104\ufffa\105\ufffa\106\ufffa\001\002\000\170" +
    "\002\ufffd\004\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\024\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\053\ufffd\054\ufffd\055\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\066\ufffd\067\ufffd\070\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd" +
    "\100\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\105\ufffd\106" +
    "\ufffd\001\002\000\006\030\uffd5\040\uffd5\001\002\000\070" +
    "\004\033\006\113\010\074\013\100\014\010\015\031\021" +
    "\051\022\046\023\065\027\130\034\072\036\016\041\111" +
    "\061\023\062\062\063\101\067\071\072\104\073\040\074" +
    "\103\075\073\076\110\077\056\100\133\103\032\104\047" +
    "\105\102\001\002\000\072\004\033\006\113\010\074\013" +
    "\100\014\010\015\031\021\051\022\046\023\065\027\130" +
    "\034\072\036\016\041\111\045\150\061\023\062\062\063" +
    "\101\067\071\072\104\073\040\074\103\075\073\076\110" +
    "\077\056\100\133\103\032\104\047\105\102\001\002\000" +
    "\006\030\uffd6\040\uffd6\001\002\000\060\002\uffdc\011\uffdc" +
    "\012\uffdc\020\uffdc\024\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\040\uffdc\042\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\053\uffdc\054\uffdc\057\uffdc\060\uffdc\101" +
    "\uffdc\102\uffdc\001\002\000\064\002\uff7f\011\uff7f\012\uff7f" +
    "\020\uff7f\024\uff7f\027\134\030\uff7f\031\uff7f\032\uff7f\033" +
    "\uff7f\040\uff7f\041\135\042\uff7f\044\uff7f\045\uff7f\046\uff7f" +
    "\047\uff7f\050\uff7f\051\uff7f\053\uff7f\054\uff7f\057\uff7f\060" +
    "\uff7f\101\uff7f\102\uff7f\001\002\000\072\004\033\006\113" +
    "\010\074\013\100\014\010\015\031\021\051\022\046\023" +
    "\065\027\130\030\uff74\034\072\036\016\041\111\061\023" +
    "\062\062\063\101\067\071\072\104\073\040\074\103\075" +
    "\073\076\110\077\056\100\133\103\032\104\047\105\102" +
    "\001\002\000\070\004\033\006\113\010\074\013\100\014" +
    "\010\015\031\021\051\022\046\023\065\027\130\034\072" +
    "\036\016\041\111\061\023\062\062\063\101\067\071\072" +
    "\104\073\040\074\103\075\073\076\110\077\056\100\133" +
    "\103\032\104\047\105\102\001\002\000\004\042\137\001" +
    "\002\000\062\002\uffc4\011\uffc4\012\uffc4\020\uffc4\024\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\040\uffc4\042\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\057\uffc4\060\uffc4\101\uffc4\102\uffc4\001" +
    "\002\000\010\030\uff92\032\uff92\042\uff92\001\002\000\012" +
    "\030\uff93\032\uff93\040\145\042\uff93\001\002\000\010\030" +
    "\uff94\032\uff94\040\uff94\001\002\000\004\030\144\001\002" +
    "\000\060\002\uff91\011\uff91\012\uff91\020\uff91\024\uff91\030" +
    "\uff91\031\uff91\032\uff91\033\uff91\040\uff91\042\uff91\044\uff91" +
    "\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\053\uff91\054" +
    "\uff91\057\uff91\060\uff91\101\uff91\102\uff91\001\002\000\070" +
    "\004\033\006\113\010\074\013\100\014\010\015\031\021" +
    "\051\022\046\023\065\027\130\034\072\036\016\041\111" +
    "\061\023\062\062\063\101\067\071\072\104\073\040\074" +
    "\103\075\073\076\110\077\056\100\133\103\032\104\047" +
    "\105\102\001\002\000\012\030\uff95\032\uff95\040\uff95\042" +
    "\uff95\001\002\000\004\040\157\001\002\000\070\004\033" +
    "\006\113\010\074\013\100\014\010\015\031\021\051\022" +
    "\046\023\065\027\130\034\072\036\016\041\111\061\023" +
    "\062\062\063\101\067\071\072\104\073\040\074\103\075" +
    "\073\076\110\077\056\100\133\103\032\104\047\105\102" +
    "\001\002\000\006\030\154\040\uff94\001\002\000\004\030" +
    "\153\001\002\000\060\002\uffa0\011\uffa0\012\uffa0\020\uffa0" +
    "\024\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\040\uffa0\042" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\053\uffa0\054\uffa0\057\uffa0\060\uffa0\101\uffa0\102\uffa0\001" +
    "\002\000\060\002\uff7c\011\uff7c\012\uff7c\020\uff7c\024\uff7c" +
    "\030\uff7c\031\uff7c\032\uff7c\033\uff7c\040\uff7c\042\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\053\uff7c" +
    "\054\uff7c\057\uff7c\060\uff7c\101\uff7c\102\uff7c\001\002\000" +
    "\004\030\156\001\002\000\054\002\uff85\011\uff85\012\uff85" +
    "\020\uff85\024\uff85\030\uff85\031\uff85\032\uff85\040\uff85\042" +
    "\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\053\uff85" +
    "\054\uff85\057\uff85\060\uff85\101\uff85\102\uff85\001\002\000" +
    "\070\004\033\006\113\010\074\013\100\014\010\015\031" +
    "\021\051\022\046\023\065\027\130\034\072\036\016\041" +
    "\111\061\023\062\062\063\101\067\071\072\104\073\040" +
    "\074\103\075\073\076\110\077\056\100\133\103\032\104" +
    "\047\105\102\001\002\000\006\030\uff96\040\uff95\001\002" +
    "\000\006\040\uffc6\042\uffc6\001\002\000\010\032\172\040" +
    "\uff94\042\uff94\001\002\000\004\042\177\001\002\000\072" +
    "\004\033\006\113\010\074\013\100\014\010\015\031\021" +
    "\051\022\046\023\065\027\130\032\uff74\034\072\036\016" +
    "\041\111\061\023\062\062\063\101\067\071\072\104\073" +
    "\040\074\103\075\073\076\110\077\056\100\133\103\032" +
    "\104\047\105\102\001\002\000\006\040\166\042\167\001" +
    "\002\000\070\004\033\006\113\010\074\013\100\014\010" +
    "\015\031\021\051\022\046\023\065\027\130\034\072\036" +
    "\016\041\111\061\023\062\062\063\101\067\071\072\104" +
    "\073\040\074\103\075\073\076\110\077\056\100\133\103" +
    "\032\104\047\105\102\001\002\000\062\002\uffc9\011\uffc9" +
    "\012\uffc9\020\uffc9\024\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\053\uffc9\054\uffc9\057\uffc9\060" +
    "\uffc9\101\uffc9\102\uffc9\001\002\000\006\040\uffc7\042\uffc7" +
    "\001\002\000\004\032\172\001\002\000\070\004\033\006" +
    "\113\010\074\013\100\014\010\015\031\021\051\022\046" +
    "\023\065\027\130\034\072\036\016\041\111\061\023\062" +
    "\062\063\101\067\071\072\104\073\040\074\103\075\073" +
    "\076\110\077\056\100\133\103\032\104\047\105\102\001" +
    "\002\000\006\040\uffc8\042\uffc8\001\002\000\004\032\175" +
    "\001\002\000\004\042\176\001\002\000\062\002\uffca\011" +
    "\uffca\012\uffca\020\uffca\024\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\040\uffca\041\uffca\042\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\053\uffca\054\uffca\057\uffca" +
    "\060\uffca\101\uffca\102\uffca\001\002\000\060\002\uffcd\011" +
    "\uffcd\012\uffcd\020\uffcd\024\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\040\uffcd\042\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\053\uffcd\054\uffcd\057\uffcd\060\uffcd" +
    "\101\uffcd\102\uffcd\001\002\000\070\004\033\006\113\010" +
    "\074\013\100\014\010\015\031\021\051\022\046\023\065" +
    "\027\130\034\072\036\016\041\111\061\023\062\062\063" +
    "\101\067\071\072\104\073\040\074\103\075\073\076\110" +
    "\077\056\100\133\103\032\104\047\105\102\001\002\000" +
    "\004\040\202\001\002\000\070\004\033\006\113\010\074" +
    "\013\100\014\010\015\031\021\051\022\046\023\065\027" +
    "\130\034\072\036\016\041\111\061\023\062\062\063\101" +
    "\067\071\072\104\073\040\074\103\075\073\076\110\077" +
    "\056\100\133\103\032\104\047\105\102\001\002\000\004" +
    "\040\204\001\002\000\070\004\033\006\113\010\074\013" +
    "\100\014\010\015\031\021\051\022\046\023\065\027\130" +
    "\034\072\036\016\041\111\061\023\062\062\063\101\067" +
    "\071\072\104\073\040\074\103\075\073\076\110\077\056" +
    "\100\133\103\032\104\047\105\102\001\002\000\004\030" +
    "\206\001\002\000\060\002\uffdb\011\uffdb\012\uffdb\020\uffdb" +
    "\024\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\040\uffdb\042" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\053\uffdb\054\uffdb\057\uffdb\060\uffdb\101\uffdb\102\uffdb\001" +
    "\002\000\170\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\053\ufff9\054\ufff9\055\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\066\ufff9\067\ufff9" +
    "\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076" +
    "\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9" +
    "\105\ufff9\106\ufff9\001\002\000\070\004\033\006\113\010" +
    "\074\013\100\014\010\015\031\021\051\022\046\023\065" +
    "\027\130\034\072\036\016\041\111\061\023\062\062\063" +
    "\101\067\071\072\104\073\040\074\103\075\073\076\110" +
    "\077\056\100\133\103\032\104\047\105\102\001\002\000" +
    "\004\030\212\001\002\000\060\002\uffe0\011\uffe0\012\uffe0" +
    "\020\uffe0\024\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\040" +
    "\uffe0\042\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\053\uffe0\054\uffe0\057\uffe0\060\uffe0\101\uffe0\102" +
    "\uffe0\001\002\000\070\004\033\006\113\010\074\013\100" +
    "\014\010\015\031\021\051\022\046\023\065\027\130\034" +
    "\072\036\016\041\111\061\023\062\062\063\101\067\071" +
    "\072\104\073\040\074\103\075\073\076\110\077\056\100" +
    "\133\103\032\104\047\105\102\001\002\000\004\030\215" +
    "\001\002\000\060\002\uffde\011\uffde\012\uffde\020\uffde\024" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\040\uffde\042\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\053" +
    "\uffde\054\uffde\057\uffde\060\uffde\101\uffde\102\uffde\001\002" +
    "\000\004\064\217\001\002\000\034\002\uff97\011\uff97\020" +
    "\uff97\024\uff97\030\uff97\031\uff97\032\uff97\040\uff97\042\uff97" +
    "\053\uff97\054\uff97\101\uff97\102\uff97\001\002\000\104\004" +
    "\033\006\113\010\074\012\224\013\100\014\010\015\031" +
    "\021\051\022\046\023\065\027\020\034\072\036\016\041" +
    "\111\055\022\061\023\062\062\063\101\066\042\067\071" +
    "\070\061\071\064\072\104\073\040\074\103\075\073\076" +
    "\110\077\056\100\226\103\032\104\047\105\102\106\112" +
    "\001\002\000\106\004\033\006\113\010\074\012\224\013" +
    "\100\014\010\015\031\021\051\022\046\023\065\027\020" +
    "\034\072\036\016\037\261\041\111\055\022\061\023\062" +
    "\062\063\101\066\042\067\071\070\061\071\064\072\104" +
    "\073\040\074\103\075\073\076\110\077\056\100\226\103" +
    "\032\104\047\105\102\106\112\001\002\000\006\101\255" +
    "\102\254\001\002\000\006\032\246\054\247\001\002\000" +
    "\004\032\243\001\002\000\106\004\uffce\006\uffce\010\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\021\uffce\022\uffce\023" +
    "\uffce\027\uffce\034\uffce\036\uffce\037\uffce\041\uffce\055\uffce" +
    "\061\uffce\062\uffce\063\uffce\066\uffce\067\uffce\070\uffce\071" +
    "\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077\uffce" +
    "\100\uffce\103\uffce\104\uffce\105\uffce\106\uffce\001\002\000" +
    "\042\027\134\032\230\033\uff7f\041\135\044\uff7f\045\uff7f" +
    "\046\uff7f\047\uff7f\050\uff7f\051\uff7f\053\227\054\231\057" +
    "\uff7f\060\uff7f\101\uff7f\102\uff7f\001\002\000\102\004\033" +
    "\006\113\010\074\013\100\014\010\015\031\021\051\022" +
    "\046\023\065\027\020\034\072\036\016\041\111\055\022" +
    "\061\023\062\062\063\101\066\042\067\071\070\061\071" +
    "\064\072\104\073\040\074\103\075\073\076\110\077\056" +
    "\100\242\103\032\104\047\105\102\106\112\001\002\000" +
    "\070\004\033\006\113\010\074\013\100\014\010\015\031" +
    "\021\051\022\046\023\065\027\130\034\072\036\016\041" +
    "\111\061\023\062\062\063\101\067\071\072\104\073\040" +
    "\074\103\075\073\076\110\077\056\100\133\103\032\104" +
    "\047\105\102\001\002\000\102\004\033\006\113\010\074" +
    "\013\100\014\010\015\031\021\051\022\046\023\065\027" +
    "\020\034\072\036\016\041\111\055\022\061\023\062\062" +
    "\063\101\066\042\067\071\070\061\071\064\072\104\073" +
    "\040\074\103\075\073\076\110\077\056\100\233\103\032" +
    "\104\047\105\102\106\112\001\002\000\024\002\uffb9\011" +
    "\uffb9\020\uffb9\024\uffb9\030\uffb9\031\uffb9\032\uffb9\053\234" +
    "\054\uffb9\001\002\000\056\002\uffb8\011\uffb8\020\uffb8\024" +
    "\uffb8\027\134\030\uffb8\031\uffb8\032\uffb8\033\uff7f\041\135" +
    "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\053" +
    "\227\054\uffb8\057\uff7f\060\uff7f\101\uff7f\102\uff7f\001\002" +
    "\000\102\004\033\006\113\010\074\013\100\014\010\015" +
    "\031\021\051\022\046\023\065\027\020\034\072\036\016" +
    "\041\111\055\022\061\023\062\062\063\101\066\042\067" +
    "\071\070\061\071\064\072\104\073\040\074\103\075\073" +
    "\076\110\077\056\100\236\103\032\104\047\105\102\106" +
    "\112\001\002\000\024\002\uffb6\011\uffb6\020\uffb6\024\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\053\uffb6\054\uffb6\001\002\000" +
    "\056\002\uffb5\011\uffb5\020\uffb5\024\uffb5\027\134\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uff7f\041\135\044\uff7f\045\uff7f\046" +
    "\uff7f\047\uff7f\050\uff7f\051\uff7f\053\uffb5\054\uffb5\057\uff7f" +
    "\060\uff7f\101\uff7f\102\uff7f\001\002\000\004\031\240\001" +
    "\002\000\106\004\uffd1\006\uffd1\010\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\021\uffd1\022\uffd1\023\uffd1\027\uffd1\034" +
    "\uffd1\036\uffd1\037\uffd1\041\uffd1\055\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\103\uffd1" +
    "\104\uffd1\105\uffd1\106\uffd1\001\002\000\024\002\uffb4\011" +
    "\uffb4\020\uffb4\024\uffb4\030\uffb4\031\uffb4\032\uffb4\053\uffb4" +
    "\054\uffb4\001\002\000\056\002\uffb3\011\uffb3\020\uffb3\024" +
    "\uffb3\027\134\030\uffb3\031\uffb3\032\uffb3\033\uff7f\041\135" +
    "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\053" +
    "\uffb3\054\uffb3\057\uff7f\060\uff7f\101\uff7f\102\uff7f\001\002" +
    "\000\070\004\033\006\113\010\074\013\100\014\010\015" +
    "\031\021\051\022\046\023\065\027\130\034\072\036\016" +
    "\041\111\061\023\062\062\063\101\067\071\072\104\073" +
    "\040\074\103\075\073\076\110\077\056\100\133\103\032" +
    "\104\047\105\102\001\002\000\004\031\245\001\002\000" +
    "\106\004\uffd0\006\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\021\uffd0\022\uffd0\023\uffd0\027\uffd0\034\uffd0\036" +
    "\uffd0\037\uffd0\041\uffd0\055\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\103\uffd0\104\uffd0" +
    "\105\uffd0\106\uffd0\001\002\000\070\004\033\006\113\010" +
    "\074\013\100\014\010\015\031\021\051\022\046\023\065" +
    "\027\130\034\072\036\016\041\111\061\023\062\062\063" +
    "\101\067\071\072\104\073\040\074\103\075\073\076\110" +
    "\077\056\100\133\103\032\104\047\105\102\001\002\000" +
    "\102\004\033\006\113\010\074\013\100\014\010\015\031" +
    "\021\051\022\046\023\065\027\020\034\072\036\016\041" +
    "\111\055\022\061\023\062\062\063\101\066\042\067\071" +
    "\070\061\071\064\072\104\073\040\074\103\075\073\076" +
    "\110\077\056\100\251\103\032\104\047\105\102\106\112" +
    "\001\002\000\024\002\uffbb\011\uffbb\020\uffbb\024\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\053\234\054\uffbb\001\002\000\056" +
    "\002\uffba\011\uffba\020\uffba\024\uffba\027\134\030\uffba\031" +
    "\uffba\032\uffba\033\uff7f\041\135\044\uff7f\045\uff7f\046\uff7f" +
    "\047\uff7f\050\uff7f\051\uff7f\053\227\054\uffba\057\uff7f\060" +
    "\uff7f\101\uff7f\102\uff7f\001\002\000\004\031\253\001\002" +
    "\000\106\004\uffd2\006\uffd2\010\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\021\uffd2\022\uffd2\023\uffd2\027\uffd2\034\uffd2" +
    "\036\uffd2\037\uffd2\041\uffd2\055\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\103\uffd2\104" +
    "\uffd2\105\uffd2\106\uffd2\001\002\000\070\004\033\006\113" +
    "\010\074\013\100\014\010\015\031\021\051\022\046\023" +
    "\065\027\130\034\072\036\016\041\111\061\023\062\062" +
    "\063\101\067\071\072\104\073\040\074\103\075\073\076" +
    "\110\077\056\100\133\103\032\104\047\105\102\001\002" +
    "\000\070\004\033\006\113\010\074\013\100\014\010\015" +
    "\031\021\051\022\046\023\065\027\130\034\072\036\016" +
    "\041\111\061\023\062\062\063\101\067\071\072\104\073" +
    "\040\074\103\075\073\076\110\077\056\100\133\103\032" +
    "\104\047\105\102\001\002\000\024\002\uffbd\011\uffbd\020" +
    "\uffbd\024\uffbd\030\uffbd\031\uffbd\032\uffbd\053\uffbd\054\uffbd" +
    "\001\002\000\024\002\uffbc\011\uffbc\020\uffbc\024\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\053\uffbc\054\uffbc\001\002\000\106" +
    "\004\uffcf\006\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\027\uffcf\034\uffcf\036\uffcf" +
    "\037\uffcf\041\uffcf\055\uffcf\061\uffcf\062\uffcf\063\uffcf\066" +
    "\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\077\uffcf\100\uffcf\103\uffcf\104\uffcf\105" +
    "\uffcf\106\uffcf\001\002\000\060\002\uffa2\011\uffa2\012\uffa2" +
    "\020\uffa2\024\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\040" +
    "\uffa2\042\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\053\uffa2\054\uffa2\057\uffa2\060\uffa2\101\uffa2\102" +
    "\uffa2\001\002\000\052\006\113\013\100\014\010\015\031" +
    "\027\130\034\072\036\016\041\111\061\023\067\071\072" +
    "\104\073\040\074\103\075\073\076\110\077\056\100\133" +
    "\103\032\104\047\105\102\001\002\000\052\006\113\013" +
    "\100\014\010\015\031\027\130\034\072\036\016\041\111" +
    "\061\023\067\071\072\104\073\040\074\103\075\073\076" +
    "\110\077\056\100\133\103\032\104\047\105\102\001\002" +
    "\000\052\006\113\013\100\014\010\015\031\027\130\034" +
    "\072\036\016\041\111\061\023\067\071\072\104\073\040" +
    "\074\103\075\073\076\110\077\056\100\133\103\032\104" +
    "\047\105\102\001\002\000\054\002\uff89\011\uff89\012\uff89" +
    "\020\uff89\024\uff89\030\uff89\031\uff89\032\uff89\040\uff89\042" +
    "\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\053\uff89" +
    "\054\uff89\057\uff89\060\uff89\101\uff89\102\uff89\001\002\000" +
    "\054\002\uff8a\011\uff8a\012\uff8a\020\uff8a\024\uff8a\030\uff8a" +
    "\031\uff8a\032\uff8a\040\uff8a\042\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\053\uff8a\054\uff8a\057\uff8a\060\uff8a" +
    "\101\uff8a\102\uff8a\001\002\000\054\002\uff88\011\uff88\012" +
    "\uff88\020\uff88\024\uff88\030\uff88\031\uff88\032\uff88\040\uff88" +
    "\042\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\053" +
    "\uff88\054\uff88\057\uff88\060\uff88\101\uff88\102\uff88\001\002" +
    "\000\006\011\300\054\247\001\002\000\042\011\272\027" +
    "\134\033\uff7f\041\135\044\uff7f\045\uff7f\046\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\053\227\054\231\057\uff7f\060\uff7f\101" +
    "\uff7f\102\uff7f\001\002\000\070\004\033\006\113\010\074" +
    "\013\100\014\010\015\031\021\051\022\046\023\065\027" +
    "\130\034\072\036\016\041\111\061\023\062\062\063\101" +
    "\067\071\072\104\073\040\074\103\075\073\076\110\077" +
    "\056\100\133\103\032\104\047\105\102\001\002\000\034" +
    "\002\uffa6\011\uffa6\020\uffa6\024\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\040\uffa6\042\uffa6\053\uffa6\054\uffa6\101\uffa6\102\uffa6" +
    "\001\002\000\036\002\ufff4\011\ufff4\012\275\020\ufff4\024" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\040\ufff4\042\ufff4\053\ufff4" +
    "\054\ufff4\101\ufff4\102\ufff4\001\002\000\062\006\113\010" +
    "\074\013\100\014\010\015\031\021\051\022\046\023\065" +
    "\027\130\034\072\036\016\041\111\061\023\067\071\072" +
    "\104\073\040\074\103\075\073\076\110\077\056\100\133" +
    "\103\032\104\047\105\102\001\002\000\034\002\uffa5\011" +
    "\uffa5\020\uffa5\024\uffa5\030\uffa5\031\uffa5\032\uffa5\040\uffa5" +
    "\042\uffa5\053\uffa5\054\uffa5\101\uffa5\102\uffa5\001\002\000" +
    "\036\002\uffa3\011\uffa3\012\uffa3\020\uffa3\024\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\040\uffa3\042\uffa3\053\uffa3\054\uffa3\101" +
    "\uffa3\102\uffa3\001\002\000\070\004\033\006\113\010\074" +
    "\013\100\014\010\015\031\021\051\022\046\023\065\027" +
    "\130\034\072\036\016\041\111\061\023\062\062\063\101" +
    "\067\071\072\104\073\040\074\103\075\073\076\110\077" +
    "\056\100\133\103\032\104\047\105\102\001\002\000\034" +
    "\002\uffa8\011\uffa8\020\uffa8\024\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\040\uffa8\042\uffa8\053\uffa8\054\uffa8\101\uffa8\102\uffa8" +
    "\001\002\000\036\002\ufff4\011\ufff4\012\303\020\ufff4\024" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\040\ufff4\042\ufff4\053\ufff4" +
    "\054\ufff4\101\ufff4\102\ufff4\001\002\000\062\006\113\010" +
    "\074\013\100\014\010\015\031\021\051\022\046\023\065" +
    "\027\130\034\072\036\016\041\111\061\023\067\071\072" +
    "\104\073\040\074\103\075\073\076\110\077\056\100\133" +
    "\103\032\104\047\105\102\001\002\000\034\002\uffa7\011" +
    "\uffa7\020\uffa7\024\uffa7\030\uffa7\031\uffa7\032\uffa7\040\uffa7" +
    "\042\uffa7\053\uffa7\054\uffa7\101\uffa7\102\uffa7\001\002\000" +
    "\036\002\uffa4\011\uffa4\012\uffa4\020\uffa4\024\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\040\uffa4\042\uffa4\053\uffa4\054\uffa4\101" +
    "\uffa4\102\uffa4\001\002\000\072\004\033\006\113\010\074" +
    "\013\100\014\010\015\031\021\051\022\046\023\065\027" +
    "\130\030\uff74\034\072\036\016\041\111\061\023\062\062" +
    "\063\101\067\071\072\104\073\040\074\103\075\073\076" +
    "\110\077\056\100\133\103\032\104\047\105\102\001\002" +
    "\000\004\030\310\001\002\000\060\002\uffcc\011\uffcc\012" +
    "\uffcc\020\uffcc\024\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\040\uffcc\042\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\053\uffcc\054\uffcc\057\uffcc\060\uffcc\101\uffcc" +
    "\102\uffcc\001\002\000\070\004\033\006\113\010\074\013" +
    "\100\014\010\015\031\021\051\022\046\023\065\027\130" +
    "\034\072\036\016\041\111\061\023\062\062\063\101\067" +
    "\071\072\104\073\040\074\103\075\073\076\110\077\056" +
    "\100\133\103\032\104\047\105\102\001\002\000\004\040" +
    "\313\001\002\000\070\004\033\006\113\010\074\013\100" +
    "\014\010\015\031\021\051\022\046\023\065\027\130\034" +
    "\072\036\016\041\111\061\023\062\062\063\101\067\071" +
    "\072\104\073\040\074\103\075\073\076\110\077\056\100" +
    "\133\103\032\104\047\105\102\001\002\000\004\030\315" +
    "\001\002\000\060\002\uffe1\011\uffe1\012\uffe1\020\uffe1\024" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\040\uffe1\042\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\053" +
    "\uffe1\054\uffe1\057\uffe1\060\uffe1\101\uffe1\102\uffe1\001\002" +
    "\000\052\006\113\013\100\014\010\015\031\027\130\034" +
    "\072\036\016\041\111\061\023\067\071\072\104\073\040" +
    "\074\103\075\073\076\110\077\056\100\133\103\032\104" +
    "\047\105\102\001\002\000\052\006\113\013\100\014\010" +
    "\015\031\027\130\034\072\036\016\041\111\061\023\067" +
    "\071\072\104\073\040\074\103\075\073\076\110\077\056" +
    "\100\133\103\032\104\047\105\102\001\002\000\054\002" +
    "\uff8c\011\uff8c\012\uff8c\020\uff8c\024\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\040\uff8c\042\uff8c\044\uff8c\045\uff8c\046\263\047" +
    "\264\050\262\053\uff8c\054\uff8c\057\uff8c\060\uff8c\101\uff8c" +
    "\102\uff8c\001\002\000\054\002\uff8d\011\uff8d\012\uff8d\020" +
    "\uff8d\024\uff8d\030\uff8d\031\uff8d\032\uff8d\040\uff8d\042\uff8d" +
    "\044\uff8d\045\uff8d\046\263\047\264\050\262\053\uff8d\054" +
    "\uff8d\057\uff8d\060\uff8d\101\uff8d\102\uff8d\001\002\000\070" +
    "\004\033\006\113\010\074\013\100\014\010\015\031\021" +
    "\051\022\046\023\065\027\130\034\072\036\016\041\111" +
    "\061\023\062\062\063\101\067\071\072\104\073\040\074" +
    "\103\075\073\076\110\077\056\100\133\103\032\104\047" +
    "\105\102\001\002\000\004\042\324\001\002\000\062\002" +
    "\uffc5\011\uffc5\012\uffc5\020\uffc5\024\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\040\uffc5\042\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\057\uffc5\060\uffc5\101\uffc5\102\uffc5\001\002\000\004\002" +
    "\000\001\002\000\004\024\330\001\002\000\052\020\uff7f" +
    "\024\uff7f\027\134\030\uff7f\031\uff7f\033\uff7f\040\uff7f\041" +
    "\135\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f" +
    "\053\227\054\231\057\uff7f\060\uff7f\101\uff7f\102\uff7f\001" +
    "\002\000\004\027\331\001\002\000\102\004\033\006\113" +
    "\010\074\013\100\014\010\015\031\021\051\022\046\023" +
    "\065\027\020\034\072\036\016\041\111\055\022\061\023" +
    "\062\062\063\101\066\042\067\071\070\061\071\064\072" +
    "\104\073\040\074\103\075\073\076\110\077\056\100\333" +
    "\103\032\104\047\105\102\106\112\001\002\000\006\030" +
    "\335\054\247\001\002\000\042\027\134\030\334\033\uff7f" +
    "\041\135\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051" +
    "\uff7f\053\227\054\231\057\uff7f\060\uff7f\101\uff7f\102\uff7f" +
    "\001\002\000\034\002\uffe3\011\uffe3\020\uffe3\024\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\040\uffe3\042\uffe3\053\uffe3\054\uffe3" +
    "\101\uffe3\102\uffe3\001\002\000\034\002\uffe4\011\uffe4\020" +
    "\uffe4\024\uffe4\030\uffe4\031\uffe4\032\uffe4\040\uffe4\042\uffe4" +
    "\053\uffe4\054\uffe4\101\uffe4\102\uffe4\001\002\000\070\004" +
    "\033\006\113\010\074\013\100\014\010\015\031\021\051" +
    "\022\046\023\065\027\130\034\072\036\016\041\111\061" +
    "\023\062\062\063\101\067\071\072\104\073\040\074\103" +
    "\075\073\076\110\077\056\100\133\103\032\104\047\105" +
    "\102\001\002\000\004\040\340\001\002\000\070\004\033" +
    "\006\113\010\074\013\100\014\010\015\031\021\051\022" +
    "\046\023\065\027\130\034\072\036\016\041\111\061\023" +
    "\062\062\063\101\067\071\072\104\073\040\074\103\075" +
    "\073\076\110\077\056\100\133\103\032\104\047\105\102" +
    "\001\002\000\004\030\342\001\002\000\024\002\uffaa\011" +
    "\uffaa\020\uffaa\024\uffaa\030\uffaa\031\uffaa\032\uffaa\053\uffaa" +
    "\054\uffaa\001\002\000\070\004\033\006\113\010\074\013" +
    "\100\014\010\015\031\021\051\022\046\023\065\027\130" +
    "\034\072\036\016\041\111\061\023\062\062\063\101\067" +
    "\071\072\104\073\040\074\103\075\073\076\110\077\056" +
    "\100\133\103\032\104\047\105\102\001\002\000\004\030" +
    "\345\001\002\000\004\031\uff9c\001\002\000\004\065\347" +
    "\001\002\000\034\002\uff98\011\uff98\020\uff98\024\uff98\030" +
    "\uff98\031\uff98\032\uff98\040\uff98\042\uff98\053\uff98\054\uff98" +
    "\101\uff98\102\uff98\001\002\000\070\004\033\006\113\010" +
    "\074\013\100\014\010\015\031\021\051\022\046\023\065" +
    "\027\130\034\072\036\016\041\111\061\023\062\062\063" +
    "\101\067\071\072\104\073\040\074\103\075\073\076\110" +
    "\077\056\100\133\103\032\104\047\105\102\001\002\000" +
    "\004\040\352\001\002\000\070\004\033\006\113\010\074" +
    "\013\100\014\010\015\031\021\051\022\046\023\065\027" +
    "\130\034\072\036\016\041\111\061\023\062\062\063\101" +
    "\067\071\072\104\073\040\074\103\075\073\076\110\077" +
    "\056\100\133\103\032\104\047\105\102\001\002\000\004" +
    "\030\354\001\002\000\024\002\uffa9\011\uffa9\020\uffa9\024" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\053\uffa9\054\uffa9\001\002" +
    "\000\102\004\033\006\113\010\074\013\100\014\010\015" +
    "\031\021\051\022\046\023\065\027\020\034\072\036\016" +
    "\041\111\055\022\061\023\062\062\063\101\066\042\067" +
    "\071\070\061\071\064\072\104\073\040\074\103\075\073" +
    "\076\110\077\056\100\327\103\032\104\047\105\102\106" +
    "\112\001\002\000\006\020\uff9d\031\uff9d\001\002\000\170" +
    "\002\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050" +
    "\ufffb\051\ufffb\053\ufffb\054\ufffb\055\ufffb\057\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\066\ufffb\067\ufffb\070\ufffb\071" +
    "\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb" +
    "\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106" +
    "\ufffb\001\002\000\012\002\ufffe\031\ufff7\101\255\102\254" +
    "\001\002\000\006\052\363\056\362\001\002\000\070\004" +
    "\033\006\113\010\074\013\100\014\010\015\031\021\051" +
    "\022\046\023\065\027\130\034\072\036\016\041\111\061" +
    "\023\062\062\063\101\067\071\072\104\073\040\074\103" +
    "\075\073\076\110\077\056\100\133\103\032\104\047\105" +
    "\102\001\002\000\070\004\033\006\113\010\074\013\100" +
    "\014\010\015\031\021\051\022\046\023\065\027\130\034" +
    "\072\036\016\041\111\061\023\062\062\063\101\067\071" +
    "\072\104\073\040\074\103\075\073\076\110\077\056\100" +
    "\133\103\032\104\047\105\102\001\002\000\004\031\365" +
    "\001\002\000\102\004\033\006\113\010\074\013\100\014" +
    "\010\015\031\021\051\022\046\023\065\027\020\034\072" +
    "\036\016\041\111\055\022\061\023\062\062\063\101\066" +
    "\042\067\071\070\061\071\064\072\104\073\040\074\103" +
    "\075\073\076\110\077\056\100\327\103\032\104\047\105" +
    "\102\106\112\001\002\000\006\031\367\054\247\001\002" +
    "\000\010\007\024\041\375\100\370\001\002\000\006\041" +
    "\135\052\u0102\001\002\000\004\041\322\001\002\000\004" +
    "\020\u0100\001\002\000\004\052\355\001\002\000\004\020" +
    "\376\001\002\000\072\004\033\006\113\010\074\013\100" +
    "\014\010\015\031\021\051\022\046\023\065\027\130\032" +
    "\164\034\072\036\016\041\111\061\023\062\062\063\101" +
    "\067\071\072\104\073\040\074\103\075\073\076\110\077" +
    "\056\100\133\103\032\104\047\105\102\001\002\000\070" +
    "\004\033\006\113\010\074\013\100\014\010\015\031\021" +
    "\051\022\046\023\065\027\130\034\072\036\016\041\111" +
    "\061\023\062\062\063\101\067\071\072\104\073\040\074" +
    "\103\075\073\076\110\077\056\100\133\103\032\104\047" +
    "\105\102\001\002\000\034\002\uffe8\011\uffe8\020\uffe8\024" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\040\uffe8\042\uffe8\053\uffe8" +
    "\054\uffe8\101\uffe8\102\uffe8\001\002\000\070\004\033\006" +
    "\113\010\074\013\100\014\010\015\031\021\051\022\046" +
    "\023\065\027\130\034\072\036\016\041\111\061\023\062" +
    "\062\063\101\067\071\072\104\073\040\074\103\075\073" +
    "\076\110\077\056\100\133\103\032\104\047\105\102\001" +
    "\002\000\034\002\uffe7\011\uffe7\020\uffe7\024\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\040\uffe7\042\uffe7\053\uffe7\054\uffe7\101" +
    "\uffe7\102\uffe7\001\002\000\102\004\033\006\113\010\074" +
    "\013\100\014\010\015\031\021\051\022\046\023\065\027" +
    "\020\034\072\036\016\041\111\055\022\061\023\062\062" +
    "\063\101\066\042\067\071\070\061\071\064\072\104\073" +
    "\040\074\103\075\073\076\110\077\056\100\327\103\032" +
    "\104\047\105\102\106\112\001\002\000\006\020\uff9e\031" +
    "\uff9e\001\002\000\004\020\u0105\001\002\000\070\004\033" +
    "\006\113\010\074\013\100\014\010\015\031\021\051\022" +
    "\046\023\065\027\130\034\072\036\016\041\111\061\023" +
    "\062\062\063\101\067\071\072\104\073\040\074\103\075" +
    "\073\076\110\077\056\100\133\103\032\104\047\105\102" +
    "\001\002\000\034\002\uffe9\011\uffe9\020\uffe9\024\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\040\uffe9\042\uffe9\053\uffe9\054\uffe9" +
    "\101\uffe9\102\uffe9\001\002\000\006\020\u010b\054\247\001" +
    "\002\000\042\020\u0109\027\134\033\uff7f\041\135\044\uff7f" +
    "\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\053\227\054" +
    "\231\057\uff7f\060\uff7f\101\uff7f\102\uff7f\001\002\000\070" +
    "\004\033\006\113\010\074\013\100\014\010\015\031\021" +
    "\051\022\046\023\065\027\130\034\072\036\016\041\111" +
    "\061\023\062\062\063\101\067\071\072\104\073\040\074" +
    "\103\075\073\076\110\077\056\100\133\103\032\104\047" +
    "\105\102\001\002\000\034\002\uffe5\011\uffe5\020\uffe5\024" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\040\uffe5\042\uffe5\053\uffe5" +
    "\054\uffe5\101\uffe5\102\uffe5\001\002\000\070\004\033\006" +
    "\113\010\074\013\100\014\010\015\031\021\051\022\046" +
    "\023\065\027\130\034\072\036\016\041\111\061\023\062" +
    "\062\063\101\067\071\072\104\073\040\074\103\075\073" +
    "\076\110\077\056\100\133\103\032\104\047\105\102\001" +
    "\002\000\034\002\uffe6\011\uffe6\020\uffe6\024\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\040\uffe6\042\uffe6\053\uffe6\054\uffe6\101" +
    "\uffe6\102\uffe6\001\002\000\070\004\033\006\113\010\074" +
    "\013\100\014\010\015\031\021\051\022\046\023\065\027" +
    "\130\034\072\036\016\041\111\061\023\062\062\063\101" +
    "\067\071\072\104\073\040\074\103\075\073\076\110\077" +
    "\056\100\133\103\032\104\047\105\102\001\002\000\004" +
    "\030\u010f\001\002\000\024\002\uffab\011\uffab\020\uffab\024" +
    "\uffab\030\uffab\031\uffab\032\uffab\053\uffab\054\uffab\001\002" +
    "\000\070\004\033\006\113\010\074\013\100\014\010\015" +
    "\031\021\051\022\046\023\065\027\130\034\072\036\016" +
    "\041\111\061\023\062\062\063\101\067\071\072\104\073" +
    "\040\074\103\075\073\076\110\077\056\100\133\103\032" +
    "\104\047\105\102\001\002\000\004\030\u0112\001\002\000" +
    "\060\002\uffdf\011\uffdf\012\uffdf\020\uffdf\024\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\040\uffdf\042\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\054\uffdf" +
    "\057\uffdf\060\uffdf\101\uffdf\102\uffdf\001\002\000\070\004" +
    "\033\006\113\010\074\013\100\014\010\015\031\021\051" +
    "\022\046\023\065\027\130\034\072\036\016\041\111\061" +
    "\023\062\062\063\101\067\071\072\104\073\040\074\103" +
    "\075\073\076\110\077\056\100\133\103\032\104\047\105" +
    "\102\001\002\000\004\030\u0115\001\002\000\004\031\uff9b" +
    "\001\002\000\070\004\033\006\113\010\074\013\100\014" +
    "\010\015\031\021\051\022\046\023\065\027\130\034\072" +
    "\036\016\041\111\061\023\062\062\063\101\067\071\072" +
    "\104\073\040\074\103\075\073\076\110\077\056\100\133" +
    "\103\032\104\047\105\102\001\002\000\006\030\uff74\100" +
    "\u0118\001\002\000\010\030\uffd9\040\uffd9\043\uffd9\001\002" +
    "\000\010\030\uffd8\040\u011e\043\u011f\001\002\000\004\030" +
    "\u011c\001\002\000\004\030\uffd7\001\002\000\070\004\033" +
    "\006\113\010\074\013\100\014\010\015\031\021\051\022" +
    "\046\023\065\027\130\034\072\036\016\041\111\061\023" +
    "\062\062\063\101\067\071\072\104\073\040\074\103\075" +
    "\073\076\110\077\056\100\133\103\032\104\047\105\102" +
    "\001\002\000\034\002\uffc2\011\uffc2\020\uffc2\024\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\040\uffc2\042\uffc2\053\uffc2\054\uffc2" +
    "\101\uffc2\102\uffc2\001\002\000\004\100\u0123\001\002\000" +
    "\004\100\u0120\001\002\000\004\030\u0121\001\002\000\070" +
    "\004\033\006\113\010\074\013\100\014\010\015\031\021" +
    "\051\022\046\023\065\027\130\034\072\036\016\041\111" +
    "\061\023\062\062\063\101\067\071\072\104\073\040\074" +
    "\103\075\073\076\110\077\056\100\133\103\032\104\047" +
    "\105\102\001\002\000\034\002\uffc1\011\uffc1\020\uffc1\024" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\040\uffc1\042\uffc1\053\uffc1" +
    "\054\uffc1\101\uffc1\102\uffc1\001\002\000\010\030\uffda\040" +
    "\uffda\043\uffda\001\002\000\034\002\uffc3\011\uffc3\020\uffc3" +
    "\024\uffc3\030\uffc3\031\uffc3\032\uffc3\040\uffc3\042\uffc3\053" +
    "\uffc3\054\uffc3\101\uffc3\102\uffc3\001\002\000\004\030\u0126" +
    "\001\002\000\060\002\uff99\011\uff99\012\uff99\020\uff99\024" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\040\uff99\042\uff99" +
    "\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\053" +
    "\uff99\054\uff99\057\uff99\060\uff99\101\uff99\102\uff99\001\002" +
    "\000\052\006\113\013\100\014\010\015\031\027\130\034" +
    "\072\036\016\041\111\061\023\067\071\072\104\073\040" +
    "\074\103\075\073\076\110\077\056\100\133\103\032\104" +
    "\047\105\102\001\002\000\052\006\113\013\100\014\010" +
    "\015\031\027\130\034\072\036\016\041\111\061\023\067" +
    "\071\072\104\073\040\074\103\075\073\076\110\077\056" +
    "\100\133\103\032\104\047\105\102\001\002\000\054\002" +
    "\uff83\011\uff83\012\uff83\020\uff83\024\uff83\030\uff83\031\uff83" +
    "\032\uff83\040\uff83\042\uff83\044\uff83\045\uff83\046\uff83\047" +
    "\uff83\050\uff83\053\uff83\054\uff83\057\uff83\060\uff83\101\uff83" +
    "\102\uff83\001\002\000\054\002\uff84\011\uff84\012\uff84\020" +
    "\uff84\024\uff84\030\uff84\031\uff84\032\uff84\040\uff84\042\uff84" +
    "\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\053\uff84\054" +
    "\uff84\057\uff84\060\uff84\101\uff84\102\uff84\001\002\000\102" +
    "\004\033\006\113\010\074\013\100\014\010\015\031\021" +
    "\051\022\046\023\065\027\020\034\072\036\016\041\111" +
    "\055\022\061\023\062\062\063\101\066\042\067\071\070" +
    "\061\071\064\072\104\073\040\074\103\075\073\076\110" +
    "\077\056\100\327\103\032\104\047\105\102\106\112\001" +
    "\002\000\006\020\uff9f\031\uff9f\001\002\000\054\002\uff86" +
    "\011\uff86\012\uff86\020\uff86\024\uff86\030\uff86\031\uff86\032" +
    "\uff86\040\uff86\042\uff86\044\uff86\045\uff86\046\uff86\047\uff86" +
    "\050\uff86\053\uff86\054\uff86\057\uff86\060\uff86\101\uff86\102" +
    "\uff86\001\002\000\070\004\033\006\113\010\074\013\100" +
    "\014\010\015\031\021\051\022\046\023\065\027\130\034" +
    "\072\036\016\041\111\061\023\062\062\063\101\067\071" +
    "\072\104\073\040\074\103\075\073\076\110\077\056\100" +
    "\133\103\032\104\047\105\102\001\002\000\024\002\uffb1" +
    "\011\uffb1\020\uffb1\024\uffb1\030\uffb1\031\uffb1\032\uffb1\053" +
    "\uffb1\054\uffb1\001\002\000\056\002\uffb0\011\uffb0\020\uffb0" +
    "\024\uffb0\027\134\030\uffb0\031\uffb0\032\uffb0\033\uff7f\041" +
    "\135\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f" +
    "\053\uffb0\054\uffb0\057\uff7f\060\uff7f\101\uff7f\102\uff7f\001" +
    "\002\000\052\006\113\013\100\014\010\015\031\027\130" +
    "\034\072\036\016\041\111\061\023\067\071\072\104\073" +
    "\040\074\103\075\073\076\110\077\056\100\133\103\032" +
    "\104\047\105\102\001\002\000\052\006\113\013\100\014" +
    "\010\015\031\027\130\034\072\036\016\041\111\061\023" +
    "\067\071\072\104\073\040\074\103\075\073\076\110\077" +
    "\056\100\133\103\032\104\047\105\102\001\002\000\046" +
    "\002\uff8f\011\uff8f\012\uff8f\020\uff8f\024\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\040\uff8f\042\uff8f\044\316\045\317\053\uff8f" +
    "\054\uff8f\057\uff8f\060\uff8f\101\uff8f\102\uff8f\001\002\000" +
    "\046\002\uff90\011\uff90\012\uff90\020\uff90\024\uff90\030\uff90" +
    "\031\uff90\032\uff90\040\uff90\042\uff90\044\316\045\317\053" +
    "\uff90\054\uff90\057\uff90\060\uff90\101\uff90\102\uff90\001\002" +
    "\000\006\030\u0137\054\247\001\002\000\012\030\154\040" +
    "\uff94\101\255\102\254\001\002\000\024\002\uffad\011\uffad" +
    "\020\uffad\024\uffad\030\uffad\031\uffad\032\uffad\053\uffad\054" +
    "\uffad\001\002\000\112\004\033\006\113\007\024\010\074" +
    "\013\100\014\010\015\031\016\063\017\037\021\051\022" +
    "\046\023\065\027\020\034\072\036\016\037\u0139\041\111" +
    "\055\022\061\023\062\062\063\101\066\042\067\071\070" +
    "\061\071\064\072\104\073\040\074\103\075\073\076\110" +
    "\077\056\100\030\103\032\104\047\105\102\106\112\001" +
    "\002\000\060\002\uffa1\011\uffa1\012\uffa1\020\uffa1\024\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\040\uffa1\042\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\053\uffa1" +
    "\054\uffa1\057\uffa1\060\uffa1\101\uffa1\102\uffa1\001\002\000" +
    "\170\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\053\ufff8\054\ufff8\055\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\063\ufff8\066\ufff8\067\ufff8\070\ufff8" +
    "\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077" +
    "\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\105\ufff8" +
    "\106\ufff8\001\002\000\004\030\u013c\001\002\000\060\002" +
    "\uff9a\011\uff9a\012\uff9a\020\uff9a\024\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\040\uff9a\042\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\053\uff9a\054\uff9a\057\uff9a" +
    "\060\uff9a\101\uff9a\102\uff9a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\114\002\065\003\053\004\006\005\056\007" +
    "\105\011\044\012\052\013\035\014\003\015\011\016\004" +
    "\017\005\031\016\032\066\033\057\034\075\040\054\041" +
    "\104\042\033\043\040\044\051\045\012\046\047\047\026" +
    "\050\020\051\067\052\076\053\013\054\014\056\074\057" +
    "\106\060\025\062\042\063\024\064\010\065\034\066\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\112\003\u0137\004\006\005\056\007\105" +
    "\011\044\012\052\013\035\014\003\015\011\016\004\017" +
    "\005\031\016\032\066\033\057\034\075\040\054\041\104" +
    "\042\033\043\040\044\051\045\012\046\047\047\026\050" +
    "\020\051\067\052\076\053\013\054\014\056\074\057\106" +
    "\060\025\062\042\063\122\064\010\065\034\066\043\001" +
    "\001\000\002\001\001\000\102\007\105\011\044\012\052" +
    "\013\035\014\u0134\015\011\016\004\017\005\022\146\024" +
    "\151\031\016\032\066\033\131\034\075\040\054\042\033" +
    "\043\040\044\051\046\047\047\026\050\020\051\067\052" +
    "\u0135\053\013\054\014\056\074\057\106\060\025\062\042" +
    "\064\010\065\034\066\043\001\001\000\002\001\001\000" +
    "\066\007\105\011\044\012\052\013\u012e\031\016\032\066" +
    "\033\131\034\075\040\054\042\033\043\040\044\051\046" +
    "\047\047\026\050\020\051\067\052\221\053\013\054\014" +
    "\056\074\057\106\060\025\062\042\064\010\065\034\066" +
    "\043\001\001\000\030\007\105\031\016\032\066\033\131" +
    "\040\054\042\033\043\040\044\051\046\047\060\u012c\062" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\007" +
    "\105\011\044\012\052\013\035\014\u0106\015\011\016\004" +
    "\017\005\031\016\032\066\033\131\034\075\040\054\042" +
    "\033\043\040\044\051\046\047\047\026\050\020\051\067" +
    "\052\221\053\013\054\014\056\074\057\106\060\025\062" +
    "\042\064\010\065\034\066\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\110\004\124\005\056\007\105\011\044" +
    "\012\052\013\035\014\003\015\011\016\004\017\005\031" +
    "\016\032\066\033\057\034\075\040\054\041\104\042\033" +
    "\043\040\044\051\045\012\046\047\047\026\050\020\051" +
    "\067\052\357\053\013\054\014\056\074\057\106\060\025" +
    "\062\042\063\122\064\010\065\034\066\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\007\105\011\044\012\052" +
    "\013\035\014\003\015\011\016\004\017\005\031\016\032" +
    "\066\033\131\034\075\040\054\042\033\043\040\044\051" +
    "\046\047\047\026\050\020\051\067\052\076\053\013\054" +
    "\014\056\074\057\106\060\025\062\042\063\325\064\010" +
    "\065\034\066\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\007\105\011\044\012\052\013" +
    "\035\014\267\015\011\016\004\017\005\031\016\032\066" +
    "\033\131\034\075\040\054\042\033\043\040\044\051\046" +
    "\047\047\026\050\020\051\067\052\221\053\013\054\014" +
    "\056\074\057\106\060\025\062\042\064\010\065\034\066" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\007\105\011\044\012\052\022\140\023\162\031\016" +
    "\032\066\033\131\034\075\036\160\037\164\040\054\042" +
    "\033\043\040\044\051\046\047\047\026\050\020\051\067" +
    "\052\161\053\013\054\014\056\074\057\106\060\025\061" +
    "\137\062\042\064\010\065\034\066\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\116\026\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\125\001\001\000\112\003\121\004\006\005" +
    "\056\007\105\011\044\012\052\013\035\014\003\015\011" +
    "\016\004\017\005\031\016\032\066\033\057\034\075\040" +
    "\054\041\104\042\033\043\040\044\051\045\012\046\047" +
    "\047\026\050\020\051\067\052\076\053\013\054\014\056" +
    "\074\057\106\060\025\062\042\063\122\064\010\065\034" +
    "\066\043\001\001\000\110\004\124\005\056\007\105\011" +
    "\044\012\052\013\035\014\003\015\011\016\004\017\005" +
    "\031\016\032\066\033\057\034\075\040\054\041\104\042" +
    "\033\043\040\044\051\045\012\046\047\047\026\050\020" +
    "\051\067\052\076\053\013\054\014\056\074\057\106\060" +
    "\025\062\042\063\122\064\010\065\034\066\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\007\105\011\044\012\052\031\016" +
    "\032\066\033\131\034\075\040\054\042\033\043\040\044" +
    "\051\046\047\047\026\050\020\051\067\052\130\053\013" +
    "\054\014\056\074\057\106\060\025\062\042\064\010\065" +
    "\034\066\043\001\001\000\070\007\105\011\044\012\052" +
    "\022\146\024\151\031\016\032\066\033\131\034\075\040" +
    "\054\042\033\043\040\044\051\046\047\047\026\050\020" +
    "\051\067\052\150\053\013\054\014\056\074\057\106\060" +
    "\025\062\042\064\010\065\034\066\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\007" +
    "\105\011\044\012\052\022\140\023\142\031\016\032\066" +
    "\033\131\034\075\040\054\042\033\043\040\044\051\046" +
    "\047\047\026\050\020\051\067\052\141\053\013\054\014" +
    "\056\074\057\106\060\025\061\137\062\042\064\010\065" +
    "\034\066\043\001\001\000\064\007\105\011\044\012\052" +
    "\031\016\032\066\033\131\034\075\040\054\042\033\043" +
    "\040\044\051\046\047\047\026\050\020\051\067\052\135" +
    "\053\013\054\014\056\074\057\106\060\025\062\042\064" +
    "\010\065\034\066\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\007\105" +
    "\011\044\012\052\031\016\032\066\033\131\034\075\040" +
    "\054\042\033\043\040\044\051\046\047\047\026\050\020" +
    "\051\067\052\145\053\013\054\014\056\074\057\106\060" +
    "\025\062\042\064\010\065\034\066\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\007\105\011\044\012" +
    "\052\031\016\032\066\033\131\034\075\040\054\042\033" +
    "\043\040\044\051\046\047\047\026\050\020\051\067\052" +
    "\154\053\013\054\014\056\074\057\106\060\025\062\042" +
    "\064\010\065\034\066\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\007\105\011\044\012" +
    "\052\031\016\032\066\033\131\034\075\040\054\042\033" +
    "\043\040\044\051\046\047\047\026\050\020\051\067\052" +
    "\157\053\013\054\014\056\074\057\106\060\025\062\042" +
    "\064\010\065\034\066\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\007\105\011\044\012\052\022\140\023\173\031\016\032" +
    "\066\033\131\034\075\040\054\042\033\043\040\044\051" +
    "\046\047\047\026\050\020\051\067\052\141\053\013\054" +
    "\014\056\074\057\106\060\025\061\137\062\042\064\010" +
    "\065\034\066\043\001\001\000\002\001\001\000\066\007" +
    "\105\011\044\012\052\031\016\032\066\033\131\034\075" +
    "\036\167\040\054\042\033\043\040\044\051\046\047\047" +
    "\026\050\020\051\067\052\170\053\013\054\014\056\074" +
    "\057\106\060\025\062\042\064\010\065\034\066\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\007\105\011\044\012\052\031\016\032\066\033" +
    "\131\034\075\040\054\042\033\043\040\044\051\046\047" +
    "\047\026\050\020\051\067\052\172\053\013\054\014\056" +
    "\074\057\106\060\025\062\042\064\010\065\034\066\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\007\105" +
    "\011\044\012\052\031\016\032\066\033\131\034\075\040" +
    "\054\042\033\043\040\044\051\046\047\047\026\050\020" +
    "\051\067\052\200\053\013\054\014\056\074\057\106\060" +
    "\025\062\042\064\010\065\034\066\043\001\001\000\002" +
    "\001\001\000\064\007\105\011\044\012\052\031\016\032" +
    "\066\033\131\034\075\040\054\042\033\043\040\044\051" +
    "\046\047\047\026\050\020\051\067\052\202\053\013\054" +
    "\014\056\074\057\106\060\025\062\042\064\010\065\034" +
    "\066\043\001\001\000\002\001\001\000\064\007\105\011" +
    "\044\012\052\031\016\032\066\033\131\034\075\040\054" +
    "\042\033\043\040\044\051\046\047\047\026\050\020\051" +
    "\067\052\204\053\013\054\014\056\074\057\106\060\025" +
    "\062\042\064\010\065\034\066\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\007\105" +
    "\011\044\012\052\031\016\032\066\033\131\034\075\040" +
    "\054\042\033\043\040\044\051\046\047\047\026\050\020" +
    "\051\067\052\210\053\013\054\014\056\074\057\106\060" +
    "\025\062\042\064\010\065\034\066\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\007\105\011\044\012" +
    "\052\031\016\032\066\033\131\034\075\040\054\042\033" +
    "\043\040\044\051\046\047\047\026\050\020\051\067\052" +
    "\213\053\013\054\014\056\074\057\106\060\025\062\042" +
    "\064\010\065\034\066\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\007\105\011\044\012\052\013\035\014\222\015\011\016" +
    "\004\017\005\027\224\030\220\031\016\032\066\033\131" +
    "\034\075\040\054\042\033\043\040\044\051\046\047\047" +
    "\026\050\020\051\067\052\221\053\013\054\014\056\074" +
    "\057\106\060\025\062\042\064\010\065\034\066\043\001" +
    "\001\000\100\007\105\011\044\012\052\013\035\014\222" +
    "\015\011\016\004\017\005\027\257\031\016\032\066\033" +
    "\131\034\075\040\054\042\033\043\040\044\051\046\047" +
    "\047\026\050\020\051\067\052\221\053\013\054\014\056" +
    "\074\057\106\060\025\062\042\064\010\065\034\066\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\007\105" +
    "\011\044\012\052\013\035\016\240\017\005\031\016\032" +
    "\066\033\131\034\075\040\054\042\033\043\040\044\051" +
    "\046\047\047\026\050\020\051\067\052\221\053\013\054" +
    "\014\056\074\057\106\060\025\062\042\064\010\065\034" +
    "\066\043\001\001\000\064\007\105\011\044\012\052\031" +
    "\016\032\066\033\131\034\075\040\054\042\033\043\040" +
    "\044\051\046\047\047\026\050\020\051\067\052\236\053" +
    "\013\054\014\056\074\057\106\060\025\062\042\064\010" +
    "\065\034\066\043\001\001\000\074\007\105\011\044\012" +
    "\052\013\035\015\231\016\004\017\005\031\016\032\066" +
    "\033\131\034\075\040\054\042\033\043\040\044\051\046" +
    "\047\047\026\050\020\051\067\052\221\053\013\054\014" +
    "\056\074\057\106\060\025\062\042\064\010\065\034\066" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\007\105\011\044\012\052\013\035\016\234\017\005\031" +
    "\016\032\066\033\131\034\075\040\054\042\033\043\040" +
    "\044\051\046\047\047\026\050\020\051\067\052\221\053" +
    "\013\054\014\056\074\057\106\060\025\062\042\064\010" +
    "\065\034\066\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\007\105\011\044\012\052\031" +
    "\016\032\066\033\131\034\075\040\054\042\033\043\040" +
    "\044\051\046\047\047\026\050\020\051\067\052\243\053" +
    "\013\054\014\056\074\057\106\060\025\062\042\064\010" +
    "\065\034\066\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\007\105\011\044\012\052\031\016\032\066" +
    "\033\131\034\075\040\054\042\033\043\040\044\051\046" +
    "\047\047\026\050\020\051\067\052\251\053\013\054\014" +
    "\056\074\057\106\060\025\062\042\064\010\065\034\066" +
    "\043\001\001\000\074\007\105\011\044\012\052\013\035" +
    "\015\247\016\004\017\005\031\016\032\066\033\131\034" +
    "\075\040\054\042\033\043\040\044\051\046\047\047\026" +
    "\050\020\051\067\052\221\053\013\054\014\056\074\057" +
    "\106\060\025\062\042\064\010\065\034\066\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\007\105\011\044\012\052\031\016" +
    "\032\066\033\131\034\075\040\054\042\033\043\040\044" +
    "\051\046\047\047\026\050\020\051\067\052\256\053\013" +
    "\054\014\056\074\057\106\060\025\062\042\064\010\065" +
    "\034\066\043\001\001\000\064\007\105\011\044\012\052" +
    "\031\016\032\066\033\131\034\075\040\054\042\033\043" +
    "\040\044\051\046\047\047\026\050\020\051\067\052\255" +
    "\053\013\054\014\056\074\057\106\060\025\062\042\064" +
    "\010\065\034\066\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\007" +
    "\105\031\016\032\066\033\131\040\054\042\033\043\040" +
    "\044\051\046\047\057\266\060\025\062\042\001\001\000" +
    "\032\007\105\031\016\032\066\033\131\040\054\042\033" +
    "\043\040\044\051\046\047\057\265\060\025\062\042\001" +
    "\001\000\032\007\105\031\016\032\066\033\131\040\054" +
    "\042\033\043\040\044\051\046\047\057\264\060\025\062" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\007" +
    "\105\011\044\012\052\031\016\032\066\033\131\034\075" +
    "\040\054\042\033\043\040\044\051\046\047\047\026\050" +
    "\020\051\067\052\272\053\013\054\273\056\074\057\106" +
    "\060\025\062\042\064\010\065\034\066\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\007\105\011\044" +
    "\012\052\031\016\032\066\033\131\040\054\042\033\043" +
    "\040\044\051\046\047\050\020\051\067\053\275\054\276" +
    "\056\074\057\106\060\025\062\042\064\010\065\034\066" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\007\105\011\044\012\052\031\016\032\066\033\131\034" +
    "\075\040\054\042\033\043\040\044\051\046\047\047\026" +
    "\050\020\051\067\052\300\053\013\054\301\056\074\057" +
    "\106\060\025\062\042\064\010\065\034\066\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\007\105\011" +
    "\044\012\052\031\016\032\066\033\131\040\054\042\033" +
    "\043\040\044\051\046\047\050\020\051\067\053\303\054" +
    "\304\056\074\057\106\060\025\062\042\064\010\065\034" +
    "\066\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\007\105\011\044\012\052\022\140\023\306\031\016" +
    "\032\066\033\131\034\075\040\054\042\033\043\040\044" +
    "\051\046\047\047\026\050\020\051\067\052\141\053\013" +
    "\054\014\056\074\057\106\060\025\061\137\062\042\064" +
    "\010\065\034\066\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\007\105\011\044\012\052\031\016\032" +
    "\066\033\131\034\075\040\054\042\033\043\040\044\051" +
    "\046\047\047\026\050\020\051\067\052\311\053\013\054" +
    "\014\056\074\057\106\060\025\062\042\064\010\065\034" +
    "\066\043\001\001\000\002\001\001\000\064\007\105\011" +
    "\044\012\052\031\016\032\066\033\131\034\075\040\054" +
    "\042\033\043\040\044\051\046\047\047\026\050\020\051" +
    "\067\052\313\053\013\054\014\056\074\057\106\060\025" +
    "\062\042\064\010\065\034\066\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\105\031\016\032\066" +
    "\033\131\040\054\042\033\043\040\044\051\046\047\056" +
    "\320\057\106\060\025\062\042\001\001\000\034\007\105" +
    "\031\016\032\066\033\131\040\054\042\033\043\040\044" +
    "\051\046\047\056\317\057\106\060\025\062\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\007\105\011" +
    "\044\012\052\031\016\032\066\033\131\034\075\040\054" +
    "\042\033\043\040\044\051\046\047\047\026\050\020\051" +
    "\067\052\322\053\013\054\014\056\074\057\106\060\025" +
    "\062\042\064\010\065\034\066\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\007\105\011" +
    "\044\012\052\013\035\014\331\015\011\016\004\017\005" +
    "\031\016\032\066\033\131\034\075\040\054\042\033\043" +
    "\040\044\051\046\047\047\026\050\020\051\067\052\221" +
    "\053\013\054\014\056\074\057\106\060\025\062\042\064" +
    "\010\065\034\066\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\007" +
    "\105\011\044\012\052\031\016\032\066\033\131\034\075" +
    "\040\054\042\033\043\040\044\051\046\047\047\026\050" +
    "\020\051\067\052\336\053\013\054\014\056\074\057\106" +
    "\060\025\062\042\064\010\065\034\066\043\001\001\000" +
    "\002\001\001\000\064\007\105\011\044\012\052\031\016" +
    "\032\066\033\131\034\075\040\054\042\033\043\040\044" +
    "\051\046\047\047\026\050\020\051\067\052\340\053\013" +
    "\054\014\056\074\057\106\060\025\062\042\064\010\065" +
    "\034\066\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\007\105\011\044\012\052\031\016\032\066\033" +
    "\131\034\075\040\054\042\033\043\040\044\051\046\047" +
    "\047\026\050\020\051\067\052\343\053\013\054\014\056" +
    "\074\057\106\060\025\062\042\064\010\065\034\066\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\007\105\011\044\012\052" +
    "\031\016\032\066\033\131\034\075\040\054\042\033\043" +
    "\040\044\051\046\047\047\026\050\020\051\067\052\350" +
    "\053\013\054\014\056\074\057\106\060\025\062\042\064" +
    "\010\065\034\066\043\001\001\000\002\001\001\000\064" +
    "\007\105\011\044\012\052\031\016\032\066\033\131\034" +
    "\075\040\054\042\033\043\040\044\051\046\047\047\026" +
    "\050\020\051\067\052\352\053\013\054\014\056\074\057" +
    "\106\060\025\062\042\064\010\065\034\066\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\007\105\011" +
    "\044\012\052\013\035\014\003\015\011\016\004\017\005" +
    "\031\016\032\066\033\131\034\075\040\054\042\033\043" +
    "\040\044\051\046\047\047\026\050\020\051\067\052\076" +
    "\053\013\054\014\056\074\057\106\060\025\062\042\063" +
    "\355\064\010\065\034\066\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\007\105\011\044\012\052\031\016\032\066\033\131" +
    "\034\075\040\054\042\033\043\040\044\051\046\047\047" +
    "\026\050\020\051\067\052\u0103\053\013\054\014\056\074" +
    "\057\106\060\025\062\042\064\010\065\034\066\043\001" +
    "\001\000\064\007\105\011\044\012\052\031\016\032\066" +
    "\033\131\034\075\040\054\042\033\043\040\044\051\046" +
    "\047\047\026\050\020\051\067\052\363\053\013\054\014" +
    "\056\074\057\106\060\025\062\042\064\010\065\034\066" +
    "\043\001\001\000\002\001\001\000\076\007\105\011\044" +
    "\012\052\013\035\014\365\015\011\016\004\017\005\031" +
    "\016\032\066\033\131\034\075\040\054\042\033\043\040" +
    "\044\051\046\047\047\026\050\020\051\067\052\221\053" +
    "\013\054\014\056\074\057\106\060\025\062\042\064\010" +
    "\065\034\066\043\001\001\000\002\001\001\000\012\005" +
    "\371\032\370\033\372\041\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\007\105\011\044\012\052\031\016" +
    "\032\066\033\131\034\075\036\160\037\164\040\054\042" +
    "\033\043\040\044\051\046\047\047\026\050\020\051\067" +
    "\052\170\053\013\054\014\056\074\057\106\060\025\062" +
    "\042\064\010\065\034\066\043\001\001\000\064\007\105" +
    "\011\044\012\052\031\016\032\066\033\131\034\075\040" +
    "\054\042\033\043\040\044\051\046\047\047\026\050\020" +
    "\051\067\052\376\053\013\054\014\056\074\057\106\060" +
    "\025\062\042\064\010\065\034\066\043\001\001\000\002" +
    "\001\001\000\064\007\105\011\044\012\052\031\016\032" +
    "\066\033\131\034\075\040\054\042\033\043\040\044\051" +
    "\046\047\047\026\050\020\051\067\052\u0100\053\013\054" +
    "\014\056\074\057\106\060\025\062\042\064\010\065\034" +
    "\066\043\001\001\000\002\001\001\000\100\007\105\011" +
    "\044\012\052\013\035\014\003\015\011\016\004\017\005" +
    "\031\016\032\066\033\131\034\075\040\054\042\033\043" +
    "\040\044\051\046\047\047\026\050\020\051\067\052\076" +
    "\053\013\054\014\056\074\057\106\060\025\062\042\063" +
    "\u0102\064\010\065\034\066\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\007\105\011\044\012\052\031" +
    "\016\032\066\033\131\034\075\040\054\042\033\043\040" +
    "\044\051\046\047\047\026\050\020\051\067\052\u0105\053" +
    "\013\054\014\056\074\057\106\060\025\062\042\064\010" +
    "\065\034\066\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\007\105\011\044\012\052" +
    "\031\016\032\066\033\131\034\075\040\054\042\033\043" +
    "\040\044\051\046\047\047\026\050\020\051\067\052\u0109" +
    "\053\013\054\014\056\074\057\106\060\025\062\042\064" +
    "\010\065\034\066\043\001\001\000\002\001\001\000\064" +
    "\007\105\011\044\012\052\031\016\032\066\033\131\034" +
    "\075\040\054\042\033\043\040\044\051\046\047\047\026" +
    "\050\020\051\067\052\u010b\053\013\054\014\056\074\057" +
    "\106\060\025\062\042\064\010\065\034\066\043\001\001" +
    "\000\002\001\001\000\064\007\105\011\044\012\052\031" +
    "\016\032\066\033\131\034\075\040\054\042\033\043\040" +
    "\044\051\046\047\047\026\050\020\051\067\052\u010d\053" +
    "\013\054\014\056\074\057\106\060\025\062\042\064\010" +
    "\065\034\066\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\007\105\011\044\012\052\031\016\032\066" +
    "\033\131\034\075\040\054\042\033\043\040\044\051\046" +
    "\047\047\026\050\020\051\067\052\u0110\053\013\054\014" +
    "\056\074\057\106\060\025\062\042\064\010\065\034\066" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\007\105\011\044\012\052\031\016\032\066\033\131\034" +
    "\075\040\054\042\033\043\040\044\051\046\047\047\026" +
    "\050\020\051\067\052\u0113\053\013\054\014\056\074\057" +
    "\106\060\025\062\042\064\010\065\034\066\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\007\105\011" +
    "\044\012\052\031\016\032\066\033\131\034\075\040\054" +
    "\042\033\043\040\044\051\046\047\047\026\050\020\051" +
    "\067\052\u0123\053\013\054\014\056\074\057\106\060\025" +
    "\062\042\064\010\065\034\066\043\001\001\000\010\020" +
    "\u0118\021\u0119\061\u011a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\007" +
    "\105\011\044\012\052\031\016\032\066\033\131\034\075" +
    "\040\054\042\033\043\040\044\051\046\047\047\026\050" +
    "\020\051\067\052\u011c\053\013\054\014\056\074\057\106" +
    "\060\025\062\042\064\010\065\034\066\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\007\105\011\044\012\052\031\016\032" +
    "\066\033\131\034\075\040\054\042\033\043\040\044\051" +
    "\046\047\047\026\050\020\051\067\052\u0121\053\013\054" +
    "\014\056\074\057\106\060\025\062\042\064\010\065\034" +
    "\066\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\105\031\016\032\066\033\131\040\054\042\033\043" +
    "\040\044\051\046\047\057\u0129\060\025\062\042\001\001" +
    "\000\032\007\105\031\016\032\066\033\131\040\054\042" +
    "\033\043\040\044\051\046\047\057\u0128\060\025\062\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\100\007" +
    "\105\011\044\012\052\013\035\014\003\015\011\016\004" +
    "\017\005\031\016\032\066\033\131\034\075\040\054\042" +
    "\033\043\040\044\051\046\047\047\026\050\020\051\067" +
    "\052\076\053\013\054\014\056\074\057\106\060\025\062" +
    "\042\063\u012b\064\010\065\034\066\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\007\105\011\044\012" +
    "\052\022\146\024\151\031\016\032\066\033\131\034\075" +
    "\040\054\042\033\043\040\044\051\046\047\047\026\050" +
    "\020\051\067\052\150\053\013\054\014\056\074\057\106" +
    "\060\025\062\042\064\010\065\034\066\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\007\105\031\016" +
    "\032\066\033\131\040\054\042\033\043\040\044\051\046" +
    "\047\051\u0133\056\074\057\106\060\025\062\042\001\001" +
    "\000\036\007\105\031\016\032\066\033\131\040\054\042" +
    "\033\043\040\044\051\046\047\051\u0132\056\074\057\106" +
    "\060\025\062\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\110\004\124\005\056\007\105\011\044\012\052\013" +
    "\035\014\003\015\011\016\004\017\005\031\016\032\066" +
    "\033\057\034\075\040\054\041\104\042\033\043\040\044" +
    "\051\045\012\046\047\047\026\050\020\051\067\052\076" +
    "\053\013\054\014\056\074\057\106\060\025\062\042\063" +
    "\122\064\010\065\034\066\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArithParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArithParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArithParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ArithParser$actions {
  private final ArithParser parser;

  /** Constructor */
  CUP$ArithParser$actions(ArithParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action_part00000000(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArithParser$result;

      /* select the action based on the action number */
      switch (CUP$ArithParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = start_val;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArithParser$parser.done_parsing();
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= expOrLog 
            {
              ArithProgram RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
				Statement s = new Statement(e);
				StmtSequence ss = new StmtSequence(s);
				RESULT = new ArithProgram(ss); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= stmtList exptop 
            {
              ArithProgram RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
				Statement s = new Statement(e);
				lst.add(s);
				RESULT = new ArithProgram(lst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expOrLog SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= def SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtExpDefn d = (StmtExpDefn)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= print SEMI 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new Statement(p); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expOrLog ::= exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expOrLog",49, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expOrLog ::= logExpO 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expOrLog",49, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exptop ::= expo 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",40, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exptop ::= expc 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",40, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exptop ::= proc 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",40, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exptop ::= comment 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",40, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expo ::= ifTheno 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expo",41, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expo ::= foro 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expo",41, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expo ::= whileo 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expo",41, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expo ::= repeato 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expo",41, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expc ::= bitexp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expc",42, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expc ::= ifThenc 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expc",42, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // explist ::= explist exptop 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			lst.add(e);
			RESULT = lst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("explist",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // explist ::= exptop 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("explist",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // foro ::= FOR VAR IN exptop DO exptop 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp iter = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpForIn(v, iter, body);
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("foro",50, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // foro ::= FOR VAR ASSIGN exptop SEMI logExpO SEMI def DO exptop 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		StmtExpDefn inc = (StmtExpDefn)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpFor(new StmtDefinition(v, init), cond, inc, body);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("foro",50, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-9)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // foro ::= FOR VAR ASSIGN exptop SEMI logExpO SEMI definition DO exptop 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		StmtDefinition inc = (StmtDefinition)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpFor(new StmtDefinition(v, init), cond, inc, body);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("foro",50, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-9)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // whileo ::= WHILE logExpO DO exptop 
            {
              Exp RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				RESULT = new ExpWhile(cond,body);
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("whileo",51, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // whileo ::= WHILE VAR DO exptop 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				RESULT = new ExpWhile(new ExpVar(v),body);
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("whileo",51, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // repeato ::= REPEAT expOrLog UNTIL LPAREN logExpO RPAREN 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		
				RESULT = new ExpRepeat(cond, body);
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("repeato",52, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // repeato ::= REPEAT expOrLog UNTIL LPAREN VAR RPAREN 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		
				RESULT = new ExpRepeat(new ExpVar(v), body);
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("repeato",52, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // builtin ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // builtin ::= PAIR LPAREN exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPair(e1, e2); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // builtin ::= CAR LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCar(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // builtin ::= CDR LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCdr(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // builtin ::= SIZE LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpGetSize(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // builtin ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpVector v = (ExpVector)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // builtin ::= vectorCall 
            {
              Exp RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpVecCall vc = (ExpVecCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = vc; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // builtin ::= SUBSTR LPAREN exptop COMMA exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpSubstr(e1, e2, e3); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		plst.add(v);
			RESULT = plst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<String> result = new ArrayList<>();
				result.add(v);
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT=pl; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 
					ArrayList<String> result = new ArrayList<>();
					RESULT = result; 
				
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bind ::= VAR EQUAL exptop 
            {
              ExpBind RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpBind(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bind",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bindList ::= bindList COMMA bind 
            {
              ArrayList<ExpBind> RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<ExpBind> blst = (ArrayList<ExpBind>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpBind b = (ExpBind)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 blst.add(b);
			RESULT = blst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bindList ::= bind 
            {
              ArrayList<ExpBind> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpBind b = (ExpBind)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<ExpBind> result = new ArrayList<>();
				result.add(b); //changed from arraylist <string> to arraylist<expbind>
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bindList ::= 
            {
              ArrayList<ExpBind> RESULT =null;
		 ArrayList<ExpBind> result = new ArrayList<>();
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // pred ::= logExpO COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(l,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // pred ::= VAR COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(new ExpVar(l),e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pred ::= ELSE COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // predList ::= predList pred 
            {
              ArrayList<ExpCClause> RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<ExpCClause> plst = (ArrayList<ExpCClause>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpCClause p = (ExpCClause)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 plst.add(p);
			RESULT = plst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("predList",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // predList ::= pred 
            {
              ArrayList<ExpCClause> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpCClause p = (ExpCClause)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<ExpCClause> result = new ArrayList<>();
				result.add(p);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("predList",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list ::= LBRACKET argListE RBRACKET 
            {
              ExpList RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpList(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("list",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list ::= LIST LPAREN argListE RPAREN 
            {
              ExpList RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpList(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("list",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list ::= ELIST 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("list",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vector ::= LBRACKET COLON argListE COLON RBRACKET 
            {
              ExpVector RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		 RESULT = new ExpVector(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vector",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vector ::= LBRACKET sizeList RBRACKET 
            {
              ExpVector RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> slst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vector",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // size ::= exptop COLON exptop 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpSize(e1,e2); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("size",28, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sizeList ::= sizeList COMMA size 
            {
              ArrayList<Exp> RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> slst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 slst.add(s);
			RESULT = slst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("sizeList",29, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sizeList ::= size 
            {
              ArrayList<Exp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<Exp> result = new ArrayList<>();
				result.add(s);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("sizeList",29, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vectorCall ::= vector LBRACKET exptop RBRACKET 
            {
              ExpVecCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		ExpVector v = (ExpVector)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpVecCall(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vectorCall",25, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // vectorCall ::= VAR LBRACKET exptop RBRACKET 
            {
              ExpVecCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 
					RESULT = new ExpVecCall(new ExpVar(v),e); 
				
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vectorCall",25, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // proc ::= PROC VAR exptop 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			ArrayList<String> arr = new ArrayList<>();
			arr.add(v);
			RESULT = new ExpProcedure(arr,body, ProcForm.VARARG); 
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // proc ::= PROC LPAREN paramListE RPAREN exptop 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			RESULT = new ExpProcedure(plst,e, ProcForm.FORMAL); 
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // proc ::= PROC LPAREN paramList DOT VAR RPAREN exptop 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			plst.add(v);
			RESULT = new ExpProcedure(plst,body, ProcForm.MIXED); 
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // call ::= CALL LPAREN VAR COMMA list RPAREN 
            {
              ExpCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ExpList lst = (ExpList)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT=new ExpCall(new ExpVar(v),lst);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("call",27, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // call ::= CALL LPAREN VAR COMMA VAR RPAREN 
            {
              ExpCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String lst = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT=new ExpCall(new ExpVar(v),new ExpVar(lst));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("call",27, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // let ::= LET LPAREN bindList RPAREN stmtList 
            {
              Exp RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<ExpBind> blst = (ArrayList<ExpBind>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLet(blst,body); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("let",30, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logExp ::= exptop COMPARISON exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				RESULT = new ExpCompare(e,e2,c);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExp",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logExp ::= exptop EQUAL exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				RESULT = new ExpCompare(e,e2,c);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExp",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logExpO ::= logExpO OR logExpA 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1,e2,"OR"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logExpO ::= logExpO OR VAR 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1, new ExpVar(e2),"OR"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logExpO ::= VAR OR logExpA 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(new ExpVar(e1),e2,"OR"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logExpO ::= VAR OR VAR 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(new ExpVar(e1), new ExpVar(e2), "OR"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logExpO ::= logExpA 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logExpA ::= logExpA AND logExpN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1,e2,"AND"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logExpA ::= logExpA AND VAR 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1,new ExpVar(e2),"AND"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logExpA ::= VAR AND logExpN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(new ExpVar(e1), e2, "AND"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logExpA ::= VAR AND VAR 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(new ExpVar(e1), new ExpVar(e2), "AND"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // logExpA ::= logExpN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // logExpN ::= NOT logExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e,e,"NOT"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpN",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // logExpN ::= NOT VAR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(new ExpVar(v), new ExpVar(v), "NOT"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpN",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // logExpN ::= logFactor 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpN",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // logFactor ::= logExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // logFactor ::= LPAREN logExpO RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // logFactor ::= BOOLLIT 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitBool(b);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // logFactor ::= ISPAIR LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpIsPair(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // logFactor ::= ISEQ LPAREN exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpIsEq(e1, e2);  
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // logFactor ::= ISEQV LPAREN exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpIsEqv(e1, e2); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ifTheno ::= IF logExpO THEN exptop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
						//changed logExp to logExpO
			ArrayList<Exp> result = new ArrayList<>(); 
				result.add(e);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ifTheno ::= IF logExpO THEN expc ELSE expo 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ifTheno ::= IF VAR THEN exptop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
						//changed logExp to logExpO
			ArrayList<Exp> result = new ArrayList<>(); 
				result.add(e);
				RESULT = new ExpIfThen(result,new ExpVar(l));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ifTheno ::= IF VAR THEN expc ELSE expo 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,new ExpVar(l));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ifThenc ::= IF logExpO THEN expc ELSE expc 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 	//changed logExp to logExpO
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifThenc",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ifThenc ::= IF VAR THEN expc ELSE expc 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 	//changed logExp to logExpO
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result, new ExpVar(l));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifThenc",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case ::= CASE LBRACE predList RBRACE 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<ExpCClause> plst = (ArrayList<ExpCClause>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCase(plst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("case",32, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expSeq ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence alst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = alst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expSeq",33, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // mulExp ::= LPAREN multiArgList RPAREN 
            {
              Exp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new MultiValExp(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("mulExp",34, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // def ::= DEF VAR expOrLog 
            {
              StmtExpDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new StmtExpDefn(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("def",31, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // definition ::= VAR ASSIGN expOrLog 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // definition ::= vectorCall ASSIGN expOrLog 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ExpVecCall v = (ExpVecCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // print ::= PRINT LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPrint(e,"block"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("print",35, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // print ::= PRINTLN LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPrint(e,"ln"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("print",35, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // read ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead("string"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("read",36, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // read ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		RESULT = new ExpRead("int"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("read",36, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // comment ::= LCOM STRING NL 
            {
              Exp RESULT =null;
		RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comment",37, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // comment ::= BCOMS STRING BCOME 
            {
              Exp RESULT =null;
		RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comment",37, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // multiArgList ::= argList COMMA exptop 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			lst.add(e);
			RESULT = lst;
	
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("multiArgList",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // argList ::= argList COMMA exptop 
            {
              ArrayList<Exp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		alst.add(e);
			RESULT = alst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // argList ::= exptop 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // argListE ::= argList 
            {
              ArrayList<Exp> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT=al;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",17, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // argListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 
				ArrayList<Exp> result = new ArrayList<>();
				RESULT = result; 
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",17, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // funCall ::= VAR LPAREN argListE RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> ae = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		
			RESULT = new ExpFunCall(v,ae); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funCall",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bitexp ::= bitexp AMP expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(b,e,BitwiseOp.AND); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bitexp ::= bitexp BAR expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(b,e,BitwiseOp.OR); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // bitexp ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // factor ::= TILDE atom 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(a,a,BitwiseOp.NOT); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // factor ::= LPAREN MINUS exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT =new ExpNegate(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // factor ::= atom AT factor 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpConcat(a,f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // factor ::= atom POW factor 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpPow(a,f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // factor ::= atom 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = a; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // atom ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitInt(ilit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // atom ::= FLOAT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpLitDouble(ilit);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // atom ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // atom ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitString(s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // atom ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitChar(c); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // atom ::= LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // atom ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // atom ::= case 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // atom ::= let 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // atom ::= read 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = r; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // atom ::= builtin 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = b; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // atom ::= expSeq 
            {
              Exp RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp seq = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT =seq; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // atom ::= mulExp 
            {
              Exp RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp mul = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = mul; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // empty ::= 
            {
              Object RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("empty",47, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ArithParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
              return CUP$ArithParser$do_action_part00000000(
                               CUP$ArithParser$act_num,
                               CUP$ArithParser$parser,
                               CUP$ArithParser$stack,
                               CUP$ArithParser$top);
    }
}

}
