
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ArithParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ArithParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ArithParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArithParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\063\003\000\002\063\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\055\004\000\002\055\003\000\002\062\003\000" +
    "\002\062\010\000\002\062\006\000\002\062\006\000\002" +
    "\062\006\000\002\062\003\000\002\062\003\000\002\062" +
    "\012\000\002\020\005\000\002\020\003\000\002\021\003" +
    "\000\002\021\003\000\002\025\005\000\002\026\005\000" +
    "\002\026\003\000\002\026\002\000\002\027\006\000\002" +
    "\027\006\000\002\027\006\000\002\030\004\000\002\030" +
    "\003\000\002\031\005\000\002\031\006\000\002\031\003" +
    "\000\002\032\007\000\002\032\005\000\002\036\005\000" +
    "\002\037\005\000\002\037\003\000\002\033\006\000\002" +
    "\033\006\000\002\034\005\000\002\034\007\000\002\034" +
    "\011\000\002\035\010\000\002\035\010\000\002\040\007" +
    "\000\002\013\005\000\002\013\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\003\000\002\016\004" +
    "\000\002\016\004\000\002\016\003\000\002\017\003\000" +
    "\002\017\005\000\002\017\003\000\002\017\006\000\002" +
    "\017\010\000\002\017\010\000\002\011\006\000\002\011" +
    "\010\000\002\011\006\000\002\011\010\000\002\012\010" +
    "\000\002\012\010\000\002\042\006\000\002\043\005\000" +
    "\002\044\005\000\002\041\005\000\002\005\005\000\002" +
    "\005\005\000\002\045\006\000\002\045\006\000\002\046" +
    "\005\000\002\046\005\000\002\047\005\000\002\047\005" +
    "\000\002\024\005\000\002\022\005\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\007\006\000\002" +
    "\050\005\000\002\050\005\000\002\050\003\000\002\051" +
    "\005\000\002\051\005\000\002\051\003\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\003\000" +
    "\002\057\004\000\002\057\006\000\002\057\005\000\002" +
    "\057\005\000\002\057\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\005\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\061\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\102\004\073\006\065\007\074\010\044\013" +
    "\016\014\060\015\014\016\102\017\023\020\021\025\077" +
    "\027\057\032\010\046\027\051\025\052\070\053\026\056" +
    "\054\057\055\060\061\061\104\062\017\063\020\064\050" +
    "\065\062\066\063\067\022\070\100\073\064\074\013\075" +
    "\072\076\004\001\002\000\020\002\uffb6\011\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\044\uffb6\045\uffb6\001\002\000\004\002" +
    "\u0115\001\002\000\054\002\uff8c\011\uff8c\012\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\024\u0111\031\uff8c\033\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\u0112\044\uff8c\045\uff8c" +
    "\047\uff8c\050\uff8c\071\uff8c\072\uff8c\001\002\000\056\002" +
    "\uffe7\011\uffe7\012\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\031\uffe7\032\u010e\033\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7" +
    "\071\uffe7\072\uffe7\001\002\000\066\004\073\006\065\010" +
    "\044\013\016\014\060\015\014\020\107\023\u0102\025\077" +
    "\027\057\032\010\033\uff7e\051\025\052\070\053\026\057" +
    "\055\062\017\063\020\064\050\065\062\066\063\067\022" +
    "\070\112\073\064\074\013\075\072\001\002\000\104\002" +
    "\001\004\073\006\065\007\074\010\044\013\016\014\060" +
    "\015\014\016\102\017\023\020\021\025\077\027\057\032" +
    "\010\046\027\051\025\052\070\053\026\056\054\057\055" +
    "\060\061\061\104\062\017\063\020\064\050\065\062\066" +
    "\063\067\022\070\100\073\064\074\013\075\072\076\004" +
    "\001\002\000\006\002\uffff\022\223\001\002\000\054\002" +
    "\uff87\011\uff87\012\uff87\021\uff87\022\uff87\023\uff87\024\uff87" +
    "\031\uff87\033\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041" +
    "\uff87\042\uff87\044\uff87\045\uff87\047\uff87\050\uff87\071\uff87" +
    "\072\uff87\001\002\000\004\020\374\001\002\000\004\022" +
    "\373\001\002\000\004\027\352\001\002\000\004\020\347" +
    "\001\002\000\004\020\344\001\002\000\076\004\073\006" +
    "\065\010\044\013\016\014\060\015\014\020\021\025\077" +
    "\027\057\032\010\036\132\046\027\051\025\052\070\053" +
    "\026\056\054\057\055\060\061\061\104\062\017\063\020" +
    "\064\050\065\062\066\063\067\022\070\152\073\064\074" +
    "\013\075\072\076\004\001\002\000\054\002\uff8b\011\uff8b" +
    "\012\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\031\uff8b\033" +
    "\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\044\uff8b\045\uff8b\047\uff8b\050\uff8b\071\uff8b\072\uff8b\001" +
    "\002\000\004\020\336\001\002\000\054\002\uff7f\011\uff7f" +
    "\012\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\031\uff7f\033" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\044\uff7f\045\uff7f\047\uff7f\050\uff7f\071\uff7f\072\uff7f\001" +
    "\002\000\050\006\065\013\016\014\060\015\014\020\335" +
    "\025\077\027\057\032\010\057\055\062\017\063\020\064" +
    "\050\065\062\066\063\067\022\070\112\073\064\074\013" +
    "\075\072\001\002\000\004\075\332\001\002\000\062\004" +
    "\073\006\065\010\044\013\016\014\060\015\014\020\107" +
    "\025\077\027\057\032\010\051\025\052\070\053\026\057" +
    "\055\062\017\063\020\064\050\065\062\066\063\067\022" +
    "\070\331\073\064\074\013\075\072\001\002\000\020\002" +
    "\uffb8\011\uffb8\021\uffb8\022\uffb8\023\uffb8\044\uffb8\045\uffb8" +
    "\001\002\000\054\002\uff83\011\uff83\012\uff83\021\uff83\022" +
    "\uff83\023\uff83\024\uff83\031\uff83\033\uff83\035\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\044\uff83\045\uff83\047" +
    "\uff83\050\uff83\071\uff83\072\uff83\001\002\000\020\002\uffb9" +
    "\011\uffb9\021\uffb9\022\uffb9\023\uffb9\044\uffb9\045\uffb9\001" +
    "\002\000\004\022\327\001\002\000\054\002\uff81\011\uff81" +
    "\012\uff81\021\uff81\022\uff81\023\uff81\024\uff81\031\uff81\033" +
    "\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81" +
    "\044\uff81\045\uff81\047\uff81\050\uff81\071\uff81\072\uff81\001" +
    "\002\000\054\002\uff82\011\uff82\012\uff82\021\uff82\022\uff82" +
    "\023\uff82\024\uff82\031\uff82\033\uff82\035\uff82\036\uff82\037" +
    "\uff82\040\uff82\041\uff82\042\uff82\044\uff82\045\uff82\047\uff82" +
    "\050\uff82\071\uff82\072\uff82\001\002\000\054\002\uff85\011" +
    "\uff85\012\uff85\021\uff85\022\uff85\023\uff85\024\uff85\031\uff85" +
    "\033\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042" +
    "\uff85\044\uff85\045\uff85\047\uff85\050\uff85\071\uff85\072\uff85" +
    "\001\002\000\036\002\ufff0\011\ufff0\012\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\031\ufff0\033\ufff0\044\ufff0\045\ufff0\047\323" +
    "\050\324\071\ufff0\072\ufff0\001\002\000\054\002\uffec\011" +
    "\uffec\012\uffec\021\uffec\022\uffec\023\uffec\024\uffec\031\uffec" +
    "\033\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\044\uffec\045\uffec\047\uffec\050\uffec\071\uffec\072\uffec" +
    "\001\002\000\010\002\ufff6\022\ufff6\045\313\001\002\000" +
    "\012\002\ufff7\022\ufff7\071\162\072\161\001\002\000\020" +
    "\002\uffbc\011\uffbc\021\uffbc\022\uffbc\023\uffbc\044\uffbc\045" +
    "\uffbc\001\002\000\074\004\073\006\065\010\044\013\016" +
    "\014\060\015\014\020\021\025\077\027\057\032\010\046" +
    "\027\051\025\052\070\053\026\056\054\057\055\060\061" +
    "\061\104\062\017\063\020\064\050\065\062\066\063\067" +
    "\022\070\303\073\064\074\013\075\072\076\004\001\002" +
    "\000\042\002\uff98\011\uff98\012\uff98\021\uff98\022\uff98\023" +
    "\uff98\031\uff98\033\uff98\035\276\036\277\044\uff98\045\uff98" +
    "\047\uff98\050\uff98\071\uff98\072\uff98\001\002\000\054\002" +
    "\uff80\011\uff80\012\uff80\021\uff80\022\uff80\023\uff80\024\uff80" +
    "\031\uff80\033\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041" +
    "\uff80\042\uff80\044\uff80\045\uff80\047\uff80\050\uff80\071\uff80" +
    "\072\uff80\001\002\000\030\002\ufff3\011\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\031\ufff3\033\ufff3\044\ufff3\045\ufff3\071\ufff3" +
    "\072\ufff3\001\002\000\004\020\273\001\002\000\036\002" +
    "\uffe6\022\uffe6\024\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\271\047\uffe6\050\uffe6\071\uffe6\072" +
    "\uffe6\001\002\000\050\002\uff95\011\uff95\012\uff95\021\uff95" +
    "\022\uff95\023\uff95\031\uff95\033\uff95\035\uff95\036\uff95\037" +
    "\264\040\265\041\263\044\uff95\045\uff95\047\uff95\050\uff95" +
    "\071\uff95\072\uff95\001\002\000\020\002\uffc1\011\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\044\156\045\uffc1\001\002\000\004" +
    "\020\260\001\002\000\004\020\253\001\002\000\030\002" +
    "\ufff2\011\ufff2\021\ufff2\022\ufff2\023\ufff2\031\ufff2\033\ufff2" +
    "\044\ufff2\045\ufff2\071\ufff2\072\ufff2\001\002\000\102\004" +
    "\073\006\065\007\074\010\044\013\016\014\060\015\014" +
    "\016\102\017\023\020\021\025\077\027\057\032\010\046" +
    "\027\051\025\052\070\053\026\056\054\057\055\060\061" +
    "\061\104\062\017\063\020\064\050\065\062\066\063\067" +
    "\022\070\100\073\064\074\013\075\072\076\004\001\002" +
    "\000\004\020\247\001\002\000\004\020\242\001\002\000" +
    "\004\020\237\001\002\000\004\020\230\001\002\000\054" +
    "\002\uff8a\011\uff8a\012\uff8a\021\uff8a\022\uff8a\023\uff8a\024" +
    "\uff8a\031\uff8a\033\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\044\uff8a\045\uff8a\047\uff8a\050\uff8a\071" +
    "\uff8a\072\uff8a\001\002\000\004\020\213\001\002\000\054" +
    "\002\uff84\011\uff84\012\uff84\021\uff84\022\uff84\023\uff84\024" +
    "\uff84\031\uff84\033\uff84\035\uff84\036\uff84\037\uff84\040\uff84" +
    "\041\uff84\042\uff84\044\uff84\045\uff84\047\uff84\050\uff84\071" +
    "\uff84\072\uff84\001\002\000\030\002\ufff1\011\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\031\ufff1\033\ufff1\044\ufff1\045\ufff1\071" +
    "\ufff1\072\ufff1\001\002\000\004\075\211\001\002\000\030" +
    "\002\ufff5\011\ufff5\021\ufff5\022\ufff5\023\ufff5\031\ufff5\033" +
    "\ufff5\044\ufff5\045\ufff5\071\ufff5\072\ufff5\001\002\000\054" +
    "\002\uff88\011\uff88\012\uff88\021\uff88\022\uff88\023\uff88\024" +
    "\uff88\031\uff88\033\uff88\035\uff88\036\uff88\037\uff88\040\uff88" +
    "\041\uff88\042\uff88\044\uff88\045\uff88\047\uff88\050\uff88\071" +
    "\uff88\072\uff88\001\002\000\006\020\173\070\172\001\002" +
    "\000\004\070\170\001\002\000\004\022\167\001\002\000" +
    "\050\002\uff91\011\uff91\012\uff91\021\uff91\022\uff91\023\uff91" +
    "\031\uff91\033\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041" +
    "\uff91\044\uff91\045\uff91\047\uff91\050\uff91\071\uff91\072\uff91" +
    "\001\002\000\054\002\uffd5\011\uffd5\012\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\031\uffd5\033\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\047" +
    "\uffd5\050\uffd5\071\uffd5\072\uffd5\001\002\000\046\002\uff89" +
    "\020\113\022\uff89\024\uff89\032\114\035\uff89\036\uff89\037" +
    "\uff89\040\uff89\041\uff89\042\uff89\043\150\044\146\045\147" +
    "\047\uff89\050\uff89\071\uff89\072\uff89\001\002\000\032\002" +
    "\uffef\011\uffef\012\uffef\021\uffef\022\uffef\023\uffef\031\uffef" +
    "\033\uffef\044\uffef\045\uffef\071\uffef\072\uffef\001\002\000" +
    "\004\020\143\001\002\000\030\002\ufff4\011\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\031\ufff4\033\ufff4\044\ufff4\045\ufff4\071" +
    "\ufff4\072\ufff4\001\002\000\004\020\106\001\002\000\156" +
    "\002\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\044\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\056\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\001\002\000\062\004\073\006\065\010" +
    "\044\013\016\014\060\015\014\020\107\025\077\027\057" +
    "\032\010\051\025\052\070\053\026\057\055\062\017\063" +
    "\020\064\050\065\062\066\063\067\022\070\112\073\064" +
    "\074\013\075\072\001\002\000\064\004\073\006\065\010" +
    "\044\013\016\014\060\015\014\020\107\025\077\027\057" +
    "\032\010\036\132\051\025\052\070\053\026\057\055\062" +
    "\017\063\020\064\050\065\062\066\063\067\022\070\112" +
    "\073\064\074\013\075\072\001\002\000\004\031\126\001" +
    "\002\000\054\002\uffe6\011\uffe6\012\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\031\uffe6\033\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6\045\uffe6\047\uffe6" +
    "\050\uffe6\071\uffe6\072\uffe6\001\002\000\060\002\uff89\011" +
    "\uff89\012\uff89\020\113\021\uff89\022\uff89\023\uff89\024\uff89" +
    "\031\uff89\032\114\033\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\044\uff89\045\uff89\047\uff89\050\uff89" +
    "\071\uff89\072\uff89\001\002\000\064\004\073\006\065\010" +
    "\044\013\016\014\060\015\014\020\107\021\uff7e\025\077" +
    "\027\057\032\010\051\025\052\070\053\026\057\055\062" +
    "\017\063\020\064\050\065\062\066\063\067\022\070\112" +
    "\073\064\074\013\075\072\001\002\000\062\004\073\006" +
    "\065\010\044\013\016\014\060\015\014\020\107\025\077" +
    "\027\057\032\010\051\025\052\070\053\026\057\055\062" +
    "\017\063\020\064\050\065\062\066\063\067\022\070\112" +
    "\073\064\074\013\075\072\001\002\000\004\033\116\001" +
    "\002\000\056\002\uffce\011\uffce\012\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\031\uffce\033\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\047\uffce\050\uffce\071\uffce\072\uffce\001\002\000\010\021" +
    "\uff9c\023\uff9c\033\uff9c\001\002\000\012\021\uff9d\023\uff9d" +
    "\031\124\033\uff9d\001\002\000\010\021\uff9e\023\uff9e\031" +
    "\uff9e\001\002\000\004\021\123\001\002\000\054\002\uff9b" +
    "\011\uff9b\012\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\031" +
    "\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\044\uff9b\045\uff9b\047\uff9b\050\uff9b\071\uff9b\072" +
    "\uff9b\001\002\000\062\004\073\006\065\010\044\013\016" +
    "\014\060\015\014\020\107\025\077\027\057\032\010\051" +
    "\025\052\070\053\026\057\055\062\017\063\020\064\050" +
    "\065\062\066\063\067\022\070\112\073\064\074\013\075" +
    "\072\001\002\000\012\021\uff9f\023\uff9f\031\uff9f\033\uff9f" +
    "\001\002\000\062\004\073\006\065\010\044\013\016\014" +
    "\060\015\014\020\107\025\077\027\057\032\010\051\025" +
    "\052\070\053\026\057\055\062\017\063\020\064\050\065" +
    "\062\066\063\067\022\070\112\073\064\074\013\075\072" +
    "\001\002\000\004\021\130\001\002\000\020\002\uffb4\011" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\044\uffb4\045\uffb4\001\002" +
    "\000\004\031\141\001\002\000\062\004\073\006\065\010" +
    "\044\013\016\014\060\015\014\020\107\025\077\027\057" +
    "\032\010\051\025\052\070\053\026\057\055\062\017\063" +
    "\020\064\050\065\062\066\063\067\022\070\112\073\064" +
    "\074\013\075\072\001\002\000\006\021\136\031\uff9e\001" +
    "\002\000\004\021\135\001\002\000\054\002\uffaa\011\uffaa" +
    "\012\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\031\uffaa\033" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\044\uffaa\045\uffaa\047\uffaa\050\uffaa\071\uffaa\072\uffaa\001" +
    "\002\000\054\002\uff86\011\uff86\012\uff86\021\uff86\022\uff86" +
    "\023\uff86\024\uff86\031\uff86\033\uff86\035\uff86\036\uff86\037" +
    "\uff86\040\uff86\041\uff86\042\uff86\044\uff86\045\uff86\047\uff86" +
    "\050\uff86\071\uff86\072\uff86\001\002\000\004\021\140\001" +
    "\002\000\050\002\uff8f\011\uff8f\012\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\031\uff8f\033\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\044\uff8f\045\uff8f\047\uff8f\050\uff8f\071\uff8f" +
    "\072\uff8f\001\002\000\062\004\073\006\065\010\044\013" +
    "\016\014\060\015\014\020\107\025\077\027\057\032\010" +
    "\051\025\052\070\053\026\057\055\062\017\063\020\064" +
    "\050\065\062\066\063\067\022\070\112\073\064\074\013" +
    "\075\072\001\002\000\006\021\uffa0\031\uff9f\001\002\000" +
    "\062\004\073\006\065\010\044\013\016\014\060\015\014" +
    "\020\107\025\077\027\057\032\010\051\025\052\070\053" +
    "\026\057\055\062\017\063\020\064\050\065\062\066\063" +
    "\067\022\070\112\073\064\074\013\075\072\001\002\000" +
    "\004\021\145\001\002\000\004\022\uffa6\001\002\000\074" +
    "\004\073\006\065\010\044\013\016\014\060\015\014\020" +
    "\021\025\077\027\057\032\010\046\027\051\025\052\070" +
    "\053\026\056\054\057\055\060\061\061\104\062\017\063" +
    "\020\064\050\065\062\066\063\067\022\070\166\073\064" +
    "\074\013\075\072\076\004\001\002\000\074\004\073\006" +
    "\065\010\044\013\016\014\060\015\014\020\021\025\077" +
    "\027\057\032\010\046\027\051\025\052\070\053\026\056" +
    "\054\057\055\060\061\061\104\062\017\063\020\064\050" +
    "\065\062\066\063\067\022\070\155\073\064\074\013\075" +
    "\072\076\004\001\002\000\074\004\073\006\065\010\044" +
    "\013\016\014\060\015\014\020\021\025\077\027\057\032" +
    "\010\046\027\051\025\052\070\053\026\056\054\057\055" +
    "\060\061\061\104\062\017\063\020\064\050\065\062\066" +
    "\063\067\022\070\152\073\064\074\013\075\072\076\004" +
    "\001\002\000\004\022\uffa8\001\002\000\046\020\113\021" +
    "\uff89\022\uff89\024\uff89\031\uff89\032\114\035\uff89\036\uff89" +
    "\037\uff89\040\uff89\041\uff89\042\uff89\044\146\045\147\047" +
    "\uff89\050\uff89\071\uff89\072\uff89\001\002\000\006\071\162" +
    "\072\161\001\002\000\020\002\uffc3\011\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\044\156\045\uffc3\001\002\000\052\002\uffc2" +
    "\011\uffc2\020\113\021\uffc2\022\uffc2\023\uffc2\024\uff89\032" +
    "\114\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\044\146\045\uffc2\047\uff89\050\uff89\071\uff89\072\uff89\001" +
    "\002\000\074\004\073\006\065\010\044\013\016\014\060" +
    "\015\014\020\021\025\077\027\057\032\010\046\027\051" +
    "\025\052\070\053\026\056\054\057\055\060\061\061\104" +
    "\062\017\063\020\064\050\065\062\066\063\067\022\070" +
    "\160\073\064\074\013\075\072\076\004\001\002\000\020" +
    "\002\uffc0\011\uffc0\021\uffc0\022\uffc0\023\uffc0\044\uffc0\045" +
    "\uffc0\001\002\000\052\002\uffbf\011\uffbf\020\113\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uff89\032\114\035\uff89\036\uff89\037" +
    "\uff89\040\uff89\041\uff89\042\uff89\044\uffbf\045\uffbf\047\uff89" +
    "\050\uff89\071\uff89\072\uff89\001\002\000\062\004\073\006" +
    "\065\010\044\013\016\014\060\015\014\020\107\025\077" +
    "\027\057\032\010\051\025\052\070\053\026\057\055\062" +
    "\017\063\020\064\050\065\062\066\063\067\022\070\112" +
    "\073\064\074\013\075\072\001\002\000\062\004\073\006" +
    "\065\010\044\013\016\014\060\015\014\020\107\025\077" +
    "\027\057\032\010\051\025\052\070\053\026\057\055\062" +
    "\017\063\020\064\050\065\062\066\063\067\022\070\112" +
    "\073\064\074\013\075\072\001\002\000\020\002\uffc7\011" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\044\uffc7\045\uffc7\001\002" +
    "\000\020\002\uffc6\011\uffc6\021\uffc6\022\uffc6\023\uffc6\044" +
    "\uffc6\045\uffc6\001\002\000\020\002\uffbe\011\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\044\uffbe\045\uffbe\001\002\000\052\002" +
    "\uffbd\011\uffbd\020\113\021\uffbd\022\uffbd\023\uffbd\024\uff89" +
    "\032\114\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\044\uffbd\045\uffbd\047\uff89\050\uff89\071\uff89\072\uff89" +
    "\001\002\000\156\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064" +
    "\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\076\ufff8\001\002\000\074\004" +
    "\073\006\065\010\044\013\016\014\060\015\014\020\021" +
    "\025\077\027\057\032\010\046\027\051\025\052\070\053" +
    "\026\056\054\057\055\060\061\061\104\062\017\063\020" +
    "\064\050\065\062\066\063\067\022\070\152\073\064\074" +
    "\013\075\072\076\004\001\002\000\004\022\uffa9\001\002" +
    "\000\062\004\073\006\065\010\044\013\016\014\060\015" +
    "\014\020\107\025\077\027\057\032\010\051\025\052\070" +
    "\053\026\057\055\062\017\063\020\064\050\065\062\066" +
    "\063\067\022\070\112\073\064\074\013\075\072\001\002" +
    "\000\006\021\uff7e\070\174\001\002\000\010\021\uffe3\031" +
    "\uffe3\034\uffe3\001\002\000\010\021\uffe2\031\202\034\203" +
    "\001\002\000\004\021\200\001\002\000\004\021\uffe1\001" +
    "\002\000\062\004\073\006\065\010\044\013\016\014\060" +
    "\015\014\020\107\025\077\027\057\032\010\051\025\052" +
    "\070\053\026\057\055\062\017\063\020\064\050\065\062" +
    "\066\063\067\022\070\112\073\064\074\013\075\072\001" +
    "\002\000\030\002\uffcc\011\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\031\uffcc\033\uffcc\044\uffcc\045\uffcc\071\uffcc\072\uffcc\001" +
    "\002\000\004\070\207\001\002\000\004\070\204\001\002" +
    "\000\004\021\205\001\002\000\062\004\073\006\065\010" +
    "\044\013\016\014\060\015\014\020\107\025\077\027\057" +
    "\032\010\051\025\052\070\053\026\057\055\062\017\063" +
    "\020\064\050\065\062\066\063\067\022\070\112\073\064" +
    "\074\013\075\072\001\002\000\030\002\uffcb\011\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\031\uffcb\033\uffcb\044\uffcb\045\uffcb" +
    "\071\uffcb\072\uffcb\001\002\000\010\021\uffe4\031\uffe4\034" +
    "\uffe4\001\002\000\030\002\uffcd\011\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\031\uffcd\033\uffcd\044\uffcd\045\uffcd\071\uffcd\072" +
    "\uffcd\001\002\000\004\055\212\001\002\000\030\002\uffa2" +
    "\011\uffa2\021\uffa2\022\uffa2\023\uffa2\031\uffa2\033\uffa2\044" +
    "\uffa2\045\uffa2\071\uffa2\072\uffa2\001\002\000\010\021\uffdd" +
    "\031\uffdd\070\214\001\002\000\004\072\226\001\002\000" +
    "\006\021\220\031\217\001\002\000\006\021\uffde\031\uffde" +
    "\001\002\000\004\070\214\001\002\000\102\004\073\006" +
    "\065\007\074\010\044\013\016\014\060\015\014\016\102" +
    "\017\023\020\021\025\077\027\057\032\010\046\027\051" +
    "\025\052\070\053\026\056\054\057\055\060\061\061\104" +
    "\062\017\063\020\064\050\065\062\066\063\067\022\070" +
    "\100\073\064\074\013\075\072\076\004\001\002\000\154" +
    "\002\uffc8\004\073\006\065\007\074\010\044\011\uffc8\012" +
    "\uffc8\013\016\014\060\015\014\016\102\017\023\020\021" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\077\027\057\031" +
    "\uffc8\032\010\033\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\044\uffc8\045\uffc8\046\027\047\uffc8\050" +
    "\uffc8\051\025\052\070\053\026\056\054\057\055\060\061" +
    "\061\104\062\017\063\020\064\050\065\062\066\063\067" +
    "\022\070\100\071\uffc8\072\uffc8\073\064\074\013\075\072" +
    "\076\004\001\002\000\004\022\223\001\002\000\156\002" +
    "\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\035\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\053\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075" +
    "\ufffa\076\ufffa\001\002\000\156\002\ufffd\004\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\001\002" +
    "\000\006\021\uffdf\031\uffdf\001\002\000\062\004\073\006" +
    "\065\010\044\013\016\014\060\015\014\020\107\025\077" +
    "\027\057\032\010\051\025\052\070\053\026\057\055\062" +
    "\017\063\020\064\050\065\062\066\063\067\022\070\112" +
    "\073\064\074\013\075\072\001\002\000\006\021\uffe0\031" +
    "\uffe0\001\002\000\062\004\073\006\065\010\044\013\016" +
    "\014\060\015\014\020\107\025\077\027\057\032\010\051" +
    "\025\052\070\053\026\057\055\062\017\063\020\064\050" +
    "\065\062\066\063\067\022\070\112\073\064\074\013\075" +
    "\072\001\002\000\004\031\232\001\002\000\062\004\073" +
    "\006\065\010\044\013\016\014\060\015\014\020\107\025" +
    "\077\027\057\032\010\051\025\052\070\053\026\057\055" +
    "\062\017\063\020\064\050\065\062\066\063\067\022\070" +
    "\112\073\064\074\013\075\072\001\002\000\004\031\234" +
    "\001\002\000\062\004\073\006\065\010\044\013\016\014" +
    "\060\015\014\020\107\025\077\027\057\032\010\051\025" +
    "\052\070\053\026\057\055\062\017\063\020\064\050\065" +
    "\062\066\063\067\022\070\112\073\064\074\013\075\072" +
    "\001\002\000\004\021\236\001\002\000\054\002\uffe5\011" +
    "\uffe5\012\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\031\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\071\uffe5\072\uffe5" +
    "\001\002\000\064\004\073\006\065\010\044\013\016\014" +
    "\060\015\014\020\107\021\uff7e\025\077\027\057\032\010" +
    "\051\025\052\070\053\026\057\055\062\017\063\020\064" +
    "\050\065\062\066\063\067\022\070\112\073\064\074\013" +
    "\075\072\001\002\000\004\021\241\001\002\000\054\002" +
    "\uffd6\011\uffd6\012\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\031\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6\071\uffd6" +
    "\072\uffd6\001\002\000\062\004\073\006\065\010\044\013" +
    "\016\014\060\015\014\020\107\025\077\027\057\032\010" +
    "\051\025\052\070\053\026\057\055\062\017\063\020\064" +
    "\050\065\062\066\063\067\022\070\112\073\064\074\013" +
    "\075\072\001\002\000\004\031\244\001\002\000\062\004" +
    "\073\006\065\010\044\013\016\014\060\015\014\020\107" +
    "\025\077\027\057\032\010\051\025\052\070\053\026\057" +
    "\055\062\017\063\020\064\050\065\062\066\063\067\022" +
    "\070\112\073\064\074\013\075\072\001\002\000\004\021" +
    "\246\001\002\000\020\002\uffb3\011\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\044\uffb3\045\uffb3\001\002\000\004\021\250\001" +
    "\002\000\054\002\uffa4\011\uffa4\012\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\031\uffa4\033\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\044\uffa4\045\uffa4\047\uffa4" +
    "\050\uffa4\071\uffa4\072\uffa4\001\002\000\104\004\073\006" +
    "\065\007\074\010\044\013\016\014\060\015\014\016\102" +
    "\017\023\020\021\025\077\027\057\030\252\032\010\046" +
    "\027\051\025\052\070\053\026\056\054\057\055\060\061" +
    "\061\104\062\017\063\020\064\050\065\062\066\063\067" +
    "\022\070\100\073\064\074\013\075\072\076\004\001\002" +
    "\000\054\002\uffab\011\uffab\012\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\031\uffab\033\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\044\uffab\045\uffab\047\uffab\050" +
    "\uffab\071\uffab\072\uffab\001\002\000\062\004\073\006\065" +
    "\010\044\013\016\014\060\015\014\020\107\025\077\027" +
    "\057\032\010\051\025\052\070\053\026\057\055\062\017" +
    "\063\020\064\050\065\062\066\063\067\022\070\112\073" +
    "\064\074\013\075\072\001\002\000\004\031\255\001\002" +
    "\000\062\004\073\006\065\010\044\013\016\014\060\015" +
    "\014\020\107\025\077\027\057\032\010\051\025\052\070" +
    "\053\026\057\055\062\017\063\020\064\050\065\062\066" +
    "\063\067\022\070\112\073\064\074\013\075\072\001\002" +
    "\000\004\021\257\001\002\000\054\002\uffeb\011\uffeb\012" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\031\uffeb\033\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\044" +
    "\uffeb\045\uffeb\047\uffeb\050\uffeb\071\uffeb\072\uffeb\001\002" +
    "\000\062\004\073\006\065\010\044\013\016\014\060\015" +
    "\014\020\107\025\077\027\057\032\010\051\025\052\070" +
    "\053\026\057\055\062\017\063\020\064\050\065\062\066" +
    "\063\067\022\070\112\073\064\074\013\075\072\001\002" +
    "\000\004\021\262\001\002\000\020\002\uffb5\011\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\044\uffb5\045\uffb5\001\002\000\052" +
    "\006\065\013\016\014\060\015\014\020\107\025\077\027" +
    "\057\032\010\051\025\057\055\062\017\063\020\064\050" +
    "\065\062\066\063\067\022\070\112\073\064\074\013\075" +
    "\072\001\002\000\052\006\065\013\016\014\060\015\014" +
    "\020\107\025\077\027\057\032\010\051\025\057\055\062" +
    "\017\063\020\064\050\065\062\066\063\067\022\070\112" +
    "\073\064\074\013\075\072\001\002\000\052\006\065\013" +
    "\016\014\060\015\014\020\107\025\077\027\057\032\010" +
    "\051\025\057\055\062\017\063\020\064\050\065\062\066" +
    "\063\067\022\070\112\073\064\074\013\075\072\001\002" +
    "\000\050\002\uff93\011\uff93\012\uff93\021\uff93\022\uff93\023" +
    "\uff93\031\uff93\033\uff93\035\uff93\036\uff93\037\uff93\040\uff93" +
    "\041\uff93\044\uff93\045\uff93\047\uff93\050\uff93\071\uff93\072" +
    "\uff93\001\002\000\050\002\uff94\011\uff94\012\uff94\021\uff94" +
    "\022\uff94\023\uff94\031\uff94\033\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\044\uff94\045\uff94\047\uff94\050\uff94" +
    "\071\uff94\072\uff94\001\002\000\050\002\uff92\011\uff92\012" +
    "\uff92\021\uff92\022\uff92\023\uff92\031\uff92\033\uff92\035\uff92" +
    "\036\uff92\037\uff92\040\uff92\041\uff92\044\uff92\045\uff92\047" +
    "\uff92\050\uff92\071\uff92\072\uff92\001\002\000\074\004\073" +
    "\006\065\010\044\013\016\014\060\015\014\020\021\025" +
    "\077\027\057\032\010\046\027\051\025\052\070\053\026" +
    "\056\054\057\055\060\061\061\104\062\017\063\020\064" +
    "\050\065\062\066\063\067\022\070\152\073\064\074\013" +
    "\075\072\076\004\001\002\000\004\022\uffa7\001\002\000" +
    "\062\004\073\006\065\010\044\013\016\014\060\015\014" +
    "\020\107\025\077\027\057\032\010\051\025\052\070\053" +
    "\026\057\055\062\017\063\020\064\050\065\062\066\063" +
    "\067\022\070\112\073\064\074\013\075\072\001\002\000" +
    "\004\021\275\001\002\000\054\002\uffe8\011\uffe8\012\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\031\uffe8\033\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\044\uffe8" +
    "\045\uffe8\047\uffe8\050\uffe8\071\uffe8\072\uffe8\001\002\000" +
    "\052\006\065\013\016\014\060\015\014\020\107\025\077" +
    "\027\057\032\010\051\025\057\055\062\017\063\020\064" +
    "\050\065\062\066\063\067\022\070\112\073\064\074\013" +
    "\075\072\001\002\000\052\006\065\013\016\014\060\015" +
    "\014\020\107\025\077\027\057\032\010\051\025\057\055" +
    "\062\017\063\020\064\050\065\062\066\063\067\022\070" +
    "\112\073\064\074\013\075\072\001\002\000\050\002\uff96" +
    "\011\uff96\012\uff96\021\uff96\022\uff96\023\uff96\031\uff96\033" +
    "\uff96\035\uff96\036\uff96\037\264\040\265\041\263\044\uff96" +
    "\045\uff96\047\uff96\050\uff96\071\uff96\072\uff96\001\002\000" +
    "\050\002\uff97\011\uff97\012\uff97\021\uff97\022\uff97\023\uff97" +
    "\031\uff97\033\uff97\035\uff97\036\uff97\037\264\040\265\041" +
    "\263\044\uff97\045\uff97\047\uff97\050\uff97\071\uff97\072\uff97" +
    "\001\002\000\006\011\312\045\313\001\002\000\042\011" +
    "\304\020\113\024\uff89\032\114\035\uff89\036\uff89\037\uff89" +
    "\040\uff89\041\uff89\042\uff89\044\146\045\147\047\uff89\050" +
    "\uff89\071\uff89\072\uff89\001\002\000\062\004\073\006\065" +
    "\010\044\013\016\014\060\015\014\020\107\025\077\027" +
    "\057\032\010\051\025\052\070\053\026\057\055\062\017" +
    "\063\020\064\050\065\062\066\063\067\022\070\112\073" +
    "\064\074\013\075\072\001\002\000\030\002\uffb0\011\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\031\uffb0\033\uffb0\044\uffb0\045" +
    "\uffb0\071\uffb0\072\uffb0\001\002\000\032\002\ufff4\011\ufff4" +
    "\012\307\021\ufff4\022\ufff4\023\ufff4\031\ufff4\033\ufff4\044" +
    "\ufff4\045\ufff4\071\ufff4\072\ufff4\001\002\000\054\006\065" +
    "\010\044\013\016\014\060\015\014\020\107\025\077\027" +
    "\057\032\010\051\025\057\055\062\017\063\020\064\050" +
    "\065\062\066\063\067\022\070\112\073\064\074\013\075" +
    "\072\001\002\000\030\002\uffaf\011\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\031\uffaf\033\uffaf\044\uffaf\045\uffaf\071\uffaf\072" +
    "\uffaf\001\002\000\032\002\uffad\011\uffad\012\uffad\021\uffad" +
    "\022\uffad\023\uffad\031\uffad\033\uffad\044\uffad\045\uffad\071" +
    "\uffad\072\uffad\001\002\000\062\004\073\006\065\010\044" +
    "\013\016\014\060\015\014\020\107\025\077\027\057\032" +
    "\010\051\025\052\070\053\026\057\055\062\017\063\020" +
    "\064\050\065\062\066\063\067\022\070\112\073\064\074" +
    "\013\075\072\001\002\000\074\004\073\006\065\010\044" +
    "\013\016\014\060\015\014\020\021\025\077\027\057\032" +
    "\010\046\027\051\025\052\070\053\026\056\054\057\055" +
    "\060\061\061\104\062\017\063\020\064\050\065\062\066" +
    "\063\067\022\070\315\073\064\074\013\075\072\076\004" +
    "\001\002\000\020\002\uffc5\011\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\044\156\045\uffc5\001\002\000\052\002\uffc4\011\uffc4" +
    "\020\113\021\uffc4\022\uffc4\023\uffc4\024\uff89\032\114\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\044\146" +
    "\045\uffc4\047\uff89\050\uff89\071\uff89\072\uff89\001\002\000" +
    "\030\002\uffb2\011\uffb2\021\uffb2\022\uffb2\023\uffb2\031\uffb2" +
    "\033\uffb2\044\uffb2\045\uffb2\071\uffb2\072\uffb2\001\002\000" +
    "\032\002\ufff4\011\ufff4\012\320\021\ufff4\022\ufff4\023\ufff4" +
    "\031\ufff4\033\ufff4\044\ufff4\045\ufff4\071\ufff4\072\ufff4\001" +
    "\002\000\054\006\065\010\044\013\016\014\060\015\014" +
    "\020\107\025\077\027\057\032\010\051\025\057\055\062" +
    "\017\063\020\064\050\065\062\066\063\067\022\070\112" +
    "\073\064\074\013\075\072\001\002\000\030\002\uffb1\011" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\031\uffb1\033\uffb1\044\uffb1" +
    "\045\uffb1\071\uffb1\072\uffb1\001\002\000\032\002\uffae\011" +
    "\uffae\012\uffae\021\uffae\022\uffae\023\uffae\031\uffae\033\uffae" +
    "\044\uffae\045\uffae\071\uffae\072\uffae\001\002\000\052\006" +
    "\065\013\016\014\060\015\014\020\107\025\077\027\057" +
    "\032\010\051\025\057\055\062\017\063\020\064\050\065" +
    "\062\066\063\067\022\070\112\073\064\074\013\075\072" +
    "\001\002\000\052\006\065\013\016\014\060\015\014\020" +
    "\107\025\077\027\057\032\010\051\025\057\055\062\017" +
    "\063\020\064\050\065\062\066\063\067\022\070\112\073" +
    "\064\074\013\075\072\001\002\000\042\002\uff99\011\uff99" +
    "\012\uff99\021\uff99\022\uff99\023\uff99\031\uff99\033\uff99\035" +
    "\276\036\277\044\uff99\045\uff99\047\uff99\050\uff99\071\uff99" +
    "\072\uff99\001\002\000\042\002\uff9a\011\uff9a\012\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\031\uff9a\033\uff9a\035\276\036\277" +
    "\044\uff9a\045\uff9a\047\uff9a\050\uff9a\071\uff9a\072\uff9a\001" +
    "\002\000\156\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\044\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073" +
    "\ufff9\074\ufff9\075\ufff9\076\ufff9\001\002\000\020\002\uffbb" +
    "\011\uffbb\021\uffbb\022\uffbb\023\uffbb\044\uffbb\045\uffbb\001" +
    "\002\000\052\002\uffba\011\uffba\020\113\021\uffba\022\uffba" +
    "\023\uffba\024\uff89\032\114\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\044\uffba\045\uffba\047\uff89\050\uff89" +
    "\071\uff89\072\uff89\001\002\000\004\054\333\001\002\000" +
    "\030\002\uffa1\011\uffa1\021\uffa1\022\uffa1\023\uffa1\031\uffa1" +
    "\033\uffa1\044\uffa1\045\uffa1\071\uffa1\072\uffa1\001\002\000" +
    "\050\002\uff90\011\uff90\012\uff90\021\uff90\022\uff90\023\uff90" +
    "\031\uff90\033\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041" +
    "\uff90\044\uff90\045\uff90\047\uff90\050\uff90\071\uff90\072\uff90" +
    "\001\002\000\062\004\073\006\065\010\044\013\016\014" +
    "\060\015\014\020\107\025\077\027\057\032\010\051\025" +
    "\052\070\053\026\057\055\062\017\063\020\064\050\065" +
    "\062\066\063\067\022\070\112\073\064\074\013\075\072" +
    "\001\002\000\062\004\073\006\065\010\044\013\016\014" +
    "\060\015\014\020\107\025\077\027\057\032\010\051\025" +
    "\052\070\053\026\057\055\062\017\063\020\064\050\065" +
    "\062\066\063\067\022\070\112\073\064\074\013\075\072" +
    "\001\002\000\004\021\340\001\002\000\004\022\uffa5\001" +
    "\002\000\006\021\343\045\313\001\002\000\012\021\136" +
    "\031\uff9e\071\162\072\161\001\002\000\020\002\uffb7\011" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\044\uffb7\045\uffb7\001\002" +
    "\000\062\004\073\006\065\010\044\013\016\014\060\015" +
    "\014\020\107\025\077\027\057\032\010\051\025\052\070" +
    "\053\026\057\055\062\017\063\020\064\050\065\062\066" +
    "\063\067\022\070\112\073\064\074\013\075\072\001\002" +
    "\000\004\021\346\001\002\000\054\002\uffe9\011\uffe9\012" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\031\uffe9\033\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\044" +
    "\uffe9\045\uffe9\047\uffe9\050\uffe9\071\uffe9\072\uffe9\001\002" +
    "\000\062\004\073\006\065\010\044\013\016\014\060\015" +
    "\014\020\107\025\077\027\057\032\010\051\025\052\070" +
    "\053\026\057\055\062\017\063\020\064\050\065\062\066" +
    "\063\067\022\070\112\073\064\074\013\075\072\001\002" +
    "\000\004\021\351\001\002\000\054\002\uffea\011\uffea\012" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\031\uffea\033\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\044" +
    "\uffea\045\uffea\047\uffea\050\uffea\071\uffea\072\uffea\001\002" +
    "\000\076\004\073\006\065\010\044\012\355\013\016\014" +
    "\060\015\014\020\021\025\077\027\057\032\010\046\027" +
    "\051\025\052\070\053\026\056\054\057\055\060\061\061" +
    "\104\062\017\063\020\064\050\065\062\066\063\067\022" +
    "\070\357\073\064\074\013\075\072\076\004\001\002\000" +
    "\100\004\073\006\065\010\044\012\355\013\016\014\060" +
    "\015\014\020\021\025\077\027\057\030\372\032\010\046" +
    "\027\051\025\052\070\053\026\056\054\057\055\060\061" +
    "\061\104\062\017\063\020\064\050\065\062\066\063\067" +
    "\022\070\357\073\064\074\013\075\072\076\004\001\002" +
    "\000\006\023\366\045\313\001\002\000\004\023\363\001" +
    "\002\000\100\004\uffd8\006\uffd8\010\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\020\uffd8\025\uffd8\027\uffd8\030\uffd8\032" +
    "\uffd8\046\uffd8\051\uffd8\052\uffd8\053\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8" +
    "\001\002\000\042\020\113\023\360\024\uff89\032\114\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\044\146" +
    "\045\147\047\uff89\050\uff89\071\uff89\072\uff89\001\002\000" +
    "\062\004\073\006\065\010\044\013\016\014\060\015\014" +
    "\020\107\025\077\027\057\032\010\051\025\052\070\053" +
    "\026\057\055\062\017\063\020\064\050\065\062\066\063" +
    "\067\022\070\112\073\064\074\013\075\072\001\002\000" +
    "\004\022\362\001\002\000\100\004\uffdb\006\uffdb\010\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\020\uffdb\025\uffdb\027" +
    "\uffdb\030\uffdb\032\uffdb\046\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\001\002\000\062\004\073\006\065\010" +
    "\044\013\016\014\060\015\014\020\107\025\077\027\057" +
    "\032\010\051\025\052\070\053\026\057\055\062\017\063" +
    "\020\064\050\065\062\066\063\067\022\070\112\073\064" +
    "\074\013\075\072\001\002\000\004\022\365\001\002\000" +
    "\100\004\uffda\006\uffda\010\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\020\uffda\025\uffda\027\uffda\030\uffda\032\uffda\046" +
    "\uffda\051\uffda\052\uffda\053\uffda\056\uffda\057\uffda\060\uffda" +
    "\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067" +
    "\uffda\070\uffda\073\uffda\074\uffda\075\uffda\076\uffda\001\002" +
    "\000\062\004\073\006\065\010\044\013\016\014\060\015" +
    "\014\020\107\025\077\027\057\032\010\051\025\052\070" +
    "\053\026\057\055\062\017\063\020\064\050\065\062\066" +
    "\063\067\022\070\112\073\064\074\013\075\072\001\002" +
    "\000\004\022\370\001\002\000\100\004\uffdc\006\uffdc\010" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\020\uffdc\025\uffdc" +
    "\027\uffdc\030\uffdc\032\uffdc\046\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\073\uffdc\074" +
    "\uffdc\075\uffdc\076\uffdc\001\002\000\100\004\uffd9\006\uffd9" +
    "\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\020\uffd9\025" +
    "\uffd9\027\uffd9\030\uffd9\032\uffd9\046\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\073\uffd9" +
    "\074\uffd9\075\uffd9\076\uffd9\001\002\000\054\002\uffac\011" +
    "\uffac\012\uffac\021\uffac\022\uffac\023\uffac\024\uffac\031\uffac" +
    "\033\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\044\uffac\045\uffac\047\uffac\050\uffac\071\uffac\072\uffac" +
    "\001\002\000\156\002\ufffb\004\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb" +
    "\073\ufffb\074\ufffb\075\ufffb\076\ufffb\001\002\000\004\021" +
    "\375\001\002\000\054\002\uffa3\011\uffa3\012\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\031\uffa3\033\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\044\uffa3\045\uffa3" +
    "\047\uffa3\050\uffa3\071\uffa3\072\uffa3\001\002\000\012\002" +
    "\ufffe\022\ufff7\071\162\072\161\001\002\000\006\031\uffd0" +
    "\033\uffd0\001\002\000\010\023\u0108\031\uff9e\033\uff9e\001" +
    "\002\000\004\033\u010d\001\002\000\064\004\073\006\065" +
    "\010\044\013\016\014\060\015\014\020\107\023\uff7e\025" +
    "\077\027\057\032\010\051\025\052\070\053\026\057\055" +
    "\062\017\063\020\064\050\065\062\066\063\067\022\070" +
    "\112\073\064\074\013\075\072\001\002\000\006\031\u0104" +
    "\033\u0105\001\002\000\062\004\073\006\065\010\044\013" +
    "\016\014\060\015\014\020\107\025\077\027\057\032\010" +
    "\051\025\052\070\053\026\057\055\062\017\063\020\064" +
    "\050\065\062\066\063\067\022\070\112\073\064\074\013" +
    "\075\072\001\002\000\056\002\uffd3\011\uffd3\012\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\044" +
    "\uffd3\045\uffd3\047\uffd3\050\uffd3\071\uffd3\072\uffd3\001\002" +
    "\000\006\031\uffd1\033\uffd1\001\002\000\004\023\u0108\001" +
    "\002\000\062\004\073\006\065\010\044\013\016\014\060" +
    "\015\014\020\107\025\077\027\057\032\010\051\025\052" +
    "\070\053\026\057\055\062\017\063\020\064\050\065\062" +
    "\066\063\067\022\070\112\073\064\074\013\075\072\001" +
    "\002\000\006\031\uffd2\033\uffd2\001\002\000\004\023\u010b" +
    "\001\002\000\004\033\u010c\001\002\000\056\002\uffd4\011" +
    "\uffd4\012\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\071\uffd4" +
    "\072\uffd4\001\002\000\054\002\uffd7\011\uffd7\012\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\031\uffd7\033\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7\045" +
    "\uffd7\047\uffd7\050\uffd7\071\uffd7\072\uffd7\001\002\000\062" +
    "\004\073\006\065\010\044\013\016\014\060\015\014\020" +
    "\107\025\077\027\057\032\010\051\025\052\070\053\026" +
    "\057\055\062\017\063\020\064\050\065\062\066\063\067" +
    "\022\070\112\073\064\074\013\075\072\001\002\000\004" +
    "\033\u0110\001\002\000\056\002\uffcf\011\uffcf\012\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\031\uffcf\033\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\047\uffcf\050\uffcf\071\uffcf\072\uffcf\001\002" +
    "\000\052\006\065\013\016\014\060\015\014\020\107\025" +
    "\077\027\057\032\010\051\025\057\055\062\017\063\020" +
    "\064\050\065\062\066\063\067\022\070\112\073\064\074" +
    "\013\075\072\001\002\000\052\006\065\013\016\014\060" +
    "\015\014\020\107\025\077\027\057\032\010\051\025\057" +
    "\055\062\017\063\020\064\050\065\062\066\063\067\022" +
    "\070\112\073\064\074\013\075\072\001\002\000\050\002" +
    "\uff8d\011\uff8d\012\uff8d\021\uff8d\022\uff8d\023\uff8d\031\uff8d" +
    "\033\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\044" +
    "\uff8d\045\uff8d\047\uff8d\050\uff8d\071\uff8d\072\uff8d\001\002" +
    "\000\050\002\uff8e\011\uff8e\012\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\031\uff8e\033\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\044\uff8e\045\uff8e\047\uff8e\050\uff8e\071\uff8e\072" +
    "\uff8e\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\106\002\004\003\010\004\104\005\014\007" +
    "\035\011\066\012\100\013\027\014\040\015\052\016\042" +
    "\017\031\031\037\032\006\033\050\034\046\040\030\041" +
    "\032\042\065\043\045\044\023\045\074\046\034\047\055" +
    "\050\036\051\044\052\041\053\070\054\102\056\051\057" +
    "\075\060\005\062\033\063\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\007\035\011\066\012\100\022\117\023\u0100\031\037" +
    "\032\006\033\110\034\046\036\376\037\u0102\040\030\042" +
    "\065\043\045\044\023\046\034\047\055\050\036\051\044" +
    "\052\377\053\070\054\102\056\051\057\075\060\005\061" +
    "\116\062\033\001\001\000\102\004\223\005\014\007\035" +
    "\011\066\012\100\013\027\014\040\015\052\016\042\017" +
    "\031\031\037\032\006\033\050\034\046\040\030\041\032" +
    "\042\065\043\045\044\023\045\074\046\034\047\055\050" +
    "\036\051\044\052\375\053\070\054\102\056\051\057\075" +
    "\060\005\062\033\063\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\007" +
    "\035\011\066\012\100\013\027\014\340\015\052\016\042" +
    "\017\031\022\130\024\133\031\037\032\006\033\110\034" +
    "\046\040\030\042\065\043\045\044\023\046\034\047\055" +
    "\050\036\051\044\052\341\053\070\054\102\056\051\057" +
    "\075\060\005\062\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\035\031\037\032" +
    "\006\033\110\040\030\042\065\043\045\044\023\046\034" +
    "\060\333\062\033\001\001\000\002\001\001\000\060\007" +
    "\035\011\066\012\100\013\327\031\037\032\006\033\110" +
    "\034\046\040\030\042\065\043\045\044\023\046\034\047" +
    "\055\050\036\051\044\052\152\053\070\054\102\056\051" +
    "\057\075\060\005\062\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\007\035\011\066\012\100\013" +
    "\027\014\301\015\052\016\042\017\031\031\037\032\006" +
    "\033\110\034\046\040\030\042\065\043\045\044\023\046" +
    "\034\047\055\050\036\051\044\052\152\053\070\054\102" +
    "\056\051\057\075\060\005\062\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\104" +
    "\003\250\004\104\005\014\007\035\011\066\012\100\013" +
    "\027\014\040\015\052\016\042\017\031\031\037\032\006" +
    "\033\050\034\046\040\030\041\032\042\065\043\045\044" +
    "\023\045\074\046\034\047\055\050\036\051\044\052\041" +
    "\053\070\054\102\056\051\057\075\060\005\062\033\063" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\007\035\011\066\012\100\031\037\032\006\033" +
    "\110\034\046\040\030\042\065\043\045\044\023\046\034" +
    "\047\055\050\036\051\044\052\107\053\070\054\102\056" +
    "\051\057\075\060\005\062\033\001\001\000\062\007\035" +
    "\011\066\012\100\022\130\024\133\031\037\032\006\033" +
    "\110\034\046\040\030\042\065\043\045\044\023\046\034" +
    "\047\055\050\036\051\044\052\132\053\070\054\102\056" +
    "\051\057\075\060\005\062\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\007\035\011" +
    "\066\012\100\022\117\023\121\031\037\032\006\033\110" +
    "\034\046\040\030\042\065\043\045\044\023\046\034\047" +
    "\055\050\036\051\044\052\120\053\070\054\102\056\051" +
    "\057\075\060\005\061\116\062\033\001\001\000\056\007" +
    "\035\011\066\012\100\031\037\032\006\033\110\034\046" +
    "\040\030\042\065\043\045\044\023\046\034\047\055\050" +
    "\036\051\044\052\114\053\070\054\102\056\051\057\075" +
    "\060\005\062\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\007\035\011" +
    "\066\012\100\031\037\032\006\033\110\034\046\040\030" +
    "\042\065\043\045\044\023\046\034\047\055\050\036\051" +
    "\044\052\124\053\070\054\102\056\051\057\075\060\005" +
    "\062\033\001\001\000\002\001\001\000\056\007\035\011" +
    "\066\012\100\031\037\032\006\033\110\034\046\040\030" +
    "\042\065\043\045\044\023\046\034\047\055\050\036\051" +
    "\044\052\126\053\070\054\102\056\051\057\075\060\005" +
    "\062\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\007\035\011\066\012\100\031\037" +
    "\032\006\033\110\034\046\040\030\042\065\043\045\044" +
    "\023\046\034\047\055\050\036\051\044\052\136\053\070" +
    "\054\102\056\051\057\075\060\005\062\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\007" +
    "\035\011\066\012\100\031\037\032\006\033\110\034\046" +
    "\040\030\042\065\043\045\044\023\046\034\047\055\050" +
    "\036\051\044\052\141\053\070\054\102\056\051\057\075" +
    "\060\005\062\033\001\001\000\002\001\001\000\056\007" +
    "\035\011\066\012\100\031\037\032\006\033\110\034\046" +
    "\040\030\042\065\043\045\044\023\046\034\047\055\050" +
    "\036\051\044\052\143\053\070\054\102\056\051\057\075" +
    "\060\005\062\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\007\035\011\066\012\100\013\027\016\164" +
    "\017\031\031\037\032\006\033\110\034\046\040\030\042" +
    "\065\043\045\044\023\046\034\047\055\050\036\051\044" +
    "\052\152\053\070\054\102\056\051\057\075\060\005\062" +
    "\033\001\001\000\066\007\035\011\066\012\100\013\027" +
    "\015\153\016\042\017\031\031\037\032\006\033\110\034" +
    "\046\040\030\042\065\043\045\044\023\046\034\047\055" +
    "\050\036\051\044\052\152\053\070\054\102\056\051\057" +
    "\075\060\005\062\033\001\001\000\072\007\035\011\066" +
    "\012\100\013\027\014\040\015\052\016\042\017\031\031" +
    "\037\032\006\033\110\034\046\040\030\042\065\043\045" +
    "\044\023\046\034\047\055\050\036\051\044\052\041\053" +
    "\070\054\102\056\051\057\075\060\005\062\033\063\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\007\035" +
    "\011\066\012\100\013\027\016\156\017\031\031\037\032" +
    "\006\033\110\034\046\040\030\042\065\043\045\044\023" +
    "\046\034\047\055\050\036\051\044\052\152\053\070\054" +
    "\102\056\051\057\075\060\005\062\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\007\035\011\066\012" +
    "\100\031\037\032\006\033\110\034\046\040\030\042\065" +
    "\043\045\044\023\046\034\047\055\050\036\051\044\052" +
    "\163\053\070\054\102\056\051\057\075\060\005\062\033" +
    "\001\001\000\056\007\035\011\066\012\100\031\037\032" +
    "\006\033\110\034\046\040\030\042\065\043\045\044\023" +
    "\046\034\047\055\050\036\051\044\052\162\053\070\054" +
    "\102\056\051\057\075\060\005\062\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\007\035\011\066\012\100" +
    "\013\027\014\040\015\052\016\042\017\031\031\037\032" +
    "\006\033\110\034\046\040\030\042\065\043\045\044\023" +
    "\046\034\047\055\050\036\051\044\052\041\053\070\054" +
    "\102\056\051\057\075\060\005\062\033\063\170\001\001" +
    "\000\002\001\001\000\056\007\035\011\066\012\100\031" +
    "\037\032\006\033\110\034\046\040\030\042\065\043\045" +
    "\044\023\046\034\047\055\050\036\051\044\052\207\053" +
    "\070\054\102\056\051\057\075\060\005\062\033\001\001" +
    "\000\010\020\174\021\175\061\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\007\035\011\066\012\100\031\037\032\006\033" +
    "\110\034\046\040\030\042\065\043\045\044\023\046\034" +
    "\047\055\050\036\051\044\052\200\053\070\054\102\056" +
    "\051\057\075\060\005\062\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\007\035\011\066\012\100\031\037\032\006\033\110" +
    "\034\046\040\030\042\065\043\045\044\023\046\034\047" +
    "\055\050\036\051\044\052\205\053\070\054\102\056\051" +
    "\057\075\060\005\062\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\215\026\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\224" +
    "\001\001\000\104\003\220\004\104\005\014\007\035\011" +
    "\066\012\100\013\027\014\040\015\052\016\042\017\031" +
    "\031\037\032\006\033\050\034\046\040\030\041\032\042" +
    "\065\043\045\044\023\045\074\046\034\047\055\050\036" +
    "\051\044\052\041\053\070\054\102\056\051\057\075\060" +
    "\005\062\033\063\221\001\001\000\102\004\223\005\014" +
    "\007\035\011\066\012\100\013\027\014\040\015\052\016" +
    "\042\017\031\031\037\032\006\033\050\034\046\040\030" +
    "\041\032\042\065\043\045\044\023\045\074\046\034\047" +
    "\055\050\036\051\044\052\041\053\070\054\102\056\051" +
    "\057\075\060\005\062\033\063\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\007\035\011\066\012\100\031\037\032\006\033" +
    "\110\034\046\040\030\042\065\043\045\044\023\046\034" +
    "\047\055\050\036\051\044\052\226\053\070\054\102\056" +
    "\051\057\075\060\005\062\033\001\001\000\002\001\001" +
    "\000\056\007\035\011\066\012\100\031\037\032\006\033" +
    "\110\034\046\040\030\042\065\043\045\044\023\046\034" +
    "\047\055\050\036\051\044\052\230\053\070\054\102\056" +
    "\051\057\075\060\005\062\033\001\001\000\002\001\001" +
    "\000\056\007\035\011\066\012\100\031\037\032\006\033" +
    "\110\034\046\040\030\042\065\043\045\044\023\046\034" +
    "\047\055\050\036\051\044\052\232\053\070\054\102\056" +
    "\051\057\075\060\005\062\033\001\001\000\002\001\001" +
    "\000\056\007\035\011\066\012\100\031\037\032\006\033" +
    "\110\034\046\040\030\042\065\043\045\044\023\046\034" +
    "\047\055\050\036\051\044\052\234\053\070\054\102\056" +
    "\051\057\075\060\005\062\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\007\035\011\066\012\100\022" +
    "\117\023\237\031\037\032\006\033\110\034\046\040\030" +
    "\042\065\043\045\044\023\046\034\047\055\050\036\051" +
    "\044\052\120\053\070\054\102\056\051\057\075\060\005" +
    "\061\116\062\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\007\035\011\066\012\100\031\037\032\006" +
    "\033\110\034\046\040\030\042\065\043\045\044\023\046" +
    "\034\047\055\050\036\051\044\052\242\053\070\054\102" +
    "\056\051\057\075\060\005\062\033\001\001\000\002\001" +
    "\001\000\056\007\035\011\066\012\100\031\037\032\006" +
    "\033\110\034\046\040\030\042\065\043\045\044\023\046" +
    "\034\047\055\050\036\051\044\052\244\053\070\054\102" +
    "\056\051\057\075\060\005\062\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\004\223\005\014\007\035\011\066\012\100\013" +
    "\027\014\040\015\052\016\042\017\031\031\037\032\006" +
    "\033\050\034\046\040\030\041\032\042\065\043\045\044" +
    "\023\045\074\046\034\047\055\050\036\051\044\052\041" +
    "\053\070\054\102\056\051\057\075\060\005\062\033\063" +
    "\221\001\001\000\002\001\001\000\056\007\035\011\066" +
    "\012\100\031\037\032\006\033\110\034\046\040\030\042" +
    "\065\043\045\044\023\046\034\047\055\050\036\051\044" +
    "\052\253\053\070\054\102\056\051\057\075\060\005\062" +
    "\033\001\001\000\002\001\001\000\056\007\035\011\066" +
    "\012\100\031\037\032\006\033\110\034\046\040\030\042" +
    "\065\043\045\044\023\046\034\047\055\050\036\051\044" +
    "\052\255\053\070\054\102\056\051\057\075\060\005\062" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\007\035\011\066\012\100\031\037\032\006\033\110\034" +
    "\046\040\030\042\065\043\045\044\023\046\034\047\055" +
    "\050\036\051\044\052\260\053\070\054\102\056\051\057" +
    "\075\060\005\062\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\035\031\037\032\006\033\110\040" +
    "\030\042\065\043\045\044\023\046\034\057\267\060\005" +
    "\062\033\001\001\000\032\007\035\031\037\032\006\033" +
    "\110\040\030\042\065\043\045\044\023\046\034\057\266" +
    "\060\005\062\033\001\001\000\032\007\035\031\037\032" +
    "\006\033\110\040\030\042\065\043\045\044\023\046\034" +
    "\057\265\060\005\062\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\007\035\011\066" +
    "\012\100\013\027\014\040\015\052\016\042\017\031\031" +
    "\037\032\006\033\110\034\046\040\030\042\065\043\045" +
    "\044\023\046\034\047\055\050\036\051\044\052\041\053" +
    "\070\054\102\056\051\057\075\060\005\062\033\063\271" +
    "\001\001\000\002\001\001\000\056\007\035\011\066\012" +
    "\100\031\037\032\006\033\110\034\046\040\030\042\065" +
    "\043\045\044\023\046\034\047\055\050\036\051\044\052" +
    "\273\053\070\054\102\056\051\057\075\060\005\062\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\035\031\037\032\006\033\110\040\030\042\065\043\045" +
    "\044\023\046\034\056\300\057\075\060\005\062\033\001" +
    "\001\000\034\007\035\031\037\032\006\033\110\040\030" +
    "\042\065\043\045\044\023\046\034\056\277\057\075\060" +
    "\005\062\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\007\035\011" +
    "\066\012\100\031\037\032\006\033\110\034\046\040\030" +
    "\042\065\043\045\044\023\046\034\047\055\050\036\051" +
    "\044\052\304\053\070\054\305\056\051\057\075\060\005" +
    "\062\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\007\035\011\066\012\100\031\037\032\006\033\110" +
    "\040\030\042\065\043\045\044\023\046\034\050\036\051" +
    "\044\053\307\054\310\056\051\057\075\060\005\062\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\007" +
    "\035\011\066\012\100\031\037\032\006\033\110\034\046" +
    "\040\030\042\065\043\045\044\023\046\034\047\055\050" +
    "\036\051\044\052\315\053\070\054\316\056\051\057\075" +
    "\060\005\062\033\001\001\000\066\007\035\011\066\012" +
    "\100\013\027\015\313\016\042\017\031\031\037\032\006" +
    "\033\110\034\046\040\030\042\065\043\045\044\023\046" +
    "\034\047\055\050\036\051\044\052\152\053\070\054\102" +
    "\056\051\057\075\060\005\062\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\007\035\011\066\012\100\031\037\032\006\033" +
    "\110\040\030\042\065\043\045\044\023\046\034\050\036" +
    "\051\044\053\320\054\321\056\051\057\075\060\005\062" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\007\035\031\037\032\006\033\110\040\030\042\065\043" +
    "\045\044\023\046\034\051\325\056\051\057\075\060\005" +
    "\062\033\001\001\000\036\007\035\031\037\032\006\033" +
    "\110\040\030\042\065\043\045\044\023\046\034\051\324" +
    "\056\051\057\075\060\005\062\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\007\035\011\066\012\100\022\130" +
    "\024\133\031\037\032\006\033\110\034\046\040\030\042" +
    "\065\043\045\044\023\046\034\047\055\050\036\051\044" +
    "\052\132\053\070\054\102\056\051\057\075\060\005\062" +
    "\033\001\001\000\056\007\035\011\066\012\100\031\037" +
    "\032\006\033\110\034\046\040\030\042\065\043\045\044" +
    "\023\046\034\047\055\050\036\051\044\052\336\053\070" +
    "\054\102\056\051\057\075\060\005\062\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\007\035\011\066\012" +
    "\100\031\037\032\006\033\110\034\046\040\030\042\065" +
    "\043\045\044\023\046\034\047\055\050\036\051\044\052" +
    "\344\053\070\054\102\056\051\057\075\060\005\062\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\007" +
    "\035\011\066\012\100\031\037\032\006\033\110\034\046" +
    "\040\030\042\065\043\045\044\023\046\034\047\055\050" +
    "\036\051\044\052\347\053\070\054\102\056\051\057\075" +
    "\060\005\062\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\007\035\011\066\012\100\013\027\014\353" +
    "\015\052\016\042\017\031\027\355\030\352\031\037\032" +
    "\006\033\110\034\046\040\030\042\065\043\045\044\023" +
    "\046\034\047\055\050\036\051\044\052\152\053\070\054" +
    "\102\056\051\057\075\060\005\062\033\001\001\000\072" +
    "\007\035\011\066\012\100\013\027\014\353\015\052\016" +
    "\042\017\031\027\370\031\037\032\006\033\110\034\046" +
    "\040\030\042\065\043\045\044\023\046\034\047\055\050" +
    "\036\051\044\052\152\053\070\054\102\056\051\057\075" +
    "\060\005\062\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\007\035" +
    "\011\066\012\100\031\037\032\006\033\110\034\046\040" +
    "\030\042\065\043\045\044\023\046\034\047\055\050\036" +
    "\051\044\052\360\053\070\054\102\056\051\057\075\060" +
    "\005\062\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\007\035\011\066\012\100\031\037\032\006\033" +
    "\110\034\046\040\030\042\065\043\045\044\023\046\034" +
    "\047\055\050\036\051\044\052\363\053\070\054\102\056" +
    "\051\057\075\060\005\062\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\007\035\011\066\012\100\031" +
    "\037\032\006\033\110\034\046\040\030\042\065\043\045" +
    "\044\023\046\034\047\055\050\036\051\044\052\366\053" +
    "\070\054\102\056\051\057\075\060\005\062\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\007\035\011\066\012\100" +
    "\022\117\023\u0109\031\037\032\006\033\110\034\046\040" +
    "\030\042\065\043\045\044\023\046\034\047\055\050\036" +
    "\051\044\052\120\053\070\054\102\056\051\057\075\060" +
    "\005\061\116\062\033\001\001\000\002\001\001\000\060" +
    "\007\035\011\066\012\100\031\037\032\006\033\110\034" +
    "\046\036\u0105\040\030\042\065\043\045\044\023\046\034" +
    "\047\055\050\036\051\044\052\u0106\053\070\054\102\056" +
    "\051\057\075\060\005\062\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\007\035\011" +
    "\066\012\100\031\037\032\006\033\110\034\046\040\030" +
    "\042\065\043\045\044\023\046\034\047\055\050\036\051" +
    "\044\052\u0108\053\070\054\102\056\051\057\075\060\005" +
    "\062\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\007\035\011\066\012\100\031\037\032\006\033\110\034" +
    "\046\040\030\042\065\043\045\044\023\046\034\047\055" +
    "\050\036\051\044\052\u010e\053\070\054\102\056\051\057" +
    "\075\060\005\062\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\035\031\037\032\006\033\110\040" +
    "\030\042\065\043\045\044\023\046\034\057\u0113\060\005" +
    "\062\033\001\001\000\032\007\035\031\037\032\006\033" +
    "\110\040\030\042\065\043\045\044\023\046\034\057\u0112" +
    "\060\005\062\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArithParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArithParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArithParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ArithParser$actions {
  private final ArithParser parser;

  /** Constructor */
  CUP$ArithParser$actions(ArithParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action_part00000000(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArithParser$result;

      /* select the action based on the action number */
      switch (CUP$ArithParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = start_val;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArithParser$parser.done_parsing();
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= expOrLog 
            {
              ArithProgram RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
				Statement s = new Statement(e);
				StmtSequence ss = new StmtSequence(s);
				RESULT = new ArithProgram(ss); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= stmtList exptop 
            {
              ArithProgram RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
				Statement s = new Statement(e);
				lst.add(s);
				RESULT = new ArithProgram(lst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expOrLog SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= def SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtExpDefn d = (StmtExpDefn)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= print SEMI 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new Statement(p); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expOrLog ::= exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expOrLog",49, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expOrLog ::= logExpO 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expOrLog",49, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exptop ::= expo 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",40, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exptop ::= expc 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",40, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exptop ::= proc 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",40, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exptop ::= comment 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",40, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expo ::= ifTheno 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expo",41, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expc ::= bitexp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expc",42, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expc ::= ifThenc 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expc",42, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // explist ::= explist exptop 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			lst.add(e);
			RESULT = lst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("explist",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // explist ::= exptop 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("explist",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // builtin ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // builtin ::= PAIR LPAREN exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPair(e1, e2); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // builtin ::= CAR LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCar(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // builtin ::= CDR LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCdr(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // builtin ::= SIZE LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpGetSize(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // builtin ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpVector v = (ExpVector)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // builtin ::= vectorCall 
            {
              Exp RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpVecCall vc = (ExpVecCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = vc; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // builtin ::= SUBSTR LPAREN exptop COMMA exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpSubstr(e1, e2, e3); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		plst.add(v);
			RESULT = plst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<String> result = new ArrayList<>();
				result.add(v);
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT=pl; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 
					ArrayList<String> result = new ArrayList<>();
					RESULT = result; 
				
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bind ::= VAR EQUAL exptop 
            {
              ExpBind RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpBind(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bind",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bindList ::= bindList COMMA bind 
            {
              ArrayList<ExpBind> RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<ExpBind> blst = (ArrayList<ExpBind>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpBind b = (ExpBind)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 blst.add(b);
			RESULT = blst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bindList ::= bind 
            {
              ArrayList<ExpBind> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpBind b = (ExpBind)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<ExpBind> result = new ArrayList<>();
				result.add(b); //changed from arraylist <string> to arraylist<expbind>
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bindList ::= 
            {
              ArrayList<ExpBind> RESULT =null;
		 ArrayList<ExpBind> result = new ArrayList<>();
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pred ::= logExpO COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(l,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pred ::= VAR COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(new ExpVar(l),e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pred ::= ELSE COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // predList ::= predList pred 
            {
              ArrayList<ExpCClause> RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<ExpCClause> plst = (ArrayList<ExpCClause>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpCClause p = (ExpCClause)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 plst.add(p);
			RESULT = plst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("predList",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // predList ::= pred 
            {
              ArrayList<ExpCClause> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpCClause p = (ExpCClause)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<ExpCClause> result = new ArrayList<>();
				result.add(p);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("predList",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list ::= LBRACKET argListE RBRACKET 
            {
              ExpList RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpList(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("list",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list ::= LIST LPAREN argListE RPAREN 
            {
              ExpList RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpList(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("list",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list ::= ELIST 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("list",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // vector ::= LBRACKET COLON argListE COLON RBRACKET 
            {
              ExpVector RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		 RESULT = new ExpVector(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vector",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vector ::= LBRACKET sizeList RBRACKET 
            {
              ExpVector RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> slst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vector",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // size ::= exptop COLON exptop 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpSize(e1,e2); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("size",28, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sizeList ::= sizeList COMMA size 
            {
              ArrayList<Exp> RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> slst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 slst.add(s);
			RESULT = slst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("sizeList",29, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sizeList ::= size 
            {
              ArrayList<Exp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<Exp> result = new ArrayList<>();
				result.add(s);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("sizeList",29, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // vectorCall ::= vector LBRACKET exptop RBRACKET 
            {
              ExpVecCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		ExpVector v = (ExpVector)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpVecCall(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vectorCall",25, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vectorCall ::= VAR LBRACKET exptop RBRACKET 
            {
              ExpVecCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 
					RESULT = new ExpVecCall(new ExpVar(v),e); 
				
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vectorCall",25, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // proc ::= PROC VAR exptop 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			ArrayList<String> arr = new ArrayList<>();
			arr.add(v);
			RESULT = new ExpProcedure(arr,body, ProcForm.VARARG); 
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // proc ::= PROC LPAREN paramListE RPAREN exptop 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			RESULT = new ExpProcedure(plst,e, ProcForm.FORMAL); 
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // proc ::= PROC LPAREN paramList DOT VAR RPAREN exptop 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			plst.add(v);
			RESULT = new ExpProcedure(plst,body, ProcForm.MIXED); 
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // call ::= CALL LPAREN VAR COMMA list RPAREN 
            {
              ExpCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ExpList lst = (ExpList)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT=new ExpCall(new ExpVar(v),lst);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("call",27, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // call ::= CALL LPAREN VAR COMMA VAR RPAREN 
            {
              ExpCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String lst = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT=new ExpCall(new ExpVar(v),new ExpVar(lst));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("call",27, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // let ::= LET LPAREN bindList RPAREN stmtList 
            {
              Exp RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<ExpBind> blst = (ArrayList<ExpBind>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLet(blst,body); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("let",30, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logExp ::= exptop COMPARISON exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				RESULT = new ExpCompare(e,e2,c);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExp",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // logExp ::= exptop EQUAL exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				RESULT = new ExpCompare(e,e2,c);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExp",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // logExpO ::= logExpO OR logExpA 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1,e2,"OR"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // logExpO ::= logExpO OR VAR 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1, new ExpVar(e2),"OR"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logExpO ::= VAR OR logExpA 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(new ExpVar(e1),e2,"OR"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logExpO ::= VAR OR VAR 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(new ExpVar(e1), new ExpVar(e2), "OR"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logExpO ::= logExpA 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // logExpA ::= logExpA AND logExpN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1,e2,"AND"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // logExpA ::= logExpA AND VAR 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1,new ExpVar(e2),"AND"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // logExpA ::= VAR AND logExpN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(new ExpVar(e1), e2, "AND"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logExpA ::= VAR AND VAR 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(new ExpVar(e1), new ExpVar(e2), "AND"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logExpA ::= logExpN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logExpN ::= NOT logExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e,e,"NOT"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpN",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logExpN ::= NOT VAR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(new ExpVar(v), new ExpVar(v), "NOT"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpN",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logExpN ::= logFactor 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpN",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logFactor ::= logExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logFactor ::= LPAREN logExpO RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logFactor ::= BOOLLIT 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitBool(b);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logFactor ::= ISPAIR LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpIsPair(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logFactor ::= ISEQ LPAREN exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpIsEq(e1, e2);  
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logFactor ::= ISEQV LPAREN exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpIsEqv(e1, e2); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ifTheno ::= IF logExpO THEN exptop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
						//changed logExp to logExpO
			ArrayList<Exp> result = new ArrayList<>(); 
				result.add(e);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ifTheno ::= IF logExpO THEN expc ELSE expo 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ifTheno ::= IF VAR THEN exptop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
						//changed logExp to logExpO
			ArrayList<Exp> result = new ArrayList<>(); 
				result.add(e);
				RESULT = new ExpIfThen(result,new ExpVar(l));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ifTheno ::= IF VAR THEN expc ELSE expo 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,new ExpVar(l));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ifThenc ::= IF logExpO THEN expc ELSE expc 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 	//changed logExp to logExpO
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifThenc",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ifThenc ::= IF VAR THEN expc ELSE expc 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 	//changed logExp to logExpO
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result, new ExpVar(l));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifThenc",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // case ::= CASE LBRACE predList RBRACE 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<ExpCClause> plst = (ArrayList<ExpCClause>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCase(plst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("case",32, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expSeq ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence alst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = alst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expSeq",33, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // mulExp ::= LPAREN multiArgList RPAREN 
            {
              Exp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new MultiValExp(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("mulExp",34, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // def ::= DEF VAR expOrLog 
            {
              StmtExpDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new StmtExpDefn(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("def",31, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // definition ::= VAR ASSIGN expOrLog 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // definition ::= vectorCall ASSIGN expOrLog 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ExpVecCall v = (ExpVecCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // print ::= PRINT LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPrint(e,"block"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("print",35, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // print ::= PRINTLN LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPrint(e,"ln"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("print",35, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // read ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead("string"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("read",36, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // read ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		RESULT = new ExpRead("int"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("read",36, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comment ::= LCOM STRING NL 
            {
              Exp RESULT =null;
		RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comment",37, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comment ::= BCOMS STRING BCOME 
            {
              Exp RESULT =null;
		RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comment",37, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // multiArgList ::= argList COMMA exptop 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			lst.add(e);
			RESULT = lst;
	
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("multiArgList",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // argList ::= argList COMMA exptop 
            {
              ArrayList<Exp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		alst.add(e);
			RESULT = alst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // argList ::= exptop 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // argListE ::= argList 
            {
              ArrayList<Exp> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT=al;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",17, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // argListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 
				ArrayList<Exp> result = new ArrayList<>();
				RESULT = result; 
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",17, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // funCall ::= VAR LPAREN argListE RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> ae = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		
			RESULT = new ExpFunCall(v,ae); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funCall",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bitexp ::= bitexp AMP expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(b,e,BitwiseOp.AND); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bitexp ::= bitexp BAR expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(b,e,BitwiseOp.OR); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bitexp ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= TILDE atom 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(a,a,BitwiseOp.NOT); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // factor ::= LPAREN MINUS exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT =new ExpNegate(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // factor ::= atom AT factor 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpConcat(a,f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // factor ::= atom POW factor 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpPow(a,f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // factor ::= atom 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = a; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // atom ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitInt(ilit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // atom ::= FLOAT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpLitDouble(ilit);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // atom ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // atom ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitString(s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // atom ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitChar(c); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // atom ::= LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // atom ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // atom ::= case 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // atom ::= let 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // atom ::= read 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = r; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // atom ::= builtin 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = b; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // atom ::= expSeq 
            {
              Exp RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp seq = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT =seq; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // atom ::= mulExp 
            {
              Exp RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp mul = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = mul; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // empty ::= 
            {
              Object RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("empty",47, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ArithParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
              return CUP$ArithParser$do_action_part00000000(
                               CUP$ArithParser$act_num,
                               CUP$ArithParser$parser,
                               CUP$ArithParser$stack,
                               CUP$ArithParser$top);
    }
}

}
