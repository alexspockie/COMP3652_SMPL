
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ArithParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ArithParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ArithParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArithParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\052\003\000\002\053\003\000\002\053" +
    "\003\000\002\054\004\000\002\054\003\000\002\020\005" +
    "\000\002\020\003\000\002\020\002\000\002\021\003\000" +
    "\002\021\003\000\002\024\005\000\002\025\005\000\002" +
    "\025\003\000\002\025\002\000\002\026\006\000\002\026" +
    "\006\000\002\027\004\000\002\027\003\000\002\030\005" +
    "\000\002\031\007\000\002\031\005\000\002\035\005\000" +
    "\002\036\005\000\002\036\003\000\002\032\006\000\002" +
    "\033\005\000\002\033\007\000\002\033\011\000\002\034" +
    "\010\000\002\034\010\000\002\037\007\000\002\013\005" +
    "\000\002\013\005\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\003\000\002\016\004\000\002" +
    "\016\003\000\002\017\003\000\002\017\005\000\002\017" +
    "\003\000\002\011\006\000\002\011\010\000\002\012\010" +
    "\000\002\041\006\000\002\042\005\000\002\043\005\000" +
    "\002\040\005\000\002\005\005\000\002\044\006\000\002" +
    "\044\006\000\002\045\005\000\002\045\005\000\002\046" +
    "\005\000\002\046\005\000\002\022\005\000\002\022\003" +
    "\000\002\022\002\000\002\023\003\000\002\023\003\000" +
    "\002\007\006\000\002\047\005\000\002\047\005\000\002" +
    "\047\003\000\002\050\005\000\002\050\005\000\002\050" +
    "\003\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\003\000\002\056\004\000\002\056\005\000" +
    "\002\056\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\005\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\060\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\036\004\040\006\037\007\030\010\012\013" +
    "\035\014\004\015\043\016\034\017\027\020\014\050\017" +
    "\055\007\056\045\061\024\001\002\000\004\020\223\001" +
    "\002\000\050\002\uffaa\011\uffaa\012\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\031\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\221\043\uffaa\044\uffaa\046\uffaa\047\uffaa\057\uffaa" +
    "\060\uffaa\001\002\000\004\022\220\001\002\000\050\002" +
    "\uffa9\011\uffa9\012\uffa9\021\uffa9\022\uffa9\023\uffa9\031\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\043" +
    "\uffa9\044\uffa9\046\uffa9\047\uffa9\057\uffa9\060\uffa9\001\002" +
    "\000\026\002\ufff7\011\ufff7\021\ufff7\022\ufff7\023\ufff7\031" +
    "\ufff7\043\ufff7\044\ufff7\057\ufff7\060\ufff7\001\002\000\004" +
    "\022\217\001\002\000\034\004\040\006\037\010\012\013" +
    "\035\014\004\015\043\020\117\045\120\050\017\055\007" +
    "\056\055\061\024\064\115\001\002\000\034\002\ufff3\011" +
    "\ufff3\012\ufff3\021\ufff3\022\ufff3\023\ufff3\031\ufff3\043\ufff3" +
    "\044\ufff3\046\204\047\205\057\ufff3\060\ufff3\001\002\000" +
    "\030\004\040\006\037\010\012\013\035\014\004\015\043" +
    "\020\014\050\017\055\007\056\055\061\024\001\002\000" +
    "\004\002\202\001\002\000\050\002\uffa4\011\uffa4\012\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\031\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\043\uffa4\044\uffa4\046\uffa4" +
    "\047\uffa4\057\uffa4\060\uffa4\001\002\000\022\006\037\013" +
    "\035\014\004\015\043\020\014\055\007\056\055\061\024" +
    "\001\002\000\026\002\ufff5\011\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\031\ufff5\043\ufff5\044\ufff5\057\ufff5\060\ufff5\001\002" +
    "\000\026\002\ufff6\011\ufff6\021\ufff6\022\ufff6\023\ufff6\031" +
    "\ufff6\043\ufff6\044\ufff6\057\ufff6\060\ufff6\001\002\000\026" +
    "\002\ufff4\011\ufff4\021\ufff4\022\ufff4\023\ufff4\031\ufff4\043" +
    "\ufff4\044\ufff4\057\ufff4\060\ufff4\001\002\000\004\022\200" +
    "\001\002\000\050\002\uffa8\011\uffa8\012\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\031\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\043\uffa8\044\uffa8\046\uffa8\047\uffa8\057" +
    "\uffa8\060\uffa8\001\002\000\040\002\uffb4\011\uffb4\012\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\031\uffb4\034\174\035\175\043" +
    "\uffb4\044\uffb4\046\uffb4\047\uffb4\057\uffb4\060\uffb4\001\002" +
    "\000\046\002\uffad\011\uffad\012\uffad\021\uffad\022\uffad\023" +
    "\uffad\031\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\043\uffad\044\uffad\046\uffad\047\uffad\057\uffad\060\uffad\001" +
    "\002\000\004\020\171\001\002\000\004\056\167\001\002" +
    "\000\006\002\uffff\022\051\001\002\000\046\002\uffb1\011" +
    "\uffb1\012\uffb1\021\uffb1\022\uffb1\023\uffb1\031\uffb1\034\uffb1" +
    "\035\uffb1\036\162\037\163\040\161\043\uffb1\044\uffb1\046" +
    "\uffb1\047\uffb1\057\uffb1\060\uffb1\001\002\000\050\002\uffa3" +
    "\011\uffa3\012\uffa3\021\uffa3\022\uffa3\023\uffa3\031\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\043\uffa3" +
    "\044\uffa3\046\uffa3\047\uffa3\057\uffa3\060\uffa3\001\002\000" +
    "\004\020\156\001\002\000\004\027\114\001\002\000\050" +
    "\002\uffa2\011\uffa2\012\uffa2\021\uffa2\022\uffa2\023\uffa2\031" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\043\uffa2\044\uffa2\046\uffa2\047\uffa2\057\uffa2\060\uffa2\001" +
    "\002\000\004\020\102\001\002\000\006\020\066\056\065" +
    "\001\002\000\030\002\ufff2\011\ufff2\012\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\031\ufff2\043\ufff2\044\ufff2\057\ufff2\060\ufff2" +
    "\001\002\000\050\002\uffa5\011\uffa5\012\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\031\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\043\uffa5\044\uffa5\046\uffa5\047\uffa5\057" +
    "\uffa5\060\uffa5\001\002\000\004\020\063\001\002\000\106" +
    "\002\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\031\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\043\ufffc\044\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\055\ufffc\056\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\001\002\000\032\002\uffa7\020\052\022\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\053\046\uffa7\047\uffa7\001\002\000\040\002\001\004\040" +
    "\006\037\007\030\010\012\013\035\014\004\015\043\016" +
    "\034\017\027\020\014\050\017\055\007\056\045\061\024" +
    "\001\002\000\006\002\ufffe\022\051\001\002\000\106\002" +
    "\ufffd\004\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\041\ufffd\043\ufffd\044\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\001\002\000\106\002\ufffa\004\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\031" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\043\ufffa\044\ufffa\046\ufffa\047\ufffa\050\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\001\002\000\034" +
    "\004\040\006\037\010\012\013\035\014\004\015\043\020" +
    "\014\021\uffba\031\uffba\050\017\055\007\056\055\061\024" +
    "\001\002\000\030\004\040\006\037\010\012\013\035\014" +
    "\004\015\043\020\014\050\017\055\007\056\055\061\024" +
    "\001\002\000\004\022\uffc3\001\002\000\052\002\uffa7\011" +
    "\uffa7\012\uffa7\020\052\021\uffa7\022\uffa7\023\uffa7\031\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\043" +
    "\uffa7\044\uffa7\046\uffa7\047\uffa7\057\uffa7\060\uffa7\001\002" +
    "\000\006\021\061\031\060\001\002\000\006\021\uffbb\031" +
    "\uffbb\001\002\000\030\004\040\006\037\010\012\013\035" +
    "\014\004\015\043\020\014\050\017\055\007\056\055\061" +
    "\024\001\002\000\050\002\uffb7\011\uffb7\012\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\031\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\043\uffb7\044\uffb7\046\uffb7\047\uffb7" +
    "\057\uffb7\060\uffb7\001\002\000\006\021\uffbc\031\uffbc\001" +
    "\002\000\004\021\064\001\002\000\050\002\uffbf\011\uffbf" +
    "\012\uffbf\021\uffbf\022\uffbf\023\uffbf\031\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf" +
    "\046\uffbf\047\uffbf\057\uffbf\060\uffbf\001\002\000\036\004" +
    "\040\006\037\007\030\010\012\013\035\014\004\015\043" +
    "\016\034\017\027\020\014\050\017\055\007\056\045\061" +
    "\024\001\002\000\010\021\uffed\031\uffed\056\067\001\002" +
    "\000\006\021\uffee\031\uffee\001\002\000\006\021\072\031" +
    "\071\001\002\000\004\056\100\001\002\000\032\004\040" +
    "\006\037\010\012\013\035\014\004\015\043\020\014\032" +
    "\073\050\017\055\007\056\055\061\024\001\002\000\036" +
    "\004\040\006\037\007\030\010\012\013\035\014\004\015" +
    "\043\016\034\017\027\020\014\050\017\055\007\056\045" +
    "\061\024\001\002\000\026\002\uffda\011\uffda\021\uffda\022" +
    "\uffda\023\uffda\031\uffda\043\uffda\044\uffda\057\uffda\060\uffda" +
    "\001\002\000\004\022\051\001\002\000\040\004\040\006" +
    "\037\007\030\010\012\013\035\014\004\015\043\016\034" +
    "\017\027\020\014\033\077\050\017\055\007\056\045\061" +
    "\024\001\002\000\026\002\uffd9\011\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\031\uffd9\043\uffd9\044\uffd9\057\uffd9\060\uffd9\001" +
    "\002\000\006\021\uffef\031\uffef\001\002\000\062\002\uffdb" +
    "\004\040\006\037\007\030\010\012\011\uffdb\013\035\014" +
    "\004\015\043\016\034\017\027\020\014\021\uffdb\022\uffdb" +
    "\023\uffdb\031\uffdb\043\uffdb\044\uffdb\050\017\055\007\056" +
    "\045\057\uffdb\060\uffdb\061\024\001\002\000\010\021\uffe7" +
    "\031\uffe7\056\103\001\002\000\004\060\112\001\002\000" +
    "\006\021\107\031\106\001\002\000\006\021\uffe8\031\uffe8" +
    "\001\002\000\004\056\103\001\002\000\036\004\040\006" +
    "\037\007\030\010\012\013\035\014\004\015\043\016\034" +
    "\017\027\020\014\050\017\055\007\056\045\061\024\001" +
    "\002\000\104\002\uffd6\004\040\006\037\007\030\010\012" +
    "\011\uffd6\012\uffd6\013\035\014\004\015\043\016\034\017" +
    "\027\020\014\021\uffd6\022\uffd6\023\uffd6\031\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044" +
    "\uffd6\046\uffd6\047\uffd6\050\017\055\007\056\045\057\uffd6" +
    "\060\uffd6\061\024\001\002\000\006\021\uffe9\031\uffe9\001" +
    "\002\000\030\004\040\006\037\010\012\013\035\014\004" +
    "\015\043\020\014\050\017\055\007\056\055\061\024\001" +
    "\002\000\006\021\uffea\031\uffea\001\002\000\036\004\040" +
    "\006\037\010\012\012\127\013\035\014\004\015\043\020" +
    "\117\045\120\050\017\055\007\056\055\061\024\064\115" +
    "\001\002\000\014\011\uffcb\021\uffcb\023\uffcb\043\uffcb\044" +
    "\uffcb\001\002\000\040\004\040\006\037\010\012\012\127" +
    "\013\035\014\004\015\043\020\117\030\155\045\120\050" +
    "\017\055\007\056\055\061\024\064\115\001\002\000\034" +
    "\004\040\006\037\010\012\013\035\014\004\015\043\020" +
    "\117\045\120\050\017\055\007\056\055\061\024\064\115" +
    "\001\002\000\030\004\040\006\037\010\012\013\035\014" +
    "\004\015\043\020\014\050\017\055\007\056\055\061\024" +
    "\001\002\000\014\011\uffcd\021\uffcd\023\uffcd\043\uffcd\044" +
    "\uffcd\001\002\000\014\011\uffce\021\uffce\023\uffce\043\uffce" +
    "\044\uffce\001\002\000\006\023\142\044\143\001\002\000" +
    "\006\057\137\060\136\001\002\000\014\011\uffd0\021\uffd0" +
    "\023\uffd0\043\uffd0\044\uffd0\001\002\000\014\011\uffd2\021" +
    "\uffd2\023\uffd2\043\134\044\uffd2\001\002\000\004\023\131" +
    "\001\002\000\040\004\uffe3\006\uffe3\010\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\020\uffe3\030\uffe3\045\uffe3\050\uffe3" +
    "\055\uffe3\056\uffe3\061\uffe3\064\uffe3\001\002\000\030\004" +
    "\040\006\037\010\012\013\035\014\004\015\043\020\014" +
    "\050\017\055\007\056\055\061\024\001\002\000\004\022" +
    "\133\001\002\000\040\004\uffe5\006\uffe5\010\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\020\uffe5\030\uffe5\045\uffe5\050" +
    "\uffe5\055\uffe5\056\uffe5\061\uffe5\064\uffe5\001\002\000\034" +
    "\004\040\006\037\010\012\013\035\014\004\015\043\020" +
    "\117\045\120\050\017\055\007\056\055\061\024\064\115" +
    "\001\002\000\014\011\uffd1\021\uffd1\023\uffd1\043\uffd1\044" +
    "\uffd1\001\002\000\030\004\040\006\037\010\012\013\035" +
    "\014\004\015\043\020\014\050\017\055\007\056\055\061" +
    "\024\001\002\000\030\004\040\006\037\010\012\013\035" +
    "\014\004\015\043\020\014\050\017\055\007\056\055\061" +
    "\024\001\002\000\014\011\uffd5\021\uffd5\023\uffd5\043\uffd5" +
    "\044\uffd5\001\002\000\014\011\uffd4\021\uffd4\023\uffd4\043" +
    "\uffd4\044\uffd4\001\002\000\030\004\040\006\037\010\012" +
    "\013\035\014\004\015\043\020\014\050\017\055\007\056" +
    "\055\061\024\001\002\000\034\004\040\006\037\010\012" +
    "\013\035\014\004\015\043\020\117\045\120\050\017\055" +
    "\007\056\055\061\024\064\115\001\002\000\014\011\uffd3" +
    "\021\uffd3\023\uffd3\043\134\044\uffd3\001\002\000\004\022" +
    "\146\001\002\000\040\004\uffe6\006\uffe6\010\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\020\uffe6\030\uffe6\045\uffe6\050" +
    "\uffe6\055\uffe6\056\uffe6\061\uffe6\064\uffe6\001\002\000\014" +
    "\011\uffcf\021\uffcf\023\uffcf\043\uffcf\044\uffcf\001\002\000" +
    "\010\021\153\057\137\060\136\001\002\000\006\021\152" +
    "\044\143\001\002\000\014\011\uffcc\021\uffcc\023\uffcc\043" +
    "\uffcc\044\uffcc\001\002\000\050\002\uffa6\011\uffa6\012\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\031\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\043\uffa6\044\uffa6\046\uffa6" +
    "\047\uffa6\057\uffa6\060\uffa6\001\002\000\040\004\uffe4\006" +
    "\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\020\uffe4" +
    "\030\uffe4\045\uffe4\050\uffe4\055\uffe4\056\uffe4\061\uffe4\064" +
    "\uffe4\001\002\000\050\002\uffc7\011\uffc7\012\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\031\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\046\uffc7\047\uffc7" +
    "\057\uffc7\060\uffc7\001\002\000\030\004\040\006\037\010" +
    "\012\013\035\014\004\015\043\020\014\050\017\055\007" +
    "\056\055\061\024\001\002\000\004\021\160\001\002\000" +
    "\004\022\uffc2\001\002\000\024\006\037\013\035\014\004" +
    "\015\043\020\014\050\017\055\007\056\055\061\024\001" +
    "\002\000\024\006\037\013\035\014\004\015\043\020\014" +
    "\050\017\055\007\056\055\061\024\001\002\000\024\006" +
    "\037\013\035\014\004\015\043\020\014\050\017\055\007" +
    "\056\055\061\024\001\002\000\046\002\uffaf\011\uffaf\012" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\031\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\043\uffaf\044\uffaf\046\uffaf\047" +
    "\uffaf\057\uffaf\060\uffaf\001\002\000\046\002\uffb0\011\uffb0" +
    "\012\uffb0\021\uffb0\022\uffb0\023\uffb0\031\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\043\uffb0\044\uffb0\046\uffb0" +
    "\047\uffb0\057\uffb0\060\uffb0\001\002\000\046\002\uffae\011" +
    "\uffae\012\uffae\021\uffae\022\uffae\023\uffae\031\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\043\uffae\044\uffae\046" +
    "\uffae\047\uffae\057\uffae\060\uffae\001\002\000\030\004\040" +
    "\006\037\010\012\013\035\014\004\015\043\020\014\050" +
    "\017\055\007\056\055\061\024\001\002\000\004\022\uffc4" +
    "\001\002\000\030\004\040\006\037\010\012\013\035\014" +
    "\004\015\043\020\014\050\017\055\007\056\055\061\024" +
    "\001\002\000\004\021\173\001\002\000\004\022\uffc1\001" +
    "\002\000\024\006\037\013\035\014\004\015\043\020\014" +
    "\050\017\055\007\056\055\061\024\001\002\000\024\006" +
    "\037\013\035\014\004\015\043\020\014\050\017\055\007" +
    "\056\055\061\024\001\002\000\046\002\uffb2\011\uffb2\012" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\031\uffb2\034\uffb2\035\uffb2" +
    "\036\162\037\163\040\161\043\uffb2\044\uffb2\046\uffb2\047" +
    "\uffb2\057\uffb2\060\uffb2\001\002\000\046\002\uffb3\011\uffb3" +
    "\012\uffb3\021\uffb3\022\uffb3\023\uffb3\031\uffb3\034\uffb3\035" +
    "\uffb3\036\162\037\163\040\161\043\uffb3\044\uffb3\046\uffb3" +
    "\047\uffb3\057\uffb3\060\uffb3\001\002\000\106\002\ufff9\004" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\001\002\000\046\002\uffac\011\uffac\012\uffac\021\uffac\022" +
    "\uffac\023\uffac\031\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\043\uffac\044\uffac\046\uffac\047\uffac\057\uffac\060" +
    "\uffac\001\002\000\004\002\000\001\002\000\004\021\153" +
    "\001\002\000\024\006\037\013\035\014\004\015\043\020" +
    "\014\050\017\055\007\056\055\061\024\001\002\000\024" +
    "\006\037\013\035\014\004\015\043\020\014\050\017\055" +
    "\007\056\055\061\024\001\002\000\040\002\uffb5\011\uffb5" +
    "\012\uffb5\021\uffb5\022\uffb5\023\uffb5\031\uffb5\034\174\035" +
    "\175\043\uffb5\044\uffb5\046\uffb5\047\uffb5\057\uffb5\060\uffb5" +
    "\001\002\000\040\002\uffb6\011\uffb6\012\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\031\uffb6\034\174\035\175\043\uffb6\044\uffb6" +
    "\046\uffb6\047\uffb6\057\uffb6\060\uffb6\001\002\000\006\011" +
    "\211\044\143\001\002\000\030\004\040\006\037\010\012" +
    "\013\035\014\004\015\043\020\014\050\017\055\007\056" +
    "\055\061\024\001\002\000\030\002\ufff6\011\ufff6\012\214" +
    "\021\ufff6\022\ufff6\023\ufff6\031\ufff6\043\ufff6\044\ufff6\057" +
    "\ufff6\060\ufff6\001\002\000\026\002\uffca\011\uffca\021\uffca" +
    "\022\uffca\023\uffca\031\uffca\043\uffca\044\uffca\057\uffca\060" +
    "\uffca\001\002\000\026\006\037\010\012\013\035\014\004" +
    "\015\043\020\014\050\017\055\007\056\055\061\024\001" +
    "\002\000\026\002\uffc9\011\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\031\uffc9\043\uffc9\044\uffc9\057\uffc9\060\uffc9\001\002\000" +
    "\030\002\uffc8\011\uffc8\012\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\031\uffc8\043\uffc8\044\uffc8\057\uffc8\060\uffc8\001\002\000" +
    "\106\002\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\031\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\043\ufffb\044" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\060\ufffb\061\ufffb\001\002\000\106\002\ufff8\004\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\043\ufff8\044\ufff8\046\ufff8\047\ufff8\050" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\001\002" +
    "\000\024\006\037\013\035\014\004\015\043\020\014\050" +
    "\017\055\007\056\055\061\024\001\002\000\046\002\uffab" +
    "\011\uffab\012\uffab\021\uffab\022\uffab\023\uffab\031\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\043\uffab\044\uffab" +
    "\046\uffab\047\uffab\057\uffab\060\uffab\001\002\000\004\021" +
    "\224\001\002\000\050\002\uffc0\011\uffc0\012\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\031\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\043\uffc0\044\uffc0\046\uffc0\047\uffc0" +
    "\057\uffc0\060\uffc0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\054\002\014\003\045\004\043\005\010\007" +
    "\041\011\021\012\040\033\017\037\032\040\022\041\015" +
    "\044\005\045\035\047\012\050\024\051\030\052\007\053" +
    "\020\055\031\056\025\057\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\007\041\011\021" +
    "\012\040\013\120\014\207\015\125\016\124\017\121\033" +
    "\017\037\032\041\015\045\035\047\012\050\024\051\123" +
    "\052\007\053\020\055\031\056\025\057\004\001\001\000" +
    "\002\001\001\000\040\007\041\011\021\012\040\033\017" +
    "\037\032\041\015\045\035\047\012\050\024\051\202\052" +
    "\007\053\020\055\031\056\025\057\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\041\037\032\041" +
    "\015\045\035\057\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\004\047\005\010\007\041\011" +
    "\021\012\040\033\017\037\032\040\022\041\015\044\005" +
    "\045\035\047\012\050\024\051\046\052\007\053\020\055" +
    "\031\056\025\057\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\007\041\011\021\012" +
    "\040\022\055\033\017\037\032\041\015\045\035\047\012" +
    "\050\024\051\056\052\007\053\020\055\031\056\025\057" +
    "\004\001\001\000\040\007\041\011\021\012\040\033\017" +
    "\037\032\041\015\045\035\047\012\050\024\051\053\052" +
    "\007\053\020\055\031\056\025\057\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\007\041\011\021\012\040\033\017\037\032" +
    "\041\015\045\035\047\012\050\024\051\061\052\007\053" +
    "\020\055\031\056\025\057\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\100\004\043\005\010\007\041\011\021\012\040" +
    "\033\017\037\032\040\022\041\015\044\005\045\035\047" +
    "\012\050\024\051\074\052\007\053\020\055\031\056\025" +
    "\057\004\001\001\000\004\020\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\007\041" +
    "\011\021\012\040\033\017\037\032\041\015\045\035\047" +
    "\012\050\024\051\073\052\007\053\020\055\031\056\025" +
    "\057\004\001\001\000\052\003\075\004\043\005\010\007" +
    "\041\011\021\012\040\033\017\037\032\040\022\041\015" +
    "\044\005\045\035\047\012\050\024\051\074\052\007\053" +
    "\020\055\031\056\025\057\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\004\047\005\010\007\041\011" +
    "\021\012\040\033\017\037\032\040\022\041\015\044\005" +
    "\045\035\047\012\050\024\051\074\052\007\053\020\055" +
    "\031\056\025\057\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\004\047\005\010\007\041\011\021\012" +
    "\040\033\017\037\032\040\022\041\015\044\005\045\035" +
    "\047\012\050\024\051\074\052\007\053\020\055\031\056" +
    "\025\057\004\001\001\000\006\024\104\025\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\110\001\001\000\052\003\107\004\043\005\010" +
    "\007\041\011\021\012\040\033\017\037\032\040\022\041" +
    "\015\044\005\045\035\047\012\050\024\051\074\052\007" +
    "\053\020\055\031\056\025\057\004\001\001\000\050\004" +
    "\047\005\010\007\041\011\021\012\040\033\017\037\032" +
    "\040\022\041\015\044\005\045\035\047\012\050\024\051" +
    "\074\052\007\053\020\055\031\056\025\057\004\001\001" +
    "\000\002\001\001\000\040\007\041\011\021\012\040\033" +
    "\017\037\032\041\015\045\035\047\012\050\024\051\112" +
    "\052\007\053\020\055\031\056\025\057\004\001\001\000" +
    "\002\001\001\000\056\007\041\011\021\012\040\013\120" +
    "\014\122\015\125\016\124\017\121\026\127\027\115\033" +
    "\017\037\032\041\015\045\035\047\012\050\024\051\123" +
    "\052\007\053\020\055\031\056\025\057\004\001\001\000" +
    "\002\001\001\000\054\007\041\011\021\012\040\013\120" +
    "\014\122\015\125\016\124\017\121\026\153\033\017\037" +
    "\032\041\015\045\035\047\012\050\024\051\123\052\007" +
    "\053\020\055\031\056\025\057\004\001\001\000\052\007" +
    "\041\011\021\012\040\013\120\014\150\015\125\016\124" +
    "\017\121\033\017\037\032\041\015\045\035\047\012\050" +
    "\024\051\147\052\007\053\020\055\031\056\025\057\004" +
    "\001\001\000\042\007\041\011\021\012\040\013\146\033" +
    "\017\037\032\041\015\045\035\047\012\050\024\051\123" +
    "\052\007\053\020\055\031\056\025\057\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\007\041\011\021\012\040" +
    "\033\017\037\032\041\015\045\035\047\012\050\024\051" +
    "\131\052\007\053\020\055\031\056\025\057\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\007\041\011" +
    "\021\012\040\013\120\016\134\017\121\033\017\037\032" +
    "\041\015\045\035\047\012\050\024\051\123\052\007\053" +
    "\020\055\031\056\025\057\004\001\001\000\002\001\001" +
    "\000\040\007\041\011\021\012\040\033\017\037\032\041" +
    "\015\045\035\047\012\050\024\051\140\052\007\053\020" +
    "\055\031\056\025\057\004\001\001\000\040\007\041\011" +
    "\021\012\040\033\017\037\032\041\015\045\035\047\012" +
    "\050\024\051\137\052\007\053\020\055\031\056\025\057" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\007\041\011\021\012\040\033\017\037\032\041\015\045" +
    "\035\047\012\050\024\051\144\052\007\053\020\055\031" +
    "\056\025\057\004\001\001\000\050\007\041\011\021\012" +
    "\040\013\120\015\143\016\124\017\121\033\017\037\032" +
    "\041\015\045\035\047\012\050\024\051\123\052\007\053" +
    "\020\055\031\056\025\057\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\007" +
    "\041\011\021\012\040\033\017\037\032\041\015\045\035" +
    "\047\012\050\024\051\156\052\007\053\020\055\031\056" +
    "\025\057\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\041\037\032\041\015\045\035\056\165\057" +
    "\004\001\001\000\016\007\041\037\032\041\015\045\035" +
    "\056\164\057\004\001\001\000\016\007\041\037\032\041" +
    "\015\045\035\056\163\057\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\007\041\011" +
    "\021\012\040\033\017\037\032\041\015\045\035\047\012" +
    "\050\024\051\167\052\007\053\020\055\031\056\025\057" +
    "\004\001\001\000\002\001\001\000\040\007\041\011\021" +
    "\012\040\033\017\037\032\041\015\045\035\047\012\050" +
    "\024\051\171\052\007\053\020\055\031\056\025\057\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\041\037\032\041\015\045\035\055\176\056\025\057\004" +
    "\001\001\000\020\007\041\037\032\041\015\045\035\055" +
    "\175\056\025\057\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\041\037\032\041\015" +
    "\045\035\050\206\055\031\056\025\057\004\001\001\000" +
    "\022\007\041\037\032\041\015\045\035\050\205\055\031" +
    "\056\025\057\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\007\041\011\021\012\040" +
    "\033\017\037\032\041\015\045\035\047\012\050\024\051" +
    "\212\052\007\053\211\055\031\056\025\057\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\041\011" +
    "\021\012\040\037\032\041\015\045\035\047\012\050\024" +
    "\052\214\053\215\055\031\056\025\057\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\041\037\032\041\015\045\035\056" +
    "\221\057\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArithParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArithParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArithParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ArithParser$actions {
  private final ArithParser parser;

  /** Constructor */
  CUP$ArithParser$actions(ArithParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action_part00000000(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArithParser$result;

      /* select the action based on the action number */
      switch (CUP$ArithParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = start_val;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArithParser$parser.done_parsing();
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= exptop 
            {
              ArithProgram RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 Statement s = new Statement(e);
	 			StmtSequence ss = new StmtSequence(s);
	 			RESULT = new ArithProgram(ss); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= stmtList exptop 
            {
              ArithProgram RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			Statement s = new Statement(e);
			lst.add(s);
			RESULT = new ArithProgram(lst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= exptop SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= def SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtExpDefn d = (StmtExpDefn)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= print SEMI 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new Statement(p); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exptop ::= expo 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exptop ::= expc 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exptop ::= proc 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expo ::= ifTheno 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expo",40, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expc ::= bitexp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expc",41, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expc ::= ifThenc 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expc",41, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // explist ::= explist exptop 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			lst.add(e);
			RESULT = lst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("explist",42, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // explist ::= exptop 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("explist",42, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		plst.add(v);
			RESULT = plst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<String> result = new ArrayList<>();
				result.add(v);
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramList ::= 
            {
              ArrayList<String> RESULT =null;
		 ArrayList<String> result = new ArrayList<>();
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT=pl; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bind ::= VAR EQUAL exptop 
            {
              ExpBind RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpBind(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bind",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bindList ::= bindList COMMA bind 
            {
              ArrayList<ExpBind> RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<ExpBind> blst = (ArrayList<ExpBind>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpBind b = (ExpBind)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 blst.add(b);
			RESULT = blst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bindList ::= bind 
            {
              ArrayList<ExpBind> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpBind b = (ExpBind)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<ExpBind> result = new ArrayList<>();
				result.add(b); //changed from arraylist <string> to arraylist<expbind>
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bindList ::= 
            {
              ArrayList<ExpBind> RESULT =null;
		 ArrayList<ExpBind> result = new ArrayList<>();
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pred ::= logExpO COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(l,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // pred ::= ELSE COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // predList ::= predList pred 
            {
              ArrayList<ExpCClause> RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<ExpCClause> plst = (ArrayList<ExpCClause>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpCClause p = (ExpCClause)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 plst.add(p);
			RESULT = plst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("predList",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // predList ::= pred 
            {
              ArrayList<ExpCClause> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpCClause p = (ExpCClause)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<ExpCClause> result = new ArrayList<>();
				result.add(p);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("predList",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list ::= LBRACKET argListE RBRACKET 
            {
              ExpList RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpList(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("list",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vector ::= LBRACKET COLON argListE COLON RBRACKET 
            {
              ExpVector RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		 RESULT = new ExpVector(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vector",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vector ::= LBRACKET sizeList RBRACKET 
            {
              ExpVector RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> slst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vector",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // size ::= exptop COLON exptop 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpSize(e1,e2); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("size",27, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sizeList ::= sizeList COMMA size 
            {
              ArrayList<Exp> RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> slst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 slst.add(s);
			RESULT = slst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("sizeList",28, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sizeList ::= size 
            {
              ArrayList<Exp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<Exp> result = new ArrayList<>();
				result.add(s);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("sizeList",28, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vectorCall ::= vector LBRACKET exptop RBRACKET 
            {
              ExpVecCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		ExpVector v = (ExpVector)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpVecCall(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vectorCall",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // proc ::= PROC VAR stmtList 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",25, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // proc ::= PROC LPAREN paramList RPAREN exptop 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpProcedure(plst,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",25, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // proc ::= PROC LPAREN paramList RPAREN LBRACKET stmtList RBRACKET 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",25, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // call ::= CALL LPAREN VAR COMMA list RPAREN 
            {
              ExpCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ExpList lst = (ExpList)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT=new ExpCall(new ExpVar(v),lst);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("call",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // call ::= CALL LPAREN VAR COMMA VAR RPAREN 
            {
              ExpCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String lst = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT=new ExpCall(new ExpVar(v),new ExpVar(lst));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("call",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // let ::= LET LPAREN bindList RPAREN stmtList 
            {
              Exp RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<ExpBind> blst = (ArrayList<ExpBind>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLet(blst,body); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("let",29, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // logExp ::= exptop COMPARISON exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				RESULT = new ExpCompare(e,e2,c);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExp",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // logExp ::= exptop EQUAL exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				RESULT = new ExpCompare(e,e2,c);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExp",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logExpO ::= logExpO OR logExpA 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1,e2,"OR"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logExpO ::= logExpA 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logExpA ::= logExpA AND logExpN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1,e2,"AND"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logExpA ::= logExpN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logExpN ::= NOT logExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e,e,"NOT"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpN",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logExpN ::= logFactor 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpN",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logFactor ::= logExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logFactor ::= LPAREN logExpO RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logFactor ::= BOOLLIT 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			Exp result;
			if (b)
				result = new ExpLitDouble(1D);
			else
				result = new ExpLitDouble(0D);
			RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ifTheno ::= IF logExpO THEN exptop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
						//changed logExp to logExpO
			ArrayList<Exp> result = new ArrayList<>(); 
				result.add(e);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ifTheno ::= IF logExpO THEN expc ELSE expo 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ifThenc ::= IF logExpO THEN expc ELSE expc 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 	//changed logExp to logExpO
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifThenc",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // case ::= CASE LBRACE predList RBRACE 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<ExpCClause> plst = (ArrayList<ExpCClause>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCase(plst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("case",31, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expSeq ::= LBRACE argList RBRACE 
            {
              Exp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpSequence(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expSeq",32, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // mulExp ::= LPAREN argList RPAREN 
            {
              Exp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new MultiValExp(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("mulExp",33, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // def ::= DEF VAR exptop 
            {
              StmtExpDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new StmtExpDefn(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("def",30, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // definition ::= VAR ASSIGN exptop 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // print ::= PRINT LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPrint(e,"block"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("print",34, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // print ::= PRINTLN LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPrint(e,"ln"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("print",34, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // read ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead("string"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("read",35, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // read ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		RESULT = new ExpRead("int"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("read",35, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comment ::= LCOM STRING NL 
            {
              Exp RESULT =null;
		RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comment",36, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comment ::= BCOMS STRING BCOME 
            {
              Exp RESULT =null;
		RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comment",36, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // argList ::= argList COMMA exptop 
            {
              ArrayList<Exp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		alst.add(e);
			RESULT = alst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // argList ::= exptop 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // argList ::= 
            {
              ArrayList<Exp> RESULT =null;
		 ArrayList<Exp> result = new ArrayList<>();
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // argListE ::= argList 
            {
              ArrayList<Exp> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT=al;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",17, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // argListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		int emleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT=new ArrayList<>();
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",17, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // funCall ::= VAR LPAREN argList RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> ae = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		
			RESULT = new ExpFunCall(v,ae); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funCall",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bitexp ::= bitexp AMP expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(b,e,BitwiseOp.AND); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",37, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bitexp ::= bitexp BAR expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(b,e,BitwiseOp.OR); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",37, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bitexp ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",37, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= TILDE atom 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(a,a,BitwiseOp.NOT); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= atom POW factor 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpPow(a,f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= atom 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = a; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // atom ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitInt(ilit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // atom ::= FLOAT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpLitDouble(ilit);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // atom ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // atom ::= LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // atom ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // atom ::= case 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // atom ::= let 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // atom ::= read 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = r; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // empty ::= 
            {
              Object RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("empty",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ArithParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
              return CUP$ArithParser$do_action_part00000000(
                               CUP$ArithParser$act_num,
                               CUP$ArithParser$parser,
                               CUP$ArithParser$stack,
                               CUP$ArithParser$top);
    }
}

}
