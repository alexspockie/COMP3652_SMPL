
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ArithParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ArithParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ArithParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArithParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\062\003\000\002\062\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\052\003\000\002\053\003\000\002\053\003" +
    "\000\002\054\004\000\002\054\003\000\002\061\003\000" +
    "\002\061\010\000\002\061\006\000\002\061\006\000\002" +
    "\061\006\000\002\061\003\000\002\061\003\000\002\061" +
    "\012\000\002\020\005\000\002\020\003\000\002\020\002" +
    "\000\002\021\003\000\002\021\003\000\002\024\005\000" +
    "\002\025\005\000\002\025\003\000\002\025\002\000\002" +
    "\026\006\000\002\026\006\000\002\026\006\000\002\027" +
    "\004\000\002\027\003\000\002\030\005\000\002\030\006" +
    "\000\002\030\003\000\002\031\007\000\002\031\005\000" +
    "\002\035\005\000\002\036\005\000\002\036\003\000\002" +
    "\032\006\000\002\032\006\000\002\033\005\000\002\033" +
    "\007\000\002\033\011\000\002\034\010\000\002\034\010" +
    "\000\002\037\007\000\002\013\005\000\002\013\005\000" +
    "\002\014\005\000\002\014\003\000\002\015\005\000\002" +
    "\015\003\000\002\016\004\000\002\016\003\000\002\017" +
    "\003\000\002\017\005\000\002\017\003\000\002\017\006" +
    "\000\002\017\010\000\002\017\010\000\002\011\006\000" +
    "\002\011\010\000\002\011\006\000\002\011\010\000\002" +
    "\012\010\000\002\012\010\000\002\041\006\000\002\042" +
    "\005\000\002\043\005\000\002\040\005\000\002\005\005" +
    "\000\002\005\005\000\002\044\006\000\002\044\006\000" +
    "\002\045\005\000\002\045\005\000\002\046\005\000\002" +
    "\046\005\000\002\022\005\000\002\022\003\000\002\022" +
    "\002\000\002\023\003\000\002\007\006\000\002\047\005" +
    "\000\002\047\005\000\002\047\003\000\002\050\005\000" +
    "\002\050\005\000\002\050\003\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\003\000\002\056" +
    "\004\000\002\056\006\000\002\056\005\000\002\056\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\005\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\060\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\100\004\070\006\063\007\072\010\042\013" +
    "\016\014\056\015\013\016\100\017\022\020\020\025\075" +
    "\027\055\032\010\045\025\050\023\051\066\052\024\055" +
    "\052\056\053\057\057\060\103\061\015\062\017\063\046" +
    "\064\060\065\061\066\021\067\076\072\062\074\071\075" +
    "\004\001\002\000\020\002\uffbc\011\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\043\uffbc\044\uffbc\001\002\000\004\002\376\001" +
    "\002\000\052\002\uff94\011\uff94\012\uff94\021\uff94\022\uff94" +
    "\023\uff94\031\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\374\043\uff94\044\uff94\046\uff94\047\uff94" +
    "\070\uff94\071\uff94\001\002\000\054\002\uffe7\011\uffe7\012" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\031\uffe7\032\371\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043" +
    "\uffe7\044\uffe7\046\uffe7\047\uffe7\070\uffe7\071\uffe7\001\002" +
    "\000\066\004\070\006\063\010\042\013\016\014\056\015" +
    "\013\020\105\023\157\025\075\027\055\031\uffa4\032\010" +
    "\033\uffa4\050\023\051\066\052\024\056\053\061\015\062" +
    "\017\063\046\064\060\065\061\066\021\067\110\072\062" +
    "\074\071\001\002\000\102\002\001\004\070\006\063\007" +
    "\072\010\042\013\016\014\056\015\013\016\100\017\022" +
    "\020\020\025\075\027\055\032\010\045\025\050\023\051" +
    "\066\052\024\055\052\056\053\057\057\060\103\061\015" +
    "\062\017\063\046\064\060\065\061\066\021\067\076\072" +
    "\062\074\071\075\004\001\002\000\006\002\uffff\022\177" +
    "\001\002\000\004\020\365\001\002\000\004\022\364\001" +
    "\002\000\004\020\361\001\002\000\004\027\340\001\002" +
    "\000\004\020\335\001\002\000\074\004\070\006\063\010" +
    "\042\013\016\014\056\015\013\020\020\025\075\027\055" +
    "\032\010\035\125\045\025\050\023\051\066\052\024\055" +
    "\052\056\053\057\057\060\103\061\015\062\017\063\046" +
    "\064\060\065\061\066\021\067\110\072\062\074\071\075" +
    "\004\001\002\000\052\002\uff93\011\uff93\012\uff93\021\uff93" +
    "\022\uff93\023\uff93\031\uff93\033\uff93\034\uff93\035\uff93\036" +
    "\uff93\037\uff93\040\uff93\041\uff93\043\uff93\044\uff93\046\uff93" +
    "\047\uff93\070\uff93\071\uff93\001\002\000\004\020\327\001" +
    "\002\000\046\006\063\013\016\014\056\015\013\020\326" +
    "\025\075\027\055\032\010\056\053\061\015\062\017\063" +
    "\046\064\060\065\061\066\021\067\110\072\062\074\071" +
    "\001\002\000\004\074\323\001\002\000\060\004\070\006" +
    "\063\010\042\013\016\014\056\015\013\020\105\025\075" +
    "\027\055\032\010\050\023\051\066\052\024\056\053\061" +
    "\015\062\017\063\046\064\060\065\061\066\021\067\110" +
    "\072\062\074\071\001\002\000\020\002\uffbe\011\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\043\uffbe\044\uffbe\001\002\000\020" +
    "\002\uffbf\011\uffbf\021\uffbf\022\uffbf\023\uffbf\043\uffbf\044" +
    "\uffbf\001\002\000\052\002\uff8c\011\uff8c\012\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\031\uff8c\033\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\043\uff8c\044\uff8c\046\uff8c" +
    "\047\uff8c\070\uff8c\071\uff8c\001\002\000\004\022\321\001" +
    "\002\000\052\002\uff8a\011\uff8a\012\uff8a\021\uff8a\022\uff8a" +
    "\023\uff8a\031\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037" +
    "\uff8a\040\uff8a\041\uff8a\043\uff8a\044\uff8a\046\uff8a\047\uff8a" +
    "\070\uff8a\071\uff8a\001\002\000\052\002\uff8b\011\uff8b\012" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\031\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\043\uff8b\044" +
    "\uff8b\046\uff8b\047\uff8b\070\uff8b\071\uff8b\001\002\000\052" +
    "\002\uff8e\011\uff8e\012\uff8e\021\uff8e\022\uff8e\023\uff8e\031" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\043\uff8e\044\uff8e\046\uff8e\047\uff8e\070\uff8e\071" +
    "\uff8e\001\002\000\052\002\uffec\011\uffec\012\uffec\021\uffec" +
    "\022\uffec\023\uffec\031\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\043\uffec\044\uffec\046\uffec" +
    "\047\uffec\070\uffec\071\uffec\001\002\000\010\002\ufff6\022" +
    "\ufff6\044\306\001\002\000\012\002\ufff7\022\ufff7\070\173" +
    "\071\172\001\002\000\036\002\ufff0\011\ufff0\012\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\031\ufff0\033\ufff0\043\ufff0\044\ufff0" +
    "\046\315\047\316\070\ufff0\071\ufff0\001\002\000\020\002" +
    "\uffc1\011\uffc1\021\uffc1\022\uffc1\023\uffc1\043\uffc1\044\uffc1" +
    "\001\002\000\072\004\070\006\063\010\042\013\016\014" +
    "\056\015\013\020\020\025\075\027\055\032\010\045\025" +
    "\050\023\051\066\052\024\055\052\056\053\057\057\060" +
    "\103\061\015\062\017\063\046\064\060\065\061\066\021" +
    "\067\276\072\062\074\071\075\004\001\002\000\042\002" +
    "\uff9f\011\uff9f\012\uff9f\021\uff9f\022\uff9f\023\uff9f\031\uff9f" +
    "\033\uff9f\034\271\035\272\043\uff9f\044\uff9f\046\uff9f\047" +
    "\uff9f\070\uff9f\071\uff9f\001\002\000\052\002\uff89\011\uff89" +
    "\012\uff89\021\uff89\022\uff89\023\uff89\031\uff89\033\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\043\uff89" +
    "\044\uff89\046\uff89\047\uff89\070\uff89\071\uff89\001\002\000" +
    "\030\002\ufff3\011\ufff3\021\ufff3\022\ufff3\023\ufff3\031\ufff3" +
    "\033\ufff3\043\ufff3\044\ufff3\070\ufff3\071\ufff3\001\002\000" +
    "\004\020\266\001\002\000\042\002\uffe6\022\uffe6\023\uffe6" +
    "\031\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\264\046\uffe6\047\uffe6\070\uffe6\071\uffe6" +
    "\001\002\000\050\002\uff9c\011\uff9c\012\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\031\uff9c\033\uff9c\034\uff9c\035\uff9c\036\257" +
    "\037\260\040\256\043\uff9c\044\uff9c\046\uff9c\047\uff9c\070" +
    "\uff9c\071\uff9c\001\002\000\020\002\uffc3\011\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\043\253\044\uffc3\001\002\000\004\020" +
    "\250\001\002\000\004\020\243\001\002\000\030\002\ufff2" +
    "\011\ufff2\021\ufff2\022\ufff2\023\ufff2\031\ufff2\033\ufff2\043" +
    "\ufff2\044\ufff2\070\ufff2\071\ufff2\001\002\000\100\004\070" +
    "\006\063\007\072\010\042\013\016\014\056\015\013\016" +
    "\100\017\022\020\020\025\075\027\055\032\010\045\025" +
    "\050\023\051\066\052\024\055\052\056\053\057\057\060" +
    "\103\061\015\062\017\063\046\064\060\065\061\066\021" +
    "\067\076\072\062\074\071\075\004\001\002\000\004\020" +
    "\237\001\002\000\004\020\232\001\002\000\004\020\227" +
    "\001\002\000\004\020\220\001\002\000\052\002\uff92\011" +
    "\uff92\012\uff92\021\uff92\022\uff92\023\uff92\031\uff92\033\uff92" +
    "\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\043" +
    "\uff92\044\uff92\046\uff92\047\uff92\070\uff92\071\uff92\001\002" +
    "\000\004\020\206\001\002\000\052\002\uff8d\011\uff8d\012" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\031\uff8d\033\uff8d\034\uff8d" +
    "\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\043\uff8d\044" +
    "\uff8d\046\uff8d\047\uff8d\070\uff8d\071\uff8d\001\002\000\030" +
    "\002\ufff1\011\ufff1\021\ufff1\022\ufff1\023\ufff1\031\ufff1\033" +
    "\ufff1\043\ufff1\044\ufff1\070\ufff1\071\ufff1\001\002\000\004" +
    "\074\204\001\002\000\030\002\ufff5\011\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\031\ufff5\033\ufff5\043\ufff5\044\ufff5\070\ufff5" +
    "\071\ufff5\001\002\000\006\020\143\067\142\001\002\000" +
    "\052\002\uff90\011\uff90\012\uff90\021\uff90\022\uff90\023\uff90" +
    "\031\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\043\uff90\044\uff90\046\uff90\047\uff90\070\uff90" +
    "\071\uff90\001\002\000\004\067\140\001\002\000\004\022" +
    "\137\001\002\000\050\002\uff98\011\uff98\012\uff98\021\uff98" +
    "\022\uff98\023\uff98\031\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\043\uff98\044\uff98\046\uff98\047\uff98" +
    "\070\uff98\071\uff98\001\002\000\052\002\uffd4\011\uffd4\012" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\031\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\043\uffd4\044" +
    "\uffd4\046\uffd4\047\uffd4\070\uffd4\071\uffd4\001\002\000\046" +
    "\002\uff91\020\111\022\uff91\023\uff91\031\uff91\032\112\033" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\135\046\uff91\047\uff91\070\uff91\071\uff91\001\002\000" +
    "\032\002\uffef\011\uffef\012\uffef\021\uffef\022\uffef\023\uffef" +
    "\031\uffef\033\uffef\043\uffef\044\uffef\070\uffef\071\uffef\001" +
    "\002\000\004\020\132\001\002\000\030\002\ufff4\011\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\031\ufff4\033\ufff4\043\ufff4\044" +
    "\ufff4\070\ufff4\071\ufff4\001\002\000\152\002\ufffc\004\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\025\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070" +
    "\ufffc\071\ufffc\072\ufffc\074\ufffc\075\ufffc\001\002\000\004" +
    "\020\104\001\002\000\060\004\070\006\063\010\042\013" +
    "\016\014\056\015\013\020\105\025\075\027\055\032\010" +
    "\050\023\051\066\052\024\056\053\061\015\062\017\063" +
    "\046\064\060\065\061\066\021\067\110\072\062\074\071" +
    "\001\002\000\062\004\070\006\063\010\042\013\016\014" +
    "\056\015\013\020\105\025\075\027\055\032\010\035\125" +
    "\050\023\051\066\052\024\056\053\061\015\062\017\063" +
    "\046\064\060\065\061\066\021\067\110\072\062\074\071" +
    "\001\002\000\004\031\122\001\002\000\052\002\uffe6\011" +
    "\uffe6\012\uffe6\021\uffe6\022\uffe6\023\uffe6\031\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\043" +
    "\uffe6\044\uffe6\046\uffe6\047\uffe6\070\uffe6\071\uffe6\001\002" +
    "\000\056\002\uff91\011\uff91\012\uff91\020\111\021\uff91\022" +
    "\uff91\023\uff91\031\uff91\032\112\033\uff91\034\uff91\035\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\043\uff91\044\uff91\046" +
    "\uff91\047\uff91\070\uff91\071\uff91\001\002\000\064\004\070" +
    "\006\063\010\042\013\016\014\056\015\013\020\105\021" +
    "\uffa4\025\075\027\055\031\uffa4\032\010\050\023\051\066" +
    "\052\024\056\053\061\015\062\017\063\046\064\060\065" +
    "\061\066\021\067\110\072\062\074\071\001\002\000\060" +
    "\004\070\006\063\010\042\013\016\014\056\015\013\020" +
    "\105\025\075\027\055\032\010\050\023\051\066\052\024" +
    "\056\053\061\015\062\017\063\046\064\060\065\061\066" +
    "\021\067\110\072\062\074\071\001\002\000\004\033\114" +
    "\001\002\000\054\002\uffcd\011\uffcd\012\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\046" +
    "\uffcd\047\uffcd\070\uffcd\071\uffcd\001\002\000\006\021\120" +
    "\031\117\001\002\000\010\021\uffa5\023\uffa5\031\uffa5\001" +
    "\002\000\060\004\070\006\063\010\042\013\016\014\056" +
    "\015\013\020\105\025\075\027\055\032\010\050\023\051" +
    "\066\052\024\056\053\061\015\062\017\063\046\064\060" +
    "\065\061\066\021\067\110\072\062\074\071\001\002\000" +
    "\052\002\uffa2\011\uffa2\012\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\043\uffa2\044\uffa2\046\uffa2\047\uffa2\070\uffa2" +
    "\071\uffa2\001\002\000\012\021\uffa6\023\uffa6\031\uffa6\033" +
    "\uffa6\001\002\000\060\004\070\006\063\010\042\013\016" +
    "\014\056\015\013\020\105\025\075\027\055\032\010\050" +
    "\023\051\066\052\024\056\053\061\015\062\017\063\046" +
    "\064\060\065\061\066\021\067\110\072\062\074\071\001" +
    "\002\000\004\021\124\001\002\000\020\002\uffba\011\uffba" +
    "\021\uffba\022\uffba\023\uffba\043\uffba\044\uffba\001\002\000" +
    "\060\004\070\006\063\010\042\013\016\014\056\015\013" +
    "\020\105\025\075\027\055\032\010\050\023\051\066\052" +
    "\024\056\053\061\015\062\017\063\046\064\060\065\061" +
    "\066\021\067\110\072\062\074\071\001\002\000\004\021" +
    "\127\001\002\000\052\002\uff8f\011\uff8f\012\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\031\uff8f\033\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\043\uff8f\044\uff8f\046\uff8f" +
    "\047\uff8f\070\uff8f\071\uff8f\001\002\000\004\021\131\001" +
    "\002\000\050\002\uff96\011\uff96\012\uff96\021\uff96\022\uff96" +
    "\023\uff96\031\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\043\uff96\044\uff96\046\uff96\047\uff96\070\uff96" +
    "\071\uff96\001\002\000\060\004\070\006\063\010\042\013" +
    "\016\014\056\015\013\020\105\025\075\027\055\032\010" +
    "\050\023\051\066\052\024\056\053\061\015\062\017\063" +
    "\046\064\060\065\061\066\021\067\110\072\062\074\071" +
    "\001\002\000\004\021\134\001\002\000\004\022\uffac\001" +
    "\002\000\072\004\070\006\063\010\042\013\016\014\056" +
    "\015\013\020\020\025\075\027\055\032\010\045\025\050" +
    "\023\051\066\052\024\055\052\056\053\057\057\060\103" +
    "\061\015\062\017\063\046\064\060\065\061\066\021\067" +
    "\110\072\062\074\071\075\004\001\002\000\004\022\uffae" +
    "\001\002\000\152\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064" +
    "\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8" +
    "\074\ufff8\075\ufff8\001\002\000\072\004\070\006\063\010" +
    "\042\013\016\014\056\015\013\020\020\025\075\027\055" +
    "\032\010\045\025\050\023\051\066\052\024\055\052\056" +
    "\053\057\057\060\103\061\015\062\017\063\046\064\060" +
    "\065\061\066\021\067\110\072\062\074\071\075\004\001" +
    "\002\000\004\022\uffaf\001\002\000\100\004\070\006\063" +
    "\007\072\010\042\013\016\014\056\015\013\016\100\017" +
    "\022\020\020\025\075\027\055\032\010\045\025\050\023" +
    "\051\066\052\024\055\052\056\053\057\057\060\103\061" +
    "\015\062\017\063\046\064\060\065\061\066\021\067\076" +
    "\072\062\074\071\075\004\001\002\000\010\021\uffe2\031" +
    "\uffe2\067\144\001\002\000\006\021\uffe3\031\uffe3\001\002" +
    "\000\006\021\147\031\146\001\002\000\004\067\202\001" +
    "\002\000\060\004\070\006\063\010\042\013\016\014\056" +
    "\015\013\020\105\025\075\027\055\032\150\050\023\051" +
    "\066\052\024\056\053\061\015\062\017\063\046\064\060" +
    "\065\061\066\021\067\110\072\062\074\071\001\002\000" +
    "\106\004\070\006\063\007\072\010\042\013\016\014\056" +
    "\015\013\016\100\017\022\020\020\023\157\025\075\027" +
    "\055\031\uffa4\032\010\033\uffa4\045\025\050\023\051\066" +
    "\052\024\055\052\056\053\057\057\060\103\061\015\062" +
    "\017\063\046\064\060\065\061\066\021\067\076\072\062" +
    "\074\071\075\004\001\002\000\030\002\uffcb\011\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\031\uffcb\033\uffcb\043\uffcb\044\uffcb" +
    "\070\uffcb\071\uffcb\001\002\000\102\004\070\006\063\007" +
    "\072\010\042\013\016\014\056\015\013\016\100\017\022" +
    "\020\020\025\075\027\055\032\010\033\200\045\025\050" +
    "\023\051\066\052\024\055\052\056\053\057\057\060\103" +
    "\061\015\062\017\063\046\064\060\065\061\066\021\067" +
    "\076\072\062\074\071\075\004\001\002\000\004\022\177" +
    "\001\002\000\006\031\uffcf\033\uffcf\001\002\000\006\031" +
    "\117\033\176\001\002\000\016\022\ufff7\023\165\031\uffa5" +
    "\033\uffa5\070\173\071\172\001\002\000\064\004\070\006" +
    "\063\010\042\013\016\014\056\015\013\020\105\023\uffa4" +
    "\025\075\027\055\031\uffa4\032\010\050\023\051\066\052" +
    "\024\056\053\061\015\062\017\063\046\064\060\065\061" +
    "\066\021\067\110\072\062\074\071\001\002\000\006\031" +
    "\161\033\162\001\002\000\060\004\070\006\063\010\042" +
    "\013\016\014\056\015\013\020\105\025\075\027\055\032" +
    "\010\050\023\051\066\052\024\056\053\061\015\062\017" +
    "\063\046\064\060\065\061\066\021\067\110\072\062\074" +
    "\071\001\002\000\054\002\uffd2\011\uffd2\012\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2" +
    "\046\uffd2\047\uffd2\070\uffd2\071\uffd2\001\002\000\006\031" +
    "\uffd0\033\uffd0\001\002\000\004\023\165\001\002\000\060" +
    "\004\070\006\063\010\042\013\016\014\056\015\013\020" +
    "\105\025\075\027\055\032\010\050\023\051\066\052\024" +
    "\056\053\061\015\062\017\063\046\064\060\065\061\066" +
    "\021\067\110\072\062\074\071\001\002\000\006\031\uffd1" +
    "\033\uffd1\001\002\000\006\023\170\031\117\001\002\000" +
    "\004\033\171\001\002\000\054\002\uffd3\011\uffd3\012\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3" +
    "\044\uffd3\046\uffd3\047\uffd3\070\uffd3\071\uffd3\001\002\000" +
    "\060\004\070\006\063\010\042\013\016\014\056\015\013" +
    "\020\105\025\075\027\055\032\010\050\023\051\066\052" +
    "\024\056\053\061\015\062\017\063\046\064\060\065\061" +
    "\066\021\067\110\072\062\074\071\001\002\000\060\004" +
    "\070\006\063\010\042\013\016\014\056\015\013\020\105" +
    "\025\075\027\055\032\010\050\023\051\066\052\024\056" +
    "\053\061\015\062\017\063\046\064\060\065\061\066\021" +
    "\067\110\072\062\074\071\001\002\000\020\002\uffc6\011" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\043\uffc6\044\uffc6\001\002" +
    "\000\020\002\uffc5\011\uffc5\021\uffc5\022\uffc5\023\uffc5\043" +
    "\uffc5\044\uffc5\001\002\000\052\002\uffd6\011\uffd6\012\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\031\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6" +
    "\046\uffd6\047\uffd6\070\uffd6\071\uffd6\001\002\000\152\002" +
    "\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\025\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\070\ufffa\071\ufffa\072\ufffa\074\ufffa\075\ufffa\001" +
    "\002\000\030\002\uffca\011\uffca\021\uffca\022\uffca\023\uffca" +
    "\031\uffca\033\uffca\043\uffca\044\uffca\070\uffca\071\uffca\001" +
    "\002\000\152\002\ufffd\004\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\043\ufffd\044\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd" +
    "\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\074" +
    "\ufffd\075\ufffd\001\002\000\006\021\uffe4\031\uffe4\001\002" +
    "\000\126\002\uffcc\004\070\006\063\007\072\010\042\011" +
    "\uffcc\013\016\014\056\015\013\016\100\017\022\020\020" +
    "\021\uffcc\022\uffcc\023\uffcc\025\075\027\055\031\uffcc\032" +
    "\010\033\uffcc\043\uffcc\044\uffcc\045\025\050\023\051\066" +
    "\052\024\055\052\056\053\057\057\060\103\061\015\062" +
    "\017\063\046\064\060\065\061\066\021\067\076\070\uffcc" +
    "\071\uffcc\072\062\074\071\075\004\001\002\000\004\054" +
    "\205\001\002\000\030\002\uffa8\011\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\031\uffa8\033\uffa8\043\uffa8\044\uffa8\070\uffa8\071" +
    "\uffa8\001\002\000\010\021\uffdc\031\uffdc\067\207\001\002" +
    "\000\004\071\216\001\002\000\006\021\213\031\212\001" +
    "\002\000\006\021\uffdd\031\uffdd\001\002\000\004\067\207" +
    "\001\002\000\100\004\070\006\063\007\072\010\042\013" +
    "\016\014\056\015\013\016\100\017\022\020\020\025\075" +
    "\027\055\032\010\045\025\050\023\051\066\052\024\055" +
    "\052\056\053\057\057\060\103\061\015\062\017\063\046" +
    "\064\060\065\061\066\021\067\076\072\062\074\071\075" +
    "\004\001\002\000\150\002\uffc7\004\070\006\063\007\072" +
    "\010\042\011\uffc7\012\uffc7\013\016\014\056\015\013\016" +
    "\100\017\022\020\020\021\uffc7\022\uffc7\023\uffc7\025\075" +
    "\027\055\031\uffc7\032\010\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\045\025" +
    "\046\uffc7\047\uffc7\050\023\051\066\052\024\055\052\056" +
    "\053\057\057\060\103\061\015\062\017\063\046\064\060" +
    "\065\061\066\021\067\076\070\uffc7\071\uffc7\072\062\074" +
    "\071\075\004\001\002\000\006\021\uffde\031\uffde\001\002" +
    "\000\060\004\070\006\063\010\042\013\016\014\056\015" +
    "\013\020\105\025\075\027\055\032\010\050\023\051\066" +
    "\052\024\056\053\061\015\062\017\063\046\064\060\065" +
    "\061\066\021\067\110\072\062\074\071\001\002\000\006" +
    "\021\uffdf\031\uffdf\001\002\000\060\004\070\006\063\010" +
    "\042\013\016\014\056\015\013\020\105\025\075\027\055" +
    "\032\010\050\023\051\066\052\024\056\053\061\015\062" +
    "\017\063\046\064\060\065\061\066\021\067\110\072\062" +
    "\074\071\001\002\000\004\031\222\001\002\000\060\004" +
    "\070\006\063\010\042\013\016\014\056\015\013\020\105" +
    "\025\075\027\055\032\010\050\023\051\066\052\024\056" +
    "\053\061\015\062\017\063\046\064\060\065\061\066\021" +
    "\067\110\072\062\074\071\001\002\000\004\031\224\001" +
    "\002\000\060\004\070\006\063\010\042\013\016\014\056" +
    "\015\013\020\105\025\075\027\055\032\010\050\023\051" +
    "\066\052\024\056\053\061\015\062\017\063\046\064\060" +
    "\065\061\066\021\067\110\072\062\074\071\001\002\000" +
    "\004\021\226\001\002\000\052\002\uffe5\011\uffe5\012\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\031\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5" +
    "\046\uffe5\047\uffe5\070\uffe5\071\uffe5\001\002\000\064\004" +
    "\070\006\063\010\042\013\016\014\056\015\013\020\105" +
    "\021\uffa4\025\075\027\055\031\uffa4\032\010\050\023\051" +
    "\066\052\024\056\053\061\015\062\017\063\046\064\060" +
    "\065\061\066\021\067\110\072\062\074\071\001\002\000" +
    "\006\021\231\031\117\001\002\000\052\002\uffd5\011\uffd5" +
    "\012\uffd5\021\uffd5\022\uffd5\023\uffd5\031\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5" +
    "\044\uffd5\046\uffd5\047\uffd5\070\uffd5\071\uffd5\001\002\000" +
    "\060\004\070\006\063\010\042\013\016\014\056\015\013" +
    "\020\105\025\075\027\055\032\010\050\023\051\066\052" +
    "\024\056\053\061\015\062\017\063\046\064\060\065\061" +
    "\066\021\067\110\072\062\074\071\001\002\000\004\031" +
    "\234\001\002\000\060\004\070\006\063\010\042\013\016" +
    "\014\056\015\013\020\105\025\075\027\055\032\010\050" +
    "\023\051\066\052\024\056\053\061\015\062\017\063\046" +
    "\064\060\065\061\066\021\067\110\072\062\074\071\001" +
    "\002\000\004\021\236\001\002\000\020\002\uffb9\011\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\043\uffb9\044\uffb9\001\002\000" +
    "\004\021\240\001\002\000\052\002\uffaa\011\uffaa\012\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\031\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\043\uffaa\044\uffaa" +
    "\046\uffaa\047\uffaa\070\uffaa\071\uffaa\001\002\000\102\004" +
    "\070\006\063\007\072\010\042\013\016\014\056\015\013" +
    "\016\100\017\022\020\020\025\075\027\055\030\242\032" +
    "\010\045\025\050\023\051\066\052\024\055\052\056\053" +
    "\057\057\060\103\061\015\062\017\063\046\064\060\065" +
    "\061\066\021\067\076\072\062\074\071\075\004\001\002" +
    "\000\052\002\uffb1\011\uffb1\012\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\043\uffb1\044\uffb1\046\uffb1\047\uffb1\070" +
    "\uffb1\071\uffb1\001\002\000\060\004\070\006\063\010\042" +
    "\013\016\014\056\015\013\020\105\025\075\027\055\032" +
    "\010\050\023\051\066\052\024\056\053\061\015\062\017" +
    "\063\046\064\060\065\061\066\021\067\110\072\062\074" +
    "\071\001\002\000\004\031\245\001\002\000\060\004\070" +
    "\006\063\010\042\013\016\014\056\015\013\020\105\025" +
    "\075\027\055\032\010\050\023\051\066\052\024\056\053" +
    "\061\015\062\017\063\046\064\060\065\061\066\021\067" +
    "\110\072\062\074\071\001\002\000\004\021\247\001\002" +
    "\000\052\002\uffeb\011\uffeb\012\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\043\uffeb\044\uffeb\046\uffeb\047\uffeb\070" +
    "\uffeb\071\uffeb\001\002\000\060\004\070\006\063\010\042" +
    "\013\016\014\056\015\013\020\105\025\075\027\055\032" +
    "\010\050\023\051\066\052\024\056\053\061\015\062\017" +
    "\063\046\064\060\065\061\066\021\067\110\072\062\074" +
    "\071\001\002\000\004\021\252\001\002\000\020\002\uffbb" +
    "\011\uffbb\021\uffbb\022\uffbb\023\uffbb\043\uffbb\044\uffbb\001" +
    "\002\000\072\004\070\006\063\010\042\013\016\014\056" +
    "\015\013\020\020\025\075\027\055\032\010\045\025\050" +
    "\023\051\066\052\024\055\052\056\053\057\057\060\103" +
    "\061\015\062\017\063\046\064\060\065\061\066\021\067" +
    "\110\072\062\074\071\075\004\001\002\000\006\070\173" +
    "\071\172\001\002\000\020\002\uffc2\011\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\043\uffc2\044\uffc2\001\002\000\050\006\063" +
    "\013\016\014\056\015\013\020\105\025\075\027\055\032" +
    "\010\050\023\056\053\061\015\062\017\063\046\064\060" +
    "\065\061\066\021\067\110\072\062\074\071\001\002\000" +
    "\050\006\063\013\016\014\056\015\013\020\105\025\075" +
    "\027\055\032\010\050\023\056\053\061\015\062\017\063" +
    "\046\064\060\065\061\066\021\067\110\072\062\074\071" +
    "\001\002\000\050\006\063\013\016\014\056\015\013\020" +
    "\105\025\075\027\055\032\010\050\023\056\053\061\015" +
    "\062\017\063\046\064\060\065\061\066\021\067\110\072" +
    "\062\074\071\001\002\000\050\002\uff9a\011\uff9a\012\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\031\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\043\uff9a\044\uff9a\046\uff9a" +
    "\047\uff9a\070\uff9a\071\uff9a\001\002\000\050\002\uff9b\011" +
    "\uff9b\012\uff9b\021\uff9b\022\uff9b\023\uff9b\031\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\043\uff9b\044" +
    "\uff9b\046\uff9b\047\uff9b\070\uff9b\071\uff9b\001\002\000\050" +
    "\002\uff99\011\uff99\012\uff99\021\uff99\022\uff99\023\uff99\031" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\043\uff99\044\uff99\046\uff99\047\uff99\070\uff99\071\uff99\001" +
    "\002\000\072\004\070\006\063\010\042\013\016\014\056" +
    "\015\013\020\020\025\075\027\055\032\010\045\025\050" +
    "\023\051\066\052\024\055\052\056\053\057\057\060\103" +
    "\061\015\062\017\063\046\064\060\065\061\066\021\067" +
    "\110\072\062\074\071\075\004\001\002\000\004\022\uffad" +
    "\001\002\000\060\004\070\006\063\010\042\013\016\014" +
    "\056\015\013\020\105\025\075\027\055\032\010\050\023" +
    "\051\066\052\024\056\053\061\015\062\017\063\046\064" +
    "\060\065\061\066\021\067\110\072\062\074\071\001\002" +
    "\000\004\021\270\001\002\000\052\002\uffe8\011\uffe8\012" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\031\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8\044" +
    "\uffe8\046\uffe8\047\uffe8\070\uffe8\071\uffe8\001\002\000\050" +
    "\006\063\013\016\014\056\015\013\020\105\025\075\027" +
    "\055\032\010\050\023\056\053\061\015\062\017\063\046" +
    "\064\060\065\061\066\021\067\110\072\062\074\071\001" +
    "\002\000\050\006\063\013\016\014\056\015\013\020\105" +
    "\025\075\027\055\032\010\050\023\056\053\061\015\062" +
    "\017\063\046\064\060\065\061\066\021\067\110\072\062" +
    "\074\071\001\002\000\050\002\uff9d\011\uff9d\012\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\031\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\257\037\260\040\256\043\uff9d\044\uff9d\046\uff9d\047" +
    "\uff9d\070\uff9d\071\uff9d\001\002\000\050\002\uff9e\011\uff9e" +
    "\012\uff9e\021\uff9e\022\uff9e\023\uff9e\031\uff9e\033\uff9e\034" +
    "\uff9e\035\uff9e\036\257\037\260\040\256\043\uff9e\044\uff9e" +
    "\046\uff9e\047\uff9e\070\uff9e\071\uff9e\001\002\000\006\011" +
    "\305\044\306\001\002\000\034\011\277\020\111\032\112" +
    "\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\046" +
    "\uff91\047\uff91\070\uff91\071\uff91\001\002\000\060\004\070" +
    "\006\063\010\042\013\016\014\056\015\013\020\105\025" +
    "\075\027\055\032\010\050\023\051\066\052\024\056\053" +
    "\061\015\062\017\063\046\064\060\065\061\066\021\067" +
    "\110\072\062\074\071\001\002\000\030\002\uffb6\011\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\031\uffb6\033\uffb6\043\uffb6\044" +
    "\uffb6\070\uffb6\071\uffb6\001\002\000\032\002\ufff4\011\ufff4" +
    "\012\302\021\ufff4\022\ufff4\023\ufff4\031\ufff4\033\ufff4\043" +
    "\ufff4\044\ufff4\070\ufff4\071\ufff4\001\002\000\052\006\063" +
    "\010\042\013\016\014\056\015\013\020\105\025\075\027" +
    "\055\032\010\050\023\056\053\061\015\062\017\063\046" +
    "\064\060\065\061\066\021\067\110\072\062\074\071\001" +
    "\002\000\030\002\uffb5\011\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\031\uffb5\033\uffb5\043\uffb5\044\uffb5\070\uffb5\071\uffb5\001" +
    "\002\000\032\002\uffb3\011\uffb3\012\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\031\uffb3\033\uffb3\043\uffb3\044\uffb3\070\uffb3\071" +
    "\uffb3\001\002\000\060\004\070\006\063\010\042\013\016" +
    "\014\056\015\013\020\105\025\075\027\055\032\010\050" +
    "\023\051\066\052\024\056\053\061\015\062\017\063\046" +
    "\064\060\065\061\066\021\067\110\072\062\074\071\001" +
    "\002\000\072\004\070\006\063\010\042\013\016\014\056" +
    "\015\013\020\020\025\075\027\055\032\010\045\025\050" +
    "\023\051\066\052\024\055\052\056\053\057\057\060\103" +
    "\061\015\062\017\063\046\064\060\065\061\066\021\067" +
    "\110\072\062\074\071\075\004\001\002\000\020\002\uffc4" +
    "\011\uffc4\021\uffc4\022\uffc4\023\uffc4\043\253\044\uffc4\001" +
    "\002\000\030\002\uffb8\011\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\031\uffb8\033\uffb8\043\uffb8\044\uffb8\070\uffb8\071\uffb8\001" +
    "\002\000\032\002\ufff4\011\ufff4\012\312\021\ufff4\022\ufff4" +
    "\023\ufff4\031\ufff4\033\ufff4\043\ufff4\044\ufff4\070\ufff4\071" +
    "\ufff4\001\002\000\052\006\063\010\042\013\016\014\056" +
    "\015\013\020\105\025\075\027\055\032\010\050\023\056" +
    "\053\061\015\062\017\063\046\064\060\065\061\066\021" +
    "\067\110\072\062\074\071\001\002\000\030\002\uffb7\011" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\031\uffb7\033\uffb7\043\uffb7" +
    "\044\uffb7\070\uffb7\071\uffb7\001\002\000\032\002\uffb4\011" +
    "\uffb4\012\uffb4\021\uffb4\022\uffb4\023\uffb4\031\uffb4\033\uffb4" +
    "\043\uffb4\044\uffb4\070\uffb4\071\uffb4\001\002\000\050\006" +
    "\063\013\016\014\056\015\013\020\105\025\075\027\055" +
    "\032\010\050\023\056\053\061\015\062\017\063\046\064" +
    "\060\065\061\066\021\067\110\072\062\074\071\001\002" +
    "\000\050\006\063\013\016\014\056\015\013\020\105\025" +
    "\075\027\055\032\010\050\023\056\053\061\015\062\017" +
    "\063\046\064\060\065\061\066\021\067\110\072\062\074" +
    "\071\001\002\000\042\002\uffa0\011\uffa0\012\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\031\uffa0\033\uffa0\034\271\035\272\043" +
    "\uffa0\044\uffa0\046\uffa0\047\uffa0\070\uffa0\071\uffa0\001\002" +
    "\000\042\002\uffa1\011\uffa1\012\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\031\uffa1\033\uffa1\034\271\035\272\043\uffa1\044\uffa1" +
    "\046\uffa1\047\uffa1\070\uffa1\071\uffa1\001\002\000\152\002" +
    "\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\025\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\055\ufff9\056\ufff9\057\ufff9\060" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\071\ufff9\072\ufff9\074\ufff9\075\ufff9\001" +
    "\002\000\020\002\uffc0\011\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\043\uffc0\044\uffc0\001\002\000\004\053\324\001\002\000" +
    "\030\002\uffa7\011\uffa7\021\uffa7\022\uffa7\023\uffa7\031\uffa7" +
    "\033\uffa7\043\uffa7\044\uffa7\070\uffa7\071\uffa7\001\002\000" +
    "\050\002\uff97\011\uff97\012\uff97\021\uff97\022\uff97\023\uff97" +
    "\031\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040" +
    "\uff97\043\uff97\044\uff97\046\uff97\047\uff97\070\uff97\071\uff97" +
    "\001\002\000\060\004\070\006\063\010\042\013\016\014" +
    "\056\015\013\020\105\025\075\027\055\032\010\050\023" +
    "\051\066\052\024\056\053\061\015\062\017\063\046\064" +
    "\060\065\061\066\021\067\110\072\062\074\071\001\002" +
    "\000\060\004\070\006\063\010\042\013\016\014\056\015" +
    "\013\020\105\025\075\027\055\032\010\050\023\051\066" +
    "\052\024\056\053\061\015\062\017\063\046\064\060\065" +
    "\061\066\021\067\110\072\062\074\071\001\002\000\004" +
    "\021\331\001\002\000\004\022\uffab\001\002\000\006\021" +
    "\334\044\306\001\002\000\010\021\127\070\173\071\172" +
    "\001\002\000\020\002\uffbd\011\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\043\uffbd\044\uffbd\001\002\000\060\004\070\006\063" +
    "\010\042\013\016\014\056\015\013\020\105\025\075\027" +
    "\055\032\010\050\023\051\066\052\024\056\053\061\015" +
    "\062\017\063\046\064\060\065\061\066\021\067\110\072" +
    "\062\074\071\001\002\000\004\021\337\001\002\000\052" +
    "\002\uffe9\011\uffe9\012\uffe9\021\uffe9\022\uffe9\023\uffe9\031" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\043\uffe9\044\uffe9\046\uffe9\047\uffe9\070\uffe9\071" +
    "\uffe9\001\002\000\074\004\070\006\063\010\042\012\343" +
    "\013\016\014\056\015\013\020\020\025\075\027\055\032" +
    "\010\045\025\050\023\051\066\052\024\055\052\056\053" +
    "\057\057\060\103\061\015\062\017\063\046\064\060\065" +
    "\061\066\021\067\345\072\062\074\071\075\004\001\002" +
    "\000\076\004\070\006\063\010\042\012\343\013\016\014" +
    "\056\015\013\020\020\025\075\027\055\030\360\032\010" +
    "\045\025\050\023\051\066\052\024\055\052\056\053\057" +
    "\057\060\103\061\015\062\017\063\046\064\060\065\061" +
    "\066\021\067\345\072\062\074\071\075\004\001\002\000" +
    "\006\023\354\044\306\001\002\000\004\023\351\001\002" +
    "\000\076\004\uffd7\006\uffd7\010\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\020\uffd7\025\uffd7\027\uffd7\030\uffd7\032\uffd7" +
    "\045\uffd7\050\uffd7\051\uffd7\052\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\066\uffd7\067\uffd7\072\uffd7\074\uffd7\075\uffd7\001\002\000" +
    "\034\020\111\023\346\032\112\034\uff91\035\uff91\036\uff91" +
    "\037\uff91\040\uff91\041\uff91\046\uff91\047\uff91\070\uff91\071" +
    "\uff91\001\002\000\060\004\070\006\063\010\042\013\016" +
    "\014\056\015\013\020\105\025\075\027\055\032\010\050" +
    "\023\051\066\052\024\056\053\061\015\062\017\063\046" +
    "\064\060\065\061\066\021\067\110\072\062\074\071\001" +
    "\002\000\004\022\350\001\002\000\076\004\uffda\006\uffda" +
    "\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda\020\uffda\025" +
    "\uffda\027\uffda\030\uffda\032\uffda\045\uffda\050\uffda\051\uffda" +
    "\052\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062" +
    "\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\072\uffda" +
    "\074\uffda\075\uffda\001\002\000\060\004\070\006\063\010" +
    "\042\013\016\014\056\015\013\020\105\025\075\027\055" +
    "\032\010\050\023\051\066\052\024\056\053\061\015\062" +
    "\017\063\046\064\060\065\061\066\021\067\110\072\062" +
    "\074\071\001\002\000\004\022\353\001\002\000\076\004" +
    "\uffd9\006\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\020\uffd9\025\uffd9\027\uffd9\030\uffd9\032\uffd9\045\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067" +
    "\uffd9\072\uffd9\074\uffd9\075\uffd9\001\002\000\060\004\070" +
    "\006\063\010\042\013\016\014\056\015\013\020\105\025" +
    "\075\027\055\032\010\050\023\051\066\052\024\056\053" +
    "\061\015\062\017\063\046\064\060\065\061\066\021\067" +
    "\110\072\062\074\071\001\002\000\004\022\356\001\002" +
    "\000\076\004\uffdb\006\uffdb\010\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\020\uffdb\025\uffdb\027\uffdb\030\uffdb\032\uffdb" +
    "\045\uffdb\050\uffdb\051\uffdb\052\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\067\uffdb\072\uffdb\074\uffdb\075\uffdb\001\002\000" +
    "\076\004\uffd8\006\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\020\uffd8\025\uffd8\027\uffd8\030\uffd8\032\uffd8\045" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\072\uffd8\074\uffd8\075\uffd8\001\002\000\052" +
    "\002\uffb2\011\uffb2\012\uffb2\021\uffb2\022\uffb2\023\uffb2\031" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\043\uffb2\044\uffb2\046\uffb2\047\uffb2\070\uffb2\071" +
    "\uffb2\001\002\000\060\004\070\006\063\010\042\013\016" +
    "\014\056\015\013\020\105\025\075\027\055\032\010\050" +
    "\023\051\066\052\024\056\053\061\015\062\017\063\046" +
    "\064\060\065\061\066\021\067\110\072\062\074\071\001" +
    "\002\000\004\021\363\001\002\000\052\002\uffea\011\uffea" +
    "\012\uffea\021\uffea\022\uffea\023\uffea\031\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\043\uffea" +
    "\044\uffea\046\uffea\047\uffea\070\uffea\071\uffea\001\002\000" +
    "\152\002\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\025\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\041\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\074\ufffb\075" +
    "\ufffb\001\002\000\004\021\366\001\002\000\052\002\uffa9" +
    "\011\uffa9\012\uffa9\021\uffa9\022\uffa9\023\uffa9\031\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\043\uffa9\044\uffa9\046\uffa9\047\uffa9\070\uffa9\071\uffa9\001" +
    "\002\000\012\002\ufffe\022\ufff7\070\173\071\172\001\002" +
    "\000\010\023\165\031\uffa5\033\uffa5\001\002\000\060\004" +
    "\070\006\063\010\042\013\016\014\056\015\013\020\105" +
    "\025\075\027\055\032\010\050\023\051\066\052\024\056" +
    "\053\061\015\062\017\063\046\064\060\065\061\066\021" +
    "\067\110\072\062\074\071\001\002\000\004\033\373\001" +
    "\002\000\054\002\uffce\011\uffce\012\uffce\021\uffce\022\uffce" +
    "\023\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\046\uffce" +
    "\047\uffce\070\uffce\071\uffce\001\002\000\050\006\063\013" +
    "\016\014\056\015\013\020\105\025\075\027\055\032\010" +
    "\050\023\056\053\061\015\062\017\063\046\064\060\065" +
    "\061\066\021\067\110\072\062\074\071\001\002\000\050" +
    "\002\uff95\011\uff95\012\uff95\021\uff95\022\uff95\023\uff95\031" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95" +
    "\043\uff95\044\uff95\046\uff95\047\uff95\070\uff95\071\uff95\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\104\002\004\003\010\004\101\005\013\007" +
    "\033\011\064\012\076\013\025\014\035\015\050\016\040" +
    "\017\026\030\034\031\006\032\046\033\044\037\027\040" +
    "\030\041\063\042\043\044\072\045\032\046\053\047\037" +
    "\050\042\051\036\052\066\053\100\055\047\056\073\057" +
    "\005\061\031\062\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\007" +
    "\033\011\064\012\076\022\154\030\034\031\006\032\106" +
    "\033\044\035\153\036\157\037\027\041\063\042\043\045" +
    "\032\046\053\047\037\050\042\051\367\052\066\053\100" +
    "\055\047\056\073\057\005\061\031\001\001\000\100\004" +
    "\200\005\013\007\033\011\064\012\076\013\025\014\035" +
    "\015\050\016\040\017\026\030\034\031\006\032\046\033" +
    "\044\037\027\040\030\041\063\042\043\044\072\045\032" +
    "\046\053\047\037\050\042\051\366\052\066\053\100\055" +
    "\047\056\073\057\005\061\031\062\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\007\033" +
    "\011\064\012\076\013\025\014\331\015\050\016\040\017" +
    "\026\030\034\031\006\032\106\033\044\037\027\041\063" +
    "\042\043\045\032\046\053\047\037\050\042\051\332\052" +
    "\066\053\100\055\047\056\073\057\005\061\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\033\030" +
    "\034\031\006\032\106\037\027\041\063\042\043\045\032" +
    "\057\324\061\031\001\001\000\002\001\001\000\056\007" +
    "\033\011\064\012\076\013\321\030\034\031\006\032\106" +
    "\033\044\037\027\041\063\042\043\045\032\046\053\047" +
    "\037\050\042\051\253\052\066\053\100\055\047\056\073" +
    "\057\005\061\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\007\033\011\064\012\076\013\025\014" +
    "\274\015\050\016\040\017\026\030\034\031\006\032\106" +
    "\033\044\037\027\041\063\042\043\045\032\046\053\047" +
    "\037\050\042\051\253\052\066\053\100\055\047\056\073" +
    "\057\005\061\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\102\003\240\004\101" +
    "\005\013\007\033\011\064\012\076\013\025\014\035\015" +
    "\050\016\040\017\026\030\034\031\006\032\046\033\044" +
    "\037\027\040\030\041\063\042\043\044\072\045\032\046" +
    "\053\047\037\050\042\051\036\052\066\053\100\055\047" +
    "\056\073\057\005\061\031\062\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\007\033\011\064" +
    "\012\076\030\034\031\006\032\106\033\044\037\027\041" +
    "\063\042\043\045\032\046\053\047\037\050\042\051\105" +
    "\052\066\053\100\055\047\056\073\057\005\061\031\001" +
    "\001\000\054\007\033\011\064\012\076\030\034\031\006" +
    "\032\106\033\044\037\027\041\063\042\043\045\032\046" +
    "\053\047\037\050\042\051\125\052\066\053\100\055\047" +
    "\056\073\057\005\061\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\007\033\011\064" +
    "\012\076\022\114\030\034\031\006\032\106\033\044\037" +
    "\027\041\063\042\043\045\032\046\053\047\037\050\042" +
    "\051\115\052\066\053\100\055\047\056\073\057\005\061" +
    "\031\001\001\000\054\007\033\011\064\012\076\030\034" +
    "\031\006\032\106\033\044\037\027\041\063\042\043\045" +
    "\032\046\053\047\037\050\042\051\112\052\066\053\100" +
    "\055\047\056\073\057\005\061\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\007\033\011\064\012\076\030\034\031\006\032" +
    "\106\033\044\037\027\041\063\042\043\045\032\046\053" +
    "\047\037\050\042\051\120\052\066\053\100\055\047\056" +
    "\073\057\005\061\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\007\033\011\064\012\076\030\034\031" +
    "\006\032\106\033\044\037\027\041\063\042\043\045\032" +
    "\046\053\047\037\050\042\051\122\052\066\053\100\055" +
    "\047\056\073\057\005\061\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\007\033\011\064\012\076\030" +
    "\034\031\006\032\106\033\044\037\027\041\063\042\043" +
    "\045\032\046\053\047\037\050\042\051\127\052\066\053" +
    "\100\055\047\056\073\057\005\061\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\007\033\011\064\012\076\030\034\031\006" +
    "\032\106\033\044\037\027\041\063\042\043\045\032\046" +
    "\053\047\037\050\042\051\132\052\066\053\100\055\047" +
    "\056\073\057\005\061\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\007\033\011\064\012\076\013\025" +
    "\014\035\015\050\016\040\017\026\030\034\031\006\032" +
    "\106\033\044\037\027\041\063\042\043\045\032\046\053" +
    "\047\037\050\042\051\036\052\066\053\100\055\047\056" +
    "\073\057\005\061\031\062\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\007\033\011\064\012\076\013" +
    "\025\014\035\015\050\016\040\017\026\030\034\031\006" +
    "\032\106\033\044\037\027\041\063\042\043\045\032\046" +
    "\053\047\037\050\042\051\036\052\066\053\100\055\047" +
    "\056\073\057\005\061\031\062\140\001\001\000\002\001" +
    "\001\000\102\003\202\004\101\005\013\007\033\011\064" +
    "\012\076\013\025\014\035\015\050\016\040\017\026\030" +
    "\034\031\006\032\046\033\044\037\027\040\030\041\063" +
    "\042\043\044\072\045\032\046\053\047\037\050\042\051" +
    "\036\052\066\053\100\055\047\056\073\057\005\061\031" +
    "\062\152\001\001\000\004\020\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\007\033" +
    "\011\064\012\076\030\034\031\006\032\106\033\044\037" +
    "\027\041\063\042\043\045\032\046\053\047\037\050\042" +
    "\051\150\052\066\053\100\055\047\056\073\057\005\061" +
    "\031\001\001\000\110\003\151\004\101\005\013\007\033" +
    "\011\064\012\076\013\025\014\035\015\050\016\040\017" +
    "\026\022\154\030\034\031\006\032\046\033\044\035\153" +
    "\036\157\037\027\040\030\041\063\042\043\044\072\045" +
    "\032\046\053\047\037\050\042\051\155\052\066\053\100" +
    "\055\047\056\073\057\005\061\031\062\152\001\001\000" +
    "\002\001\001\000\100\004\200\005\013\007\033\011\064" +
    "\012\076\013\025\014\035\015\050\016\040\017\026\030" +
    "\034\031\006\032\046\033\044\037\027\040\030\041\063" +
    "\042\043\044\072\045\032\046\053\047\037\050\042\051" +
    "\036\052\066\053\100\055\047\056\073\057\005\061\031" +
    "\062\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\007\033\011\064" +
    "\012\076\022\166\030\034\031\006\032\106\033\044\037" +
    "\027\041\063\042\043\045\032\046\053\047\037\050\042" +
    "\051\115\052\066\053\100\055\047\056\073\057\005\061" +
    "\031\001\001\000\002\001\001\000\056\007\033\011\064" +
    "\012\076\030\034\031\006\032\106\033\044\035\162\037" +
    "\027\041\063\042\043\045\032\046\053\047\037\050\042" +
    "\051\163\052\066\053\100\055\047\056\073\057\005\061" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\007\033\011\064\012\076\030\034\031" +
    "\006\032\106\033\044\037\027\041\063\042\043\045\032" +
    "\046\053\047\037\050\042\051\165\052\066\053\100\055" +
    "\047\056\073\057\005\061\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\007\033\011\064\012\076\030\034\031\006\032\106" +
    "\033\044\037\027\041\063\042\043\045\032\046\053\047" +
    "\037\050\042\051\174\052\066\053\100\055\047\056\073" +
    "\057\005\061\031\001\001\000\054\007\033\011\064\012" +
    "\076\030\034\031\006\032\106\033\044\037\027\041\063" +
    "\042\043\045\032\046\053\047\037\050\042\051\173\052" +
    "\066\053\100\055\047\056\073\057\005\061\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\004\200\005\013\007\033\011\064\012" +
    "\076\013\025\014\035\015\050\016\040\017\026\030\034" +
    "\031\006\032\046\033\044\037\027\040\030\041\063\042" +
    "\043\044\072\045\032\046\053\047\037\050\042\051\036" +
    "\052\066\053\100\055\047\056\073\057\005\061\031\062" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\210\025\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\214\001\001\000\102" +
    "\003\213\004\101\005\013\007\033\011\064\012\076\013" +
    "\025\014\035\015\050\016\040\017\026\030\034\031\006" +
    "\032\046\033\044\037\027\040\030\041\063\042\043\044" +
    "\072\045\032\046\053\047\037\050\042\051\036\052\066" +
    "\053\100\055\047\056\073\057\005\061\031\062\152\001" +
    "\001\000\100\004\200\005\013\007\033\011\064\012\076" +
    "\013\025\014\035\015\050\016\040\017\026\030\034\031" +
    "\006\032\046\033\044\037\027\040\030\041\063\042\043" +
    "\044\072\045\032\046\053\047\037\050\042\051\036\052" +
    "\066\053\100\055\047\056\073\057\005\061\031\062\152" +
    "\001\001\000\002\001\001\000\054\007\033\011\064\012" +
    "\076\030\034\031\006\032\106\033\044\037\027\041\063" +
    "\042\043\045\032\046\053\047\037\050\042\051\216\052" +
    "\066\053\100\055\047\056\073\057\005\061\031\001\001" +
    "\000\002\001\001\000\054\007\033\011\064\012\076\030" +
    "\034\031\006\032\106\033\044\037\027\041\063\042\043" +
    "\045\032\046\053\047\037\050\042\051\220\052\066\053" +
    "\100\055\047\056\073\057\005\061\031\001\001\000\002" +
    "\001\001\000\054\007\033\011\064\012\076\030\034\031" +
    "\006\032\106\033\044\037\027\041\063\042\043\045\032" +
    "\046\053\047\037\050\042\051\222\052\066\053\100\055" +
    "\047\056\073\057\005\061\031\001\001\000\002\001\001" +
    "\000\054\007\033\011\064\012\076\030\034\031\006\032" +
    "\106\033\044\037\027\041\063\042\043\045\032\046\053" +
    "\047\037\050\042\051\224\052\066\053\100\055\047\056" +
    "\073\057\005\061\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\007\033\011\064\012\076\022\227\030" +
    "\034\031\006\032\106\033\044\037\027\041\063\042\043" +
    "\045\032\046\053\047\037\050\042\051\115\052\066\053" +
    "\100\055\047\056\073\057\005\061\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\007\033\011\064\012" +
    "\076\030\034\031\006\032\106\033\044\037\027\041\063" +
    "\042\043\045\032\046\053\047\037\050\042\051\232\052" +
    "\066\053\100\055\047\056\073\057\005\061\031\001\001" +
    "\000\002\001\001\000\054\007\033\011\064\012\076\030" +
    "\034\031\006\032\106\033\044\037\027\041\063\042\043" +
    "\045\032\046\053\047\037\050\042\051\234\052\066\053" +
    "\100\055\047\056\073\057\005\061\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\004\200\005\013\007\033\011\064\012\076" +
    "\013\025\014\035\015\050\016\040\017\026\030\034\031" +
    "\006\032\046\033\044\037\027\040\030\041\063\042\043" +
    "\044\072\045\032\046\053\047\037\050\042\051\036\052" +
    "\066\053\100\055\047\056\073\057\005\061\031\062\152" +
    "\001\001\000\002\001\001\000\054\007\033\011\064\012" +
    "\076\030\034\031\006\032\106\033\044\037\027\041\063" +
    "\042\043\045\032\046\053\047\037\050\042\051\243\052" +
    "\066\053\100\055\047\056\073\057\005\061\031\001\001" +
    "\000\002\001\001\000\054\007\033\011\064\012\076\030" +
    "\034\031\006\032\106\033\044\037\027\041\063\042\043" +
    "\045\032\046\053\047\037\050\042\051\245\052\066\053" +
    "\100\055\047\056\073\057\005\061\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\007\033\011\064\012" +
    "\076\030\034\031\006\032\106\033\044\037\027\041\063" +
    "\042\043\045\032\046\053\047\037\050\042\051\250\052" +
    "\066\053\100\055\047\056\073\057\005\061\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\007\033\011" +
    "\064\012\076\013\025\016\254\017\026\030\034\031\006" +
    "\032\106\033\044\037\027\041\063\042\043\045\032\046" +
    "\053\047\037\050\042\051\253\052\066\053\100\055\047" +
    "\056\073\057\005\061\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\033\030\034\031\006\032\106" +
    "\037\027\041\063\042\043\045\032\056\262\057\005\061" +
    "\031\001\001\000\030\007\033\030\034\031\006\032\106" +
    "\037\027\041\063\042\043\045\032\056\261\057\005\061" +
    "\031\001\001\000\030\007\033\030\034\031\006\032\106" +
    "\037\027\041\063\042\043\045\032\056\260\057\005\061" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\007\033\011\064\012\076\013\025\014" +
    "\035\015\050\016\040\017\026\030\034\031\006\032\106" +
    "\033\044\037\027\041\063\042\043\045\032\046\053\047" +
    "\037\050\042\051\036\052\066\053\100\055\047\056\073" +
    "\057\005\061\031\062\264\001\001\000\002\001\001\000" +
    "\054\007\033\011\064\012\076\030\034\031\006\032\106" +
    "\033\044\037\027\041\063\042\043\045\032\046\053\047" +
    "\037\050\042\051\266\052\066\053\100\055\047\056\073" +
    "\057\005\061\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\033\030\034\031\006\032\106\037\027" +
    "\041\063\042\043\045\032\055\273\056\073\057\005\061" +
    "\031\001\001\000\032\007\033\030\034\031\006\032\106" +
    "\037\027\041\063\042\043\045\032\055\272\056\073\057" +
    "\005\061\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\007\033\011" +
    "\064\012\076\030\034\031\006\032\106\033\044\037\027" +
    "\041\063\042\043\045\032\046\053\047\037\050\042\051" +
    "\277\052\066\053\300\055\047\056\073\057\005\061\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\007" +
    "\033\011\064\012\076\030\034\031\006\032\106\037\027" +
    "\041\063\042\043\045\032\047\037\050\042\052\302\053" +
    "\303\055\047\056\073\057\005\061\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\007\033\011\064\012" +
    "\076\030\034\031\006\032\106\033\044\037\027\041\063" +
    "\042\043\045\032\046\053\047\037\050\042\051\307\052" +
    "\066\053\310\055\047\056\073\057\005\061\031\001\001" +
    "\000\064\007\033\011\064\012\076\013\025\015\306\016" +
    "\040\017\026\030\034\031\006\032\106\033\044\037\027" +
    "\041\063\042\043\045\032\046\053\047\037\050\042\051" +
    "\253\052\066\053\100\055\047\056\073\057\005\061\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\007\033\011\064\012\076\030\034\031\006" +
    "\032\106\037\027\041\063\042\043\045\032\047\037\050" +
    "\042\052\312\053\313\055\047\056\073\057\005\061\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\033\030\034\031\006\032\106\037\027\041\063\042\043" +
    "\045\032\050\317\055\047\056\073\057\005\061\031\001" +
    "\001\000\034\007\033\030\034\031\006\032\106\037\027" +
    "\041\063\042\043\045\032\050\316\055\047\056\073\057" +
    "\005\061\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\007\033\011\064" +
    "\012\076\030\034\031\006\032\106\033\044\037\027\041" +
    "\063\042\043\045\032\046\053\047\037\050\042\051\125" +
    "\052\066\053\100\055\047\056\073\057\005\061\031\001" +
    "\001\000\054\007\033\011\064\012\076\030\034\031\006" +
    "\032\106\033\044\037\027\041\063\042\043\045\032\046" +
    "\053\047\037\050\042\051\327\052\066\053\100\055\047" +
    "\056\073\057\005\061\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\007\033\011\064\012\076\030\034\031" +
    "\006\032\106\033\044\037\027\041\063\042\043\045\032" +
    "\046\053\047\037\050\042\051\335\052\066\053\100\055" +
    "\047\056\073\057\005\061\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\007\033\011\064\012\076\013" +
    "\025\014\341\015\050\016\040\017\026\026\343\027\340" +
    "\030\034\031\006\032\106\033\044\037\027\041\063\042" +
    "\043\045\032\046\053\047\037\050\042\051\253\052\066" +
    "\053\100\055\047\056\073\057\005\061\031\001\001\000" +
    "\070\007\033\011\064\012\076\013\025\014\341\015\050" +
    "\016\040\017\026\026\356\030\034\031\006\032\106\033" +
    "\044\037\027\041\063\042\043\045\032\046\053\047\037" +
    "\050\042\051\253\052\066\053\100\055\047\056\073\057" +
    "\005\061\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\007\033\011" +
    "\064\012\076\030\034\031\006\032\106\033\044\037\027" +
    "\041\063\042\043\045\032\046\053\047\037\050\042\051" +
    "\346\052\066\053\100\055\047\056\073\057\005\061\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\007" +
    "\033\011\064\012\076\030\034\031\006\032\106\033\044" +
    "\037\027\041\063\042\043\045\032\046\053\047\037\050" +
    "\042\051\351\052\066\053\100\055\047\056\073\057\005" +
    "\061\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\007\033\011\064\012\076\030\034\031\006\032\106" +
    "\033\044\037\027\041\063\042\043\045\032\046\053\047" +
    "\037\050\042\051\354\052\066\053\100\055\047\056\073" +
    "\057\005\061\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\007\033" +
    "\011\064\012\076\030\034\031\006\032\106\033\044\037" +
    "\027\041\063\042\043\045\032\046\053\047\037\050\042" +
    "\051\361\052\066\053\100\055\047\056\073\057\005\061" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\007\033\011\064\012\076" +
    "\030\034\031\006\032\106\033\044\037\027\041\063\042" +
    "\043\045\032\046\053\047\037\050\042\051\371\052\066" +
    "\053\100\055\047\056\073\057\005\061\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\033\030\034" +
    "\031\006\032\106\037\027\041\063\042\043\045\032\056" +
    "\374\057\005\061\031\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArithParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArithParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArithParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ArithParser$actions {
  private final ArithParser parser;

  /** Constructor */
  CUP$ArithParser$actions(ArithParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action_part00000000(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArithParser$result;

      /* select the action based on the action number */
      switch (CUP$ArithParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = start_val;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArithParser$parser.done_parsing();
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= expOrLog 
            {
              ArithProgram RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
				Statement s = new Statement(e);
				StmtSequence ss = new StmtSequence(s);
				RESULT = new ArithProgram(ss); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= stmtList exptop 
            {
              ArithProgram RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
				Statement s = new Statement(e);
				lst.add(s);
				RESULT = new ArithProgram(lst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expOrLog SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= def SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtExpDefn d = (StmtExpDefn)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= print SEMI 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new Statement(p); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expOrLog ::= exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expOrLog",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expOrLog ::= logExpO 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expOrLog",48, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exptop ::= expo 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exptop ::= expc 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exptop ::= proc 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exptop ::= comment 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exptop",39, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expo ::= ifTheno 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expo",40, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expc ::= bitexp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expc",41, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expc ::= ifThenc 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expc",41, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // explist ::= explist exptop 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			lst.add(e);
			RESULT = lst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("explist",42, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // explist ::= exptop 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("explist",42, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // builtin ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",47, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // builtin ::= PAIR LPAREN exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPair(e1, e2); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",47, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // builtin ::= CAR LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCar(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",47, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // builtin ::= CDR LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCdr(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",47, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // builtin ::= SIZE LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpGetSize(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",47, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // builtin ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpVector v = (ExpVector)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",47, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // builtin ::= vectorCall 
            {
              Exp RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpVecCall vc = (ExpVecCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = vc; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",47, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // builtin ::= SUBSTR LPAREN exptop COMMA exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpSubstr(e1, e2, e3); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("builtin",47, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		plst.add(v);
			RESULT = plst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<String> result = new ArrayList<>();
				result.add(v);
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramList ::= 
            {
              ArrayList<String> RESULT =null;
		 ArrayList<String> result = new ArrayList<>();
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT=pl; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bind ::= VAR EQUAL exptop 
            {
              ExpBind RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpBind(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bind",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bindList ::= bindList COMMA bind 
            {
              ArrayList<ExpBind> RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<ExpBind> blst = (ArrayList<ExpBind>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpBind b = (ExpBind)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 blst.add(b);
			RESULT = blst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bindList ::= bind 
            {
              ArrayList<ExpBind> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpBind b = (ExpBind)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<ExpBind> result = new ArrayList<>();
				result.add(b); //changed from arraylist <string> to arraylist<expbind>
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bindList ::= 
            {
              ArrayList<ExpBind> RESULT =null;
		 ArrayList<ExpBind> result = new ArrayList<>();
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bindList",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pred ::= logExpO COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(l,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pred ::= VAR COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(new ExpVar(l),e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pred ::= ELSE COLON exptop SEMI 
            {
              ExpCClause RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCClause(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pred",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // predList ::= predList pred 
            {
              ArrayList<ExpCClause> RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<ExpCClause> plst = (ArrayList<ExpCClause>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpCClause p = (ExpCClause)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 plst.add(p);
			RESULT = plst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("predList",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // predList ::= pred 
            {
              ArrayList<ExpCClause> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpCClause p = (ExpCClause)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<ExpCClause> result = new ArrayList<>();
				result.add(p);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("predList",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list ::= LBRACKET argList RBRACKET 
            {
              ExpList RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpList(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("list",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list ::= LIST LPAREN argList RPAREN 
            {
              ExpList RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpList(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("list",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // list ::= ELIST 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("list",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vector ::= LBRACKET COLON argList COLON RBRACKET 
            {
              ExpVector RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		 RESULT = new ExpVector(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vector",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // vector ::= LBRACKET sizeList RBRACKET 
            {
              ExpVector RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> slst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vector",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // size ::= exptop COLON exptop 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpSize(e1,e2); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("size",27, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sizeList ::= sizeList COMMA size 
            {
              ArrayList<Exp> RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> slst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 slst.add(s);
			RESULT = slst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("sizeList",28, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sizeList ::= size 
            {
              ArrayList<Exp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<Exp> result = new ArrayList<>();
				result.add(s);
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("sizeList",28, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vectorCall ::= vector LBRACKET exptop RBRACKET 
            {
              ExpVecCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		ExpVector v = (ExpVector)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpVecCall(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vectorCall",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // vectorCall ::= VAR LBRACKET exptop RBRACKET 
            {
              ExpVecCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpVecCall(new ExpVar(v),e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("vectorCall",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // proc ::= PROC VAR stmtList 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",25, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // proc ::= PROC LPAREN paramList RPAREN exptop 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpProcedure(plst,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",25, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // proc ::= PROC LPAREN paramList RPAREN LBRACKET stmtList RBRACKET 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		ArrayList<String> plst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("proc",25, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // call ::= CALL LPAREN VAR COMMA list RPAREN 
            {
              ExpCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ExpList lst = (ExpList)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT=new ExpCall(new ExpVar(v),lst);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("call",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // call ::= CALL LPAREN VAR COMMA VAR RPAREN 
            {
              ExpCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String lst = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT=new ExpCall(new ExpVar(v),new ExpVar(lst));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("call",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // let ::= LET LPAREN bindList RPAREN stmtList 
            {
              Exp RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<ExpBind> blst = (ArrayList<ExpBind>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLet(blst,body); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("let",29, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // logExp ::= exptop COMPARISON exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				RESULT = new ExpCompare(e,e2,c);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExp",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // logExp ::= exptop EQUAL exptop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				RESULT = new ExpCompare(e,e2,c);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExp",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // logExpO ::= logExpO OR logExpA 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1,e2,"OR"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logExpO ::= logExpA 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpO",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logExpA ::= logExpA AND logExpN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e1,e2,"AND"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logExpA ::= logExpN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpA",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // logExpN ::= NOT logExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpComp(e,e,"NOT"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpN",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // logExpN ::= logFactor 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logExpN",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // logFactor ::= logExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logFactor ::= LPAREN logExpO RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logFactor ::= BOOLLIT 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitBool(b);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logFactor ::= ISPAIR LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpIsPair(e1); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logFactor ::= ISEQ LPAREN exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpIsEq(e1, e2);  
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logFactor ::= ISEQV LPAREN exptop COMMA exptop RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpIsEqv(e1, e2); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("logFactor",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ifTheno ::= IF logExpO THEN exptop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
						//changed logExp to logExpO
			ArrayList<Exp> result = new ArrayList<>(); 
				result.add(e);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ifTheno ::= IF logExpO THEN expc ELSE expo 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ifTheno ::= IF VAR THEN exptop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
						//changed logExp to logExpO
			ArrayList<Exp> result = new ArrayList<>(); 
				result.add(e);
				RESULT = new ExpIfThen(result,new ExpVar(l));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ifTheno ::= IF VAR THEN expc ELSE expo 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,new ExpVar(l));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifTheno",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ifThenc ::= IF logExpO THEN expc ELSE expc 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 	//changed logExp to logExpO
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result,l);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifThenc",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ifThenc ::= IF VAR THEN expc ELSE expc 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 	//changed logExp to logExpO
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				result.add(e2);
				RESULT = new ExpIfThen(result, new ExpVar(l));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifThenc",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // case ::= CASE LBRACE predList RBRACE 
            {
              Exp RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<ExpCClause> plst = (ArrayList<ExpCClause>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpCase(plst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("case",31, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expSeq ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence alst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = alst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expSeq",32, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // mulExp ::= LPAREN argList RPAREN 
            {
              Exp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new MultiValExp(alst); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("mulExp",33, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // def ::= DEF VAR expOrLog 
            {
              StmtExpDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new StmtExpDefn(v,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("def",30, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // definition ::= VAR ASSIGN expOrLog 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // definition ::= vectorCall ASSIGN expOrLog 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ExpVecCall v = (ExpVecCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // print ::= PRINT LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPrint(e,"block"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("print",34, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // print ::= PRINTLN LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpPrint(e,"ln"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("print",34, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // read ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead("string"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("read",35, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // read ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		RESULT = new ExpRead("int"); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("read",35, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comment ::= LCOM STRING NL 
            {
              Exp RESULT =null;
		RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comment",36, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comment ::= BCOMS STRING BCOME 
            {
              Exp RESULT =null;
		RESULT = null; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comment",36, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // argList ::= argList COMMA exptop 
            {
              ArrayList<Exp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> alst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		alst.add(e);
			RESULT = alst; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // argList ::= exptop 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
				ArrayList<Exp> result = new ArrayList<>();
				result.add(e);
				RESULT = result;
			
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // argList ::= 
            {
              ArrayList<Exp> RESULT =null;
		 ArrayList<Exp> result = new ArrayList<>();
				RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // argListE ::= argList 
            {
              ArrayList<Exp> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT=al;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",17, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // funCall ::= VAR LPAREN argList RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> ae = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		
			RESULT = new ExpFunCall(v,ae); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funCall",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bitexp ::= bitexp AMP expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(b,e,BitwiseOp.AND); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",37, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bitexp ::= bitexp BAR expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(b,e,BitwiseOp.OR); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",37, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bitexp ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("bitexp",37, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",43, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= TILDE atom 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpBit(a,a,BitwiseOp.NOT); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor ::= LPAREN MINUS exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT =new ExpNegate(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor ::= atom POW factor 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpPow(a,f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= atom 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = a; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",44, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // atom ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitInt(ilit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // atom ::= FLOAT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpLitDouble(ilit);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // atom ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // atom ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLitString(s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // atom ::= LPAREN exptop RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // atom ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // atom ::= case 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // atom ::= let 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // atom ::= read 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = r; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // atom ::= builtin 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = b; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // atom ::= expSeq 
            {
              Exp RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp seq = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT =seq; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("atom",45, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // empty ::= 
            {
              Object RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("empty",46, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ArithParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
              return CUP$ArithParser$do_action_part00000000(
                               CUP$ArithParser$act_num,
                               CUP$ArithParser$parser,
                               CUP$ArithParser$stack,
                               CUP$ArithParser$top);
    }
}

}
