def quicksort proc(vec) {
    def helper proc(start, end, v)  { 

        def partition proc(s,e,v2) {

            def incUntil proc(st, len, arr,piv) {
                if st < len then
                    if arr[st] < piv then 
                        incUntil(st + 1, len, arr, piv) 
                    else
                        st
                else
                    st;
            };

            def decUntil proc(st, end, arr, piv) {
                if end >= st then
                    if arr[end] >= piv then
                        decUntil(st, end - 1, arr, piv)
                    else
                        end 
                else
                    end;
            };

            // traverse through all elements
            // compare each element with pivot

            l := incUntil(s, size(v2), v2, pivot);

            r := decUntil(s, e, v2, pivot);

            // swap the pivot element with the greater element specified by i

            if l < r then {
                tmp := v2[l];
                v2[l] := v2[r];
                v2[r] := tmp;
                partition(l,r,v2);
            }
            else {
                tmp := v2[l];
                v2[l] := v2[end + 1];
                v2[end + 1] := tmp;
                l;
            };
        };

        if start < end then {
            // choose the rightmost element as pivot
            piv_index := (start + end) / 2;
            pivot := v[piv_index];

            tmp:= v[piv_index];
            v[piv_index] := v[end];
            v[end] := tmp;

            end := end - 1;

            p := partition(start,end,v);
            helper(start, p - 1, v);
            helper(p + 1, end + 1, v);
        };

        v;
    };


    helper(0, size(vec) - 1, vec);

};
    

v := [: 8, 7, 6, 1, 0, 9 , 2 :];

quicksort(v)
